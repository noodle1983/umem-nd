cscope 16 /home/ubt/umem-1.0.1 -q 0000002141 0000307339
	@envvar.c

32 
	~"c⁄fig.h
"

33 
	~<˘y≥.h
>

34 
	~<î∫o.h
>

35 
	~<limôs.h
>

36 
	~<°dlib.h
>

37 
	~<°rög.h
>

38 #i‡
HAVE_DLFCN_H


39 
	~<dlf˙.h
>

42 
	~"umem_ba£.h
"

43 
	~"vmem_ba£.h
"

63 
	#UMEM_ENV_ITEM_MAX
 512

	)

65 
	gumem_ív_ôem
;

67 
	t¨g_¥o˚ss_t
(c⁄° 
	tumem_ív_ôem
 *
	tôem
, c⁄° *
	tvÆue
);

68 
	#ARG_SUCCESS
 0

	)

69 
	#ARG_BAD
 1

	)

71 
	sumem_ív_ôem
 {

72 c⁄° *
	môem_«me
;

73 c⁄° *
	môem_öãrÁ˚_°abûôy
;

75 
	mITEM_INVALID
,

76 
	mITEM_FLAG
,

77 
	mITEM_CLEARFLAG
,

78 
	mITEM_OPTUINT
,

79 
	mITEM_UINT
,

80 
	mITEM_OPTSIZE
,

81 
	mITEM_SIZE
,

82 
	mITEM_SPECIAL


83 } 
	môem_ty≥
;

84 c⁄° *
	môem_des¸ùti⁄
;

85 
uöt_t
 *
	môem_Êag_èrgë
;

86 
uöt_t
 
	môem_Êag_vÆue
;

87 
uöt_t
 *
	môem_uöt_èrgë
;

88 
size_t
 *
	môem_size_èrgë
;

89 
¨g_¥o˚ss_t
 *
	môem_•ecül
;

90 } 
	tumem_ív_ôem_t
;

92 #i‚de‡
UMEM_STANDALONE


93 
¨g_¥o˚ss_t
 
	gumem_backíd_¥o˚ss
;

96 #ifde‡
__GLIBC__


100 
	~<uni°d.h
>

101 *
	$ß„_gëív
(c⁄° *
«me
)

103 
i
, 
l
;

104 
l
 = 0; 
«me
[l];Ü++)

106 
i
 = 0; 
__ívú⁄
[i]; i++) {

107 i‡(!
	`memcmp
(
__ívú⁄
[
i
], 
«me
, 
l
) && __environ[i][l] == '=') {

108  &
__ívú⁄
[
i
][
l
+1];

111  
NULL
;

112 
	}
}

113 
	#gëív
(
x
Ë
	`ß„_gëív
(x)

	)

116 
¨g_¥o˚ss_t
 
	gumem_log_¥o˚ss
;

118 c⁄° *
	g____umem_ívú⁄_msg_›ti⁄s
 = "-- UMEM_OPTIONS --";

120 
umem_ív_ôem_t
 
	gumem_›ti⁄s_ôems
[] = {

121 #i‚de‡
UMEM_STANDALONE


122 { "backíd", "Evﬁvög", 
ITEM_SPECIAL
,

124 
NULL
, 0, NULL, NULL,

125 &
umem_backíd_¥o˚ss


129 { "c⁄cuºícy", "Priv©e", 
ITEM_UINT
,

131 
NULL
, 0, &
umem_max_n˝us


133 { "max_c⁄ã¡i⁄", "Priv©e", 
ITEM_UINT
,

136 
NULL
, 0, &
umem_dïŸ_c⁄ã¡i⁄


138 { "nomagazöes", "Priv©e", 
ITEM_FLAG
,

140 &
umem_Êags
, 
UMF_NOMAGAZINE


142 { "ª≠_öãrvÆ", "Priv©e", 
ITEM_UINT
,

144 
NULL
, 0, &
umem_ª≠_öãrvÆ


147 #i‚de‡
_WIN32


148 #i‚de‡
UMEM_STANDALONE


149 { "sbrk_∑gesize", "Priv©e", 
ITEM_SIZE
,

151 
NULL
, 0, NULL, &
vmem_sbrk_∑gesize


156 { 
NULL
, "--Énd o‡UMEM_OPTIONS --", 
ITEM_INVALID
 }

159 c⁄° *
	g____umem_ívú⁄_msg_debug
 = "-- UMEM_DEBUG --";

161 
umem_ív_ôem_t
 
	gumem_debug_ôems
[] = {

162 { "deÁu…", "Un°abÀ", 
ITEM_FLAG
,

164 &
umem_Êags
,

165 
UMF_AUDIT
 | 
UMF_CONTENTS
 | 
UMF_DEADBEEF
 | 
UMF_REDZONE


167 { "audô", "Un°abÀ", 
ITEM_OPTUINT
,

170 &
umem_Êags
, 
UMF_AUDIT
, &
umem_°ack_dïth


172 { "c⁄ã¡s", "Un°abÀ", 
ITEM_OPTSIZE
,

176 &
umem_Êags
, 
UMF_CONTENTS
, 
NULL
, &
umem_c⁄ã¡_maxßve


178 { "gu¨ds", "Un°abÀ", 
ITEM_FLAG
,

180 &
umem_Êags
, 
UMF_DEADBEEF
 | 
UMF_REDZONE


182 { "vîbo£", "Un°abÀ", 
ITEM_FLAG
,

184 &
umem_ouçut
, 1

187 { "nosig«l", "Priv©e", 
ITEM_FLAG
,

190 &
umem_Êags
, 
UMF_AUDIT
 | 
UMF_CHECKSIGNAL


192 { "fúewÆl", "Priv©e", 
ITEM_SIZE
,

195 &
umem_Êags
, 
UMF_FIREWALL
, 
NULL
, &
umem_möfúewÆl


197 { "lôe", "Priv©e", 
ITEM_FLAG
,

199 &
umem_Êags
, 
UMF_LITE


201 { "maxvîify", "Priv©e", 
ITEM_SIZE
,

204 
NULL
, 0, NULL, &
umem_maxvîify


206 { "nﬂb‹t", "Priv©e", 
ITEM_CLEARFLAG
,

209 &
umem_ab‹t
, 1

211 { "mtbf", "Priv©e", 
ITEM_UINT
,

214 
NULL
, 0, &
umem_mtbf


216 { "øndom", "Priv©e", 
ITEM_FLAG
,

218 &
umem_Êags
, 
UMF_RANDOMIZE


220 { "Ælvîbo£", "Priv©e", 
ITEM_FLAG
,

222 &
umem_ouçut
, 2

225 { 
NULL
, "--Énd o‡UMEM_DEBUG --", 
ITEM_INVALID
 }

228 c⁄° *
	g____umem_ívú⁄_msg_loggög
 = "-- UMEM_LOGGING --";

230 
umem_ív_ôem_t
 
	gumem_loggög_ôems
[] = {

231 { "å™ß˘i⁄", "Un°abÀ", 
ITEM_SPECIAL
,

234 
NULL
, 0, NULL,

235 &
umem_å™ß˘i⁄_log_size
, &
umem_log_¥o˚ss


237 { "c⁄ã¡s", "Un°abÀ", 
ITEM_SPECIAL
,

242 &
umem_Êags
, 
UMF_CONTENTS
, 
NULL
,

243 &
umem_c⁄ã¡_log_size
, &
umem_log_¥o˚ss


245 { "Áû", "Un°abÀ", 
ITEM_SPECIAL
,

248 
NULL
, 0, NULL,

249 &
umem_Áûuª_log_size
, &
umem_log_¥o˚ss


252 { "¶ab", "Priv©e", 
ITEM_SPECIAL
,

254 
NULL
, 0, NULL,

255 &
umem_¶ab_log_size
, &
umem_log_¥o˚ss


258 { 
NULL
, "--Énd o‡UMEM_LOGGING --", 
ITEM_INVALID
 }

261 
	sumem_ívv¨
 {

262 c⁄° *
	mív_«me
;

263 c⁄° *
	mív_func
;

264 
umem_ív_ôem_t
 *
	mív_ôem_li°
;

265 c⁄° *
	mív_gëív_ªsu…
;

266 c⁄° *
	mív_func_ªsu…
;

267 } 
	tumem_ívv¨_t
;

269 
umem_ívv¨_t
 
	gumem_ívv¨s
[] = {

270 { "UMEM_DEBUG", "_umem_debug_öô", 
umem_debug_ôems
 },

271 { "UMEM_OPTIONS", "_umem_›ti⁄s_öô", 
umem_›ti⁄s_ôems
 },

272 { "UMEM_LOGGING", "_umem_loggög_öô", 
umem_loggög_ôems
 },

273 { 
NULL
, NULL, NULL }

276 
umem_ívv¨_t
 *
	gív_cuºít
;

277 
	#CURRENT
 (
ív_cuºít
->
ív_«me
)

	)

280 
	$em±y
(c⁄° *
°r
)

282 
c
;

284 (
c
 = *
°r
Ë!'\0' && 
	`is•a˚
(c))

285 
°r
++;

287  (*
°r
 == '\0');

288 
	}
}

291 
	$ôem_uöt_¥o˚ss
(c⁄° 
umem_ív_ôem_t
 *
ôem
, c⁄° *
ôem_¨g
)

293 
ul⁄g_t
 
ªsu…
;

294 *
íd±r
 = "";

295 
ﬁdî∫o
;

297 
ﬁdî∫o
 = 
î∫o
;

298 
î∫o
 = 0;

300 i‡(
	`em±y
(
ôem_¨g
)) {

301 
badnumbî
;

304 
ªsu…
 = 
	`°πoul
(
ôem_¨g
, &
íd±r
, 10);

306 i‡(
ªsu…
 =
ULONG_MAX
 && 
î∫o
 =
ERANGE
) {

307 
î∫o
 = 
ﬁdî∫o
;

308 
ovîÊow
;

310 
î∫o
 = 
ﬁdî∫o
;

312 i‡(*
íd±r
 != '\0')

313 
badnumbî
;

314 i‡((
uöt_t
)
ªsu…
 !=Ñesult)

315 
ovîÊow
;

317 (*
ôem
->
ôem_uöt_èrgë
Ë(
uöt_t
)
ªsu…
;

318  (
ARG_SUCCESS
);

320 
badnumbî
:

321 
	`log_mesßge
("%s: %s:ÇŸáÇumbî\n", 
CURRENT
, 
ôem
->
ôem_«me
);

322  (
ARG_BAD
);

324 
ovîÊow
:

325 
	`log_mesßge
("%s: %s: ovîÊowed\n", 
CURRENT
, 
ôem
->
ôem_«me
);

326  (
ARG_BAD
);

327 
	}
}

330 
	$ôem_size_¥o˚ss
(c⁄° 
umem_ív_ôem_t
 *
ôem
, c⁄° *
ôem_¨g
)

332 
ul⁄g_t
 
ªsu…
;

333 
ul⁄g_t
 
ªsu…_¨g
;

334 *
íd±r
 = "";

335 
ﬁdî∫o
;

337 i‡(
	`em±y
(
ôem_¨g
))

338 
badnumbî
;

340 
ﬁdî∫o
 = 
î∫o
;

341 
î∫o
 = 0;

343 
ªsu…_¨g
 = 
	`°πoul
(
ôem_¨g
, &
íd±r
, 10);

345 i‡(
ªsu…_¨g
 =
ULONG_MAX
 && 
î∫o
 =
ERANGE
) {

346 
î∫o
 = 
ﬁdî∫o
;

347 
ovîÊow
;

349 
î∫o
 = 
ﬁdî∫o
;

351 
ªsu…
 = 
ªsu…_¨g
;

353 *
íd±r
) {

356 
ªsu…
 *= 1024;

357 i‡(
ªsu…
 < 
ªsu…_¨g
)

358 
ovîÊow
;

362 
ªsu…
 *= 1024;

363 i‡(
ªsu…
 < 
ªsu…_¨g
)

364 
ovîÊow
;

368 
ªsu…
 *= 1024;

369 i‡(
ªsu…
 < 
ªsu…_¨g
)

370 
ovîÊow
;

374 
ªsu…
 *= 1024;

375 i‡(
ªsu…
 < 
ªsu…_¨g
)

376 
ovîÊow
;

377 
íd±r
++;

383 i‡(*
íd±r
 != '\0')

384 
badnumbî
;

386 (*
ôem
->
ôem_size_èrgë
Ë
ªsu…
;

387  (
ARG_SUCCESS
);

389 
badnumbî
:

390 
	`log_mesßge
("%s: %s:ÇŸáÇumbî\n", 
CURRENT
, 
ôem
->
ôem_«me
);

391  (
ARG_BAD
);

393 
ovîÊow
:

394 
	`log_mesßge
("%s: %s: ovîÊowed\n", 
CURRENT
, 
ôem
->
ôem_«me
);

395  (
ARG_BAD
);

396 
	}
}

399 
	$umem_log_¥o˚ss
(c⁄° 
umem_ív_ôem_t
 *
ôem
, c⁄° *
ôem_¨g
)

401 i‡(
ôem_¨g
 !
NULL
) {

402 
ªt
;

403 
ªt
 = 
	`ôem_size_¥o˚ss
(
ôem
, 
ôem_¨g
);

404 i‡(
ªt
 !
ARG_SUCCESS
)

405  (
ªt
);

407 i‡(*
ôem
->
ôem_size_èrgë
 == 0)

408  (
ARG_SUCCESS
);

410 *
ôem
->
ôem_size_èrgë
 = 64*1024;

412 
umem_loggög
 = 1;

413  (
ARG_SUCCESS
);

414 
	}
}

416 #i‚de‡
UMEM_STANDALONE


418 
	$umem_backíd_¥o˚ss
(c⁄° 
umem_ív_ôem_t
 *
ôem
, c⁄° *
ôem_¨g
)

420 c⁄° *
«me
 = 
ôem
->
ôem_«me
;

422 i‡(
ôem_¨g
 =
NULL
)

423 
Áû
;

425 i‡(
	`°rcmp
(
ôem_¨g
, "sbrk") == 0)

426 
vmem_backíd
 |
VMEM_BACKEND_SBRK
;

427 i‡(
	`°rcmp
(
ôem_¨g
, "mmap") == 0)

428 
vmem_backíd
 |
VMEM_BACKEND_MMAP
;

430 
Áû
;

432  (
ARG_SUCCESS
);

434 
Áû
:

435 
	`log_mesßge
("%s: %s: must be %s=sbrk or %s=mmap\n",

436 
CURRENT
, 
«me
,Çame,Çame);

437  (
ARG_BAD
);

438 
	}
}

442 
	$¥o˚ss_ôem
(c⁄° 
umem_ív_ôem_t
 *
ôem
, c⁄° *
ôem_¨g
)

444 
¨g_ªquúed
 = 0;

445 
¨g_¥o˚ss_t
 *
¥o˚ss‹
;

447 
ôem
->
ôem_ty≥
) {

448 
ITEM_FLAG
:

449 
ITEM_CLEARFLAG
:

450 
ITEM_OPTUINT
:

451 
ITEM_OPTSIZE
:

452 
ITEM_SPECIAL
:

453 
¨g_ªquúed
 = 0;

456 
ITEM_UINT
:

457 
ITEM_SIZE
:

458 
¨g_ªquúed
 = 1;

462 
ôem
->
ôem_ty≥
) {

463 
ITEM_FLAG
:

464 
ITEM_CLEARFLAG
:

465 i‡(
ôem_¨g
 !
NULL
) {

466 
	`log_mesßge
("%s: %s: doesÇotÅakeá value. ignored\n",

467 
CURRENT
, 
ôem
->
ôem_«me
);

470 
¥o˚ss‹
 = 
NULL
;

473 
ITEM_UINT
:

474 
ITEM_OPTUINT
:

475 
¥o˚ss‹
 = 
ôem_uöt_¥o˚ss
;

478 
ITEM_SIZE
:

479 
ITEM_OPTSIZE
:

480 
¥o˚ss‹
 = 
ôem_size_¥o˚ss
;

483 
ITEM_SPECIAL
:

484 
¥o˚ss‹
 = 
ôem
->
ôem_•ecül
;

488 
	`log_mesßge
("%s: %s: InvalidÅype. Ignored\n",

489 
CURRENT
, 
ôem
->
ôem_«me
);

493 i‡(
¨g_ªquúed
 && 
ôem_¨g
 =
NULL
) {

494 
	`log_mesßge
("%s: %s: Required value missing\n",

495 
CURRENT
, 
ôem
->
ôem_«me
);

496 
övÆid
;

499 i‡(
ôem_¨g
 !
NULL
 || 
ôem
->
ôem_ty≥
 =
ITEM_SPECIAL
) {

500 i‡(
	`¥o˚ss‹
(
ôem
, 
ôem_¨g
Ë!
ARG_SUCCESS
)

501 
övÆid
;

504 i‡(
ôem
->
ôem_Êag_èrgë
) {

505 i‡(
ôem
->
ôem_ty≥
 =
ITEM_CLEARFLAG
)

506 (*
ôem
->
ôem_Êag_èrgë
Ë&~ôem->
ôem_Êag_vÆue
;

508 (*
ôem
->
ôem_Êag_èrgë
Ë|ôem->
ôem_Êag_vÆue
;

512 
övÆid
:

514 
	}
}

516 
	#ENV_SHORT_BYTES
 10

	)

518 
	$umem_¥o˚ss_vÆue
(
umem_ív_ôem_t
 *
ôem_li°
, c⁄° *
beg
, c⁄° *
íd
)

520 
buf
[
UMEM_ENV_ITEM_MAX
];

521 *
¨g±r
;

523 
size_t
 
cou¡
;

525 
beg
 < 
íd
 && 
	`is•a˚
(*beg))

526 
beg
++;

528 
beg
 < 
íd
 && 
	`is•a˚
(*(end - 1)))

529 
íd
--;

531 i‡(
beg
 >
íd
) {

532 
	`log_mesßge
("%s:Ém±y o±i⁄\n", 
CURRENT
);

536 
cou¡
 = 
íd
 - 
beg
;

538 i‡(
cou¡
 + 1 >  (
buf
)) {

539 
outbuf
[
ENV_SHORT_BYTES
 + 1];

543 (Ë
	`°∫˝y
(
outbuf
, 
beg
, 
ENV_SHORT_BYTES
);

544 
outbuf
[
ENV_SHORT_BYTES
] = 0;

546 
	`log_mesßge
("%s:árgumíà\"%s...\"Åoÿl⁄g\n", 
CURRENT
,

547 
outbuf
);

551 (Ë
	`°∫˝y
(
buf
, 
beg
, 
cou¡
);

552 
buf
[
cou¡
] = 0;

554 
¨g±r
 = 
	`°rchr
(
buf
, '=');

556 i‡(
¨g±r
 !
NULL
)

557 *
¨g±r
++ = 0;

559 ; 
ôem_li°
->
ôem_«me
 !
NULL
; item_list++) {

560 i‡(
	`°rcmp
(
buf
, 
ôem_li°
->
ôem_«me
) == 0) {

561 (Ë
	`¥o˚ss_ôem
(
ôem_li°
, 
¨g±r
);

565 
	`log_mesßge
("%s: '%s'ÇŸÑecognized\n", 
CURRENT
, 
buf
);

566 
	}
}

570 
	$umem_£tup_ívv¨s
(
övÆid
)

572 
umem_ívv¨_t
 *
cur_ív
;

574 
STATE_START
,

575 
STATE_GETENV
,

576 
STATE_DLOPEN
,

577 
STATE_DLSYM
,

578 
STATE_FUNC
,

579 
STATE_DONE


580 } 
°©e
 = 
STATE_START
;

581 #i‚de‡
UMEM_STANDALONE


582 *
h
;

585 i‡(
övÆid
) {

586 c⁄° *
whîe
;

592 
°©e
) {

593 
STATE_START
:

594 
whîe
 = "before getenv(3C) calls -- "

597 
STATE_GETENV
:

598 
whîe
 = "during getenv(3C) calls -- "

601 
STATE_DLOPEN
:

602 
whîe
 = "during dlopen(3C) call -- "

605 
STATE_DLSYM
:

606 
whîe
 = "during dlsym(3C) call -- "

609 
STATE_FUNC
:

610 
whîe
 = "during _umem_*() call -- "

613 
STATE_DONE
:

614 
whîe
 = "after dlsym() or _umem_*() calls.";

617 
whîe
 = "at unknownÖoint -- "

622 
	`log_mesßge
("ªcursivêÆloˇti⁄ %s\n", 
whîe
);

624 
cur_ív
 = 
umem_ívv¨s
; cur_ív->
ív_«me
 !
NULL
;

625 
cur_ív
++) {

626 i‡(
°©e
 =
STATE_GETENV
)

627 
cur_ív
->
ív_gëív_ªsu…
 = 
NULL
;

628 i‡(
°©e
 !
STATE_DONE
)

629 
cur_ív
->
ív_func_ªsu…
 = 
NULL
;

632 
°©e
 = 
STATE_DONE
;

636 
°©e
 = 
STATE_GETENV
;

638 
cur_ív
 = 
umem_ívv¨s
; cur_ív->
ív_«me
 !
NULL
; cur_env++) {

639 
cur_ív
->
ív_gëív_ªsu…
 = 
	`gëív
(cur_ív->
ív_«me
);

640 i‡(
°©e
 =
STATE_DONE
)

644 #i‚de‡
UMEM_STANDALONE


645 #ifde‡
_WIN32


646 
	#dl›í
(
a
, 
b
Ë
	`GëModuÀH™dÀ
(
NULL
)

	)

647 
	#dlsym
(
a
, 
b
Ë
	`GëProcAddªss
((
HANDLE
Ô, b)

	)

648 
	#dl˛o£
(
a
Ë0

	)

649 
	#dÀº‹
(Ë0

	)

651 
°©e
 = 
STATE_DLOPEN
;

653 i‡((
h
 = 
	`dl›í
(0, 
RTLD_FIRST
 | 
RTLD_LAZY
)Ë!
NULL
) {

654 
cur_ív
 = 
umem_ívv¨s
; cur_ív->
ív_«me
 !
NULL
;

655 
cur_ív
++) {

656 c⁄° *(*
func
)();

657 c⁄° *
vÆue
;

659 
°©e
 = 
STATE_DLSYM
;

660 
func
 = (c⁄° *(*)())
	`dlsym
(
h
,

661 
cur_ív
->
ív_func
);

663 i‡(
°©e
 =
STATE_DONE
)

666 
°©e
 = 
STATE_FUNC
;

667 i‡(
func
 !
NULL
) {

668 
vÆue
 = 
	`func
();

669 i‡(
°©e
 =
STATE_DONE
)

671 
cur_ív
->
ív_func_ªsu…
 = 
vÆue
;

674 (Ë
	`dl˛o£
(
h
);

676 (Ë
	`dÀº‹
();

680 
°©e
 = 
STATE_DONE
;

681 
	}
}

687 
	$umem_¥o˚ss_ívv¨s
()

689 c⁄° *
vÆue
;

690 c⁄° *
íd
, *
√xt
;

691 
umem_ívv¨_t
 *
cur_ív
;

693 
cur_ív
 = 
umem_ívv¨s
; cur_ív->
ív_«me
 !
NULL
; cur_env++) {

694 
ív_cuºít
 = 
cur_ív
;

696 
vÆue
 = 
cur_ív
->
ív_gëív_ªsu…
;

697 i‡(
vÆue
 =
NULL
)

698 
vÆue
 = 
cur_ív
->
ív_func_ªsu…
;

701 i‡(
vÆue
 =
NULL
)

704 
íd
 = 
vÆue
; *íd !'\0'; vÆuê
√xt
) {

705 
íd
 = 
	`°rchr
(
vÆue
, ',');

706 i‡(
íd
 !
NULL
)

707 
√xt
 = 
íd
 + 1;

709 
√xt
 = 
íd
 = 
vÆue
 + 
	`°æí
(value);

711 
	`umem_¥o˚ss_vÆue
(
cur_ív
->
ív_ôem_li°
, 
vÆue
, 
íd
);

714 
	}
}

	@getpcstack.c

32 
	~"c⁄fig.h
"

33 
	~"misc.h
"

35 #i‡
HAVE_UCONTEXT_H


36 
	~<uc⁄ãxt.h
>

39 #i‡
HAVE_SYS_FRAME_H


40 
	~<sys/‰ame.h
>

42 #i‡
HAVE_SYS_STACK_H


43 
	~<sys/°ack.h
>

46 
	~<°dio.h
>

48 #i‡
deföed
(
__MACH__
)

52 
	#UMEM_FRAMESIZE
 (2 * ())

	)

54 #ñi‡
deföed
(
__•¨c
Ë|| deföed(
__•¨cv9
)

55 
Êush_wödows
();

56 
	#UMEM_FRAMESIZE
 
MINFRAME


	)

58 #ñi‡
deföed
(
__i386
Ë|| deföed(
__amd64
)

63 
	#UMEM_FRAMESIZE
 ( (
‰ame
))

	)

65 #ñi‡!
deföed
(
EC_UMEM_DUMMY_PCSTACK
)

66 #îr‹ 
√eds
 
upd©e
 
√w
 
¨chôe˘uª


75 
	$gëpc°ack
(
uöçå_t
 *
pc°ack
, 
pc°ack_limô
, 
check_sig«l
)

77 #ifde‡
EC_UMEM_DUMMY_PCSTACK


80 
‰ame
 *
Â
;

81 
‰ame
 *
√xtÂ
, *
möÂ
;

82 
dïth
 = 0;

83 
uöçå_t
 
ba£
 = 0;

84 
size_t
 
size
 = 0;

85 #i‚de‡
UMEM_STANDALONE


86 
⁄_Æt°ack
 = 0;

87 
uöçå_t
 
sigba£
 = 0;

88 
size_t
 
sigsize
 = 0;

90 
°ack_t
 
°
;

92 i‡(
	`°ack_gëbounds
(&
°
) != 0) {

93 i‡(
	`thr_°k£gmít
(&
°
) != 0 ||

94 (
uöçå_t
)
°
.
ss_•
 < st.
ss_size
) {

101 
°
.
ss_•
 = (*)(((
uöçå_t
)°.ss_•Ë- st.
ss_size
);

102 
°
.
ss_Êags
 = 0;

104 
⁄_Æt°ack
 = (
°
.
ss_Êags
 & 
SS_ONSTACK
);

106 i‡(
°
.
ss_size
 != 0) {

107 
ba£
 = (
uöçå_t
)
°
.
ss_•
;

108 
size
 = 
°
.
ss_size
;

117 
ba£
 = 0;

118 
size
 = (
uöçå_t
)
°
.
ss_•
;

121 i‡(
check_sig«l
 != 0) {

122 (*
sigfunc
)(Ë
NULL
;

123 
sigfuncsize
 = 0;

124 
	`thr_sighndÃöfo
((**)(), *);

126 
	`thr_sighndÃöfo
(&
sigfunc
, &
sigfuncsize
);

127 
sigba£
 = (
uöçå_t
)
sigfunc
;

128 
sigsize
 = 
sigfuncsize
;

131 
ba£
 = (
uöçå_t
)
umem_mö_°ack
;

132 
size
 = 
umem_max_°ack
 - 
umem_mö_°ack
;

139 i‡(
size
 >
UMEM_FRAMESIZE
 - 1)

140 
size
 -(
UMEM_FRAMESIZE
 - 1);

142 
size
 = 0;

144 #i‡
	`deföed
(
__•¨c
Ë|| deföed(
__•¨cv9
)

145 
	`Êush_wödows
();

149 
Â
 = (
‰ame
 *)((
ˇddr_t
)
	`gëÂ
(Ë+ 
STACK_BIAS
);

151 
möÂ
 = 
Â
;

153 i‡(((
uöçå_t
)
Â
 - 
ba£
Ë>
size
)

156 
dïth
 < 
pc°ack_limô
) {

157 
uöçå_t
 
tmp
;

160 
√xtÂ
 = (
‰ame
 *)((
ˇddr_t
)
Â
->
‰_ßvÂ
 + 
STACK_BIAS
);

161 
tmp
 = (
uöçå_t
)
√xtÂ
;

169 i‡(
tmp
 !
	`SA
(tmp))

171 i‡(
√xtÂ
 <
möÂ
 || (
tmp
 - 
ba£
Ë>
size
) {

172 #i‚de‡
UMEM_STANDALONE


173 i‡(
tmp
 =
NULL
 || !
⁄_Æt°ack
)

186 i‡(
	`thr_°k£gmít
(&
°
) == 0) {

187 i‡(
°
.
ss_size
 >(
uöçå_t
)°.
ss_•
 ||

188 
°
.
ss_size
 < 
UMEM_FRAMESIZE
 - 1)

191 
⁄_Æt°ack
 = 0;

192 
ba£
 = (
uöçå_t
)
°
.
ss_•
 - st.
ss_size
;

193 
size
 = 
°
.
ss_size
 - (
UMEM_FRAMESIZE
 - 1);

194 
möÂ
 = (
‰ame
 *)
ba£
;

201 #i‚de‡
UMEM_STANDALONE


202 i‡(
check_sig«l
 && (
Â
->
‰_ßvpc
 - 
sigba£
Ë<
sigsize
)

203 
	`umem_∑nic
("called from signal handler");

205 
pc°ack
[
dïth
++] = 
Â
->
‰_ßvpc
;

206 
Â
 = 
√xtÂ
;

207 
möÂ
 = 
Â
;

209  (
dïth
);

211 
	}
}

	@init_lib.c

36 
	~"c⁄fig.h
"

37 
	~"umem_ba£.h
"

38 
	~"vmem_ba£.h
"

40 #i‡
HAVE_UNISTD_H


41 
	~<uni°d.h
>

43 #i‡
HAVE_DLFCN_H


44 
	~<dlf˙.h
>

47 
	~<f˙é.h
>

48 
	~<°rög.h
>

50 #ifde‡
__FªeBSD__


51 
	~<machöe/∑øm.h
>

55 
	$vmem_hóp_öô
()

57 #ifde‡
_WIN32


58 
vmem_backíd
 = 
VMEM_BACKEND_MMAP
;

61 *
h™dÀ
 = 
	`dl›í
("libm≠mÆloc.so.1", 
RTLD_NOLOAD
);

63 i‡(
h™dÀ
 !
NULL
) {

65 
	`log_mesßge
("sbrk backend disabled\n");

66 
vmem_backíd
 = 
VMEM_BACKEND_MMAP
;

72 i‡((
vmem_backíd
 & 
VMEM_BACKEND_MMAP
) != 0) {

73 
vmem_backíd
 = 
VMEM_BACKEND_MMAP
;

74 (Ë
	`vmem_mm≠_¨ía
(
NULL
, NULL);

76 #i‚de‡
_WIN32


77 
vmem_backíd
 = 
VMEM_BACKEND_SBRK
;

78 (Ë
	`vmem_sbrk_¨ía
(
NULL
, NULL);

81 
	}
}

85 
	$umem_ty≥_öô
(
ˇddr_t
 
°¨t
, 
size_t
 
Àn
, size_à
pgsize
)

87 #ifde‡
_WIN32


88 
SYSTEM_INFO
 
öfo
;

89 
	`GëSy°emInfo
(&
öfo
);

90 
∑gesize
 = 
öfo
.
dwPageSize
;

91 #ñi‡!
	`deföed
(
__FªeBSD__
)

92 
∑gesize
 = 
	`_sysc⁄f
(
_SC_PAGESIZE
);

94 
∑gesize
 = 
PAGE_SIZE
;

96 
	}
}

99 
	$umem_gë_max_n˝us
()

101 #ifde‡
löux


107 
¥oc_°©
[8192];

108 
fd
;

109 
n˝us
 = 1;

111 
fd
 = 
	`›í
("/¥oc/°©", 
O_RDONLY
);

112 i‡(
fd
 >= 0) {

113 c⁄° 
ssize_t
 
n
 = 
	`ªad
(
fd
, 
¥oc_°©
, (proc_stat) - 1);

114 i‡(
n
 >= 0) {

115 c⁄° *
cur
;

116 c⁄° *
√xt
;

118 
¥oc_°©
[
n
] = '\0';

119 
cur
 = 
¥oc_°©
;

120 *
cur
 && (
√xt
 = 
	`°r°r
(cur + 3, "cpu"))) {

121 
cur
 = 
√xt
;

124 i‡(*
cur
)

125 
n˝us
 = 
	`©oi
(
cur
 + 3) + 1;

128 
	`˛o£
(
fd
);

131  
n˝us
;

135 #i‡
_SC_NPROCESSORS_ONLN


136  (2 * 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
));

137 #ñi‡
	`deföed
(
_SC_NPROCESSORS_CONF
)

138  (2 * 
	`sysc⁄f
(
_SC_NPROCESSORS_CONF
));

139 #ñi‡
	`deföed
(
_WIN32
)

140 
SYSTEM_INFO
 
öfo
;

141 
	`GëSy°emInfo
(&
öfo
);

142  
öfo
.
dwNumbîOfPro˚ss‹s
;

149 
	}
}

	@malloc.c

27 #¥agm®
idít
 "@(#)malloc.c 1.5 05/06/08 SMI"

29 
	~"c⁄fig.h
"

30 
	~<uni°d.h
>

32 
	~<î∫o.h
>

34 
	~<°rög.h
>

36 #ifde‡
HAVE_SYS_SYSMACROS_H


37 
	~<sys/sysma¸os.h
>

40 
	~"umem_ba£.h
"

42 
	~"misc.h
"

44 #ifde‡
__GLIBC__


45 
	~<mÆloc.h
>

60 
	smÆloc_d©a
 {

61 
uöt32_t
 
	mmÆloc_size
;

62 
uöt32_t
 
	mmÆloc_°©
;

63 } 
	tmÆloc_d©a_t
;

65 #ifde‡
__GLIBC__


66 *
	$umem_mÆloc_hook
(
size_t
 
size_¨g
, c⁄° *
ˇŒî
)

69 
	$mÆloc
(
size_t
 
size_¨g
)

72 #ifde‡
_LP64


73 
uöt32_t
 
high_size
 = 0;

75 
size_t
 
size
;

77 
mÆloc_d©a_t
 *
ªt
;

78 
size
 = 
size_¨g
 +  (
mÆloc_d©a_t
);

80 #ifde‡
_LP64


81 i‡(
size
 > 
UMEM_SECOND_ALIGN
) {

82 
size
 + (
mÆloc_d©a_t
);

83 
high_size
 = (
size
 >> 32);

86 i‡(
size
 < 
size_¨g
) {

87 
î∫o
 = 
ENOMEM
;

88  (
NULL
);

90 
ªt
 = (
mÆloc_d©a_t
 *)
	`_umem_Æloc
(
size
, 
UMEM_DEFAULT
);

91 i‡(
ªt
 =
NULL
) {

92 i‡(
size
 <
UMEM_MAXBUF
)

93 
î∫o
 = 
EAGAIN
;

95 
î∫o
 = 
ENOMEM
;

96  (
NULL
);

97 #ifde‡
_LP64


98 } i‡(
high_size
 > 0) {

99 
uöt32_t
 
low_size
 = (uöt32_t)
size
;

105 
ªt
->
mÆloc_size
 = 
high_size
;

106 
ªt
->
mÆloc_°©
 = 
	`UMEM_MALLOC_ENCODE
(
MALLOC_MAGIC
, 
high_size
);

107 
ªt
++;

109 
ªt
->
mÆloc_size
 = 
low_size
;

110 
ªt
->
mÆloc_°©
 = 
	`UMEM_MALLOC_ENCODE
(
MALLOC_OVERSIZE_MAGIC
,

111 
low_size
);

112 
ªt
++;

113 } i‡(
size
 > 
UMEM_SECOND_ALIGN
) {

114 
uöt32_t
 
low_size
 = (uöt32_t)
size
;

116 
ªt
++;

118 
ªt
->
mÆloc_size
 = 
low_size
;

119 
ªt
->
mÆloc_°©
 = 
	`UMEM_MALLOC_ENCODE
(
MALLOC_SECOND_MAGIC
,

120 
low_size
);

121 
ªt
++;

124 
ªt
->
mÆloc_size
 = 
size
;

125 
ªt
->
mÆloc_°©
 = 
	`UMEM_MALLOC_ENCODE
(
MALLOC_MAGIC
, 
size
);

126 
ªt
++;

128  ((*)
ªt
);

129 
	}
}

131 #i‚de‡
__GLIBC__


133 
	$ˇŒoc
(
size_t
 
√Àm
, size_à
ñsize
)

135 
size_t
 
size
 = 
√Àm
 * 
ñsize
;

136 *
ªtvÆ
;

138 i‡(
√Àm
 > 0 && 
ñsize
 > 0 && 
size
/nelem !=Élsize) {

139 
î∫o
 = 
ENOMEM
;

140  (
NULL
);

143 
ªtvÆ
 = 
	`mÆloc
(
size
);

144 i‡(
ªtvÆ
 =
NULL
)

145  (
NULL
);

147 (Ë
	`mem£t
(
ªtvÆ
, 0, 
size
);

148  (
ªtvÆ
);

149 
	}
}

159 #ifde‡
__GLIBC__


160 *
	$umem_memÆign_hook
(
size_t
 
size_¨g
, size_à
Æign
, c⁄° *
ˇŒî
)

163 
	$memÆign
(
size_t
 
Æign
, size_à
size_¨g
)

166 
size_t
 
size
;

167 
uöçå_t
 
pha£
;

169 *
buf
;

170 
mÆloc_d©a_t
 *
ªt
;

172 
size_t
 
ovîhód
;

174 i‡(
size_¨g
 =0 || 
Æign
 == 0 || (align & (align - 1)) != 0) {

175 
î∫o
 = 
EINVAL
;

176  (
NULL
);

182 i‡(
Æign
 <
UMEM_ALIGN
 ||

183 (
Æign
 <
UMEM_SECOND_ALIGN
 && 
size_¨g
 >= UMEM_SECOND_ALIGN))

184  (
	`mÆloc
(
size_¨g
));

186 #ifde‡
_LP64


187 
ovîhód
 = 2 *  (
mÆloc_d©a_t
);

189 
ovîhód
 =  (
mÆloc_d©a_t
);

192 
	`ASSERT
(
ovîhód
 <
Æign
);

194 
size
 = 
size_¨g
 + 
ovîhód
;

195 
pha£
 = 
Æign
 - 
ovîhód
;

197 i‡(
umem_memÆign_¨ía
 =
NULL
 && 
	`umem_öô
() == 0) {

198 
î∫o
 = 
ENOMEM
;

199  (
NULL
);

202 i‡(
size
 < 
size_¨g
) {

203 
î∫o
 = 
ENOMEM
;

204  (
NULL
);

207 
buf
 = 
	`vmem_xÆloc
(
umem_memÆign_¨ía
, 
size
, 
Æign
, 
pha£
,

208 0, 
NULL
, NULL, 
VM_NOSLEEP
);

210 i‡(
buf
 =
NULL
) {

211 i‡((
size_¨g
 + 
Æign
Ë<
UMEM_MAXBUF
)

212 
î∫o
 = 
EAGAIN
;

214 
î∫o
 = 
ENOMEM
;

216  (
NULL
);

219 
ªt
 = (
mÆloc_d©a_t
 *)
buf
;

221 
uöt32_t
 
low_size
 = (uöt32_t)
size
;

223 #ifde‡
_LP64


224 
uöt32_t
 
high_size
 = (uöt32_t)(
size
 >> 32);

226 
ªt
->
mÆloc_size
 = 
high_size
;

227 
ªt
->
mÆloc_°©
 = 
	`UMEM_MALLOC_ENCODE
(
MEMALIGN_MAGIC
,

228 
high_size
);

229 
ªt
++;

232 
ªt
->
mÆloc_size
 = 
low_size
;

233 
ªt
->
mÆloc_°©
 = 
	`UMEM_MALLOC_ENCODE
(
MEMALIGN_MAGIC
, 
low_size
);

234 
ªt
++;

237 
	`ASSERT
(
	`P2PHASE
((
uöçå_t
)
ªt
, 
Æign
) == 0);

238 
	`ASSERT
((*)((
uöçå_t
)
ªt
 - 
ovîhód
Ë=
buf
);

240  ((*)
ªt
);

241 
	}
}

243 #i‚de‡
__GLIBC__


245 
	$vÆloc
(
size_t
 
size
)

247  (
	`memÆign
(
∑gesize
, 
size
));

248 
	}
}

264 
	$¥o˚ss_‰ì
(*
buf_¨g
,

265 
do_‰ì
,

266 
size_t
 *
d©a_size_¨g
)

268 
mÆloc_d©a_t
 *
buf
;

270 *
ba£
;

271 
size_t
 
size
;

272 
size_t
 
d©a_size
;

274 c⁄° *
mesßge
;

275 
ﬁd_î∫o
 = 
î∫o
;

277 
buf
 = (
mÆloc_d©a_t
 *)
buf_¨g
;

279 
buf
--;

280 
size
 = 
buf
->
mÆloc_size
;

282 
	`UMEM_MALLOC_DECODE
(
buf
->
mÆloc_°©
, 
size
)) {

284 
MALLOC_MAGIC
:

285 
ba£
 = (*)
buf
;

286 
d©a_size
 = 
size
 -  (
mÆloc_d©a_t
);

288 i‡(
do_‰ì
)

289 
buf
->
mÆloc_°©
 = 
UMEM_FREE_PATTERN_32
;

291 
¥o˚ss_mÆloc
;

293 #ifde‡
_LP64


294 
MALLOC_SECOND_MAGIC
:

295 
ba£
 = (*)(
buf
 - 1);

296 
d©a_size
 = 
size
 - 2 *  (
mÆloc_d©a_t
);

298 i‡(
do_‰ì
)

299 
buf
->
mÆloc_°©
 = 
UMEM_FREE_PATTERN_32
;

301 
¥o˚ss_mÆloc
;

303 
MALLOC_OVERSIZE_MAGIC
: {

304 
size_t
 
high_size
;

306 
buf
--;

307 
high_size
 = 
buf
->
mÆloc_size
;

309 i‡(
	`UMEM_MALLOC_DECODE
(
buf
->
mÆloc_°©
, 
high_size
) !=

310 
MALLOC_MAGIC
) {

311 
mesßge
 = "invalid or corrupted buffer";

315 
size
 +
high_size
 << 32;

317 
ba£
 = (*)
buf
;

318 
d©a_size
 = 
size
 - 2 *  (
mÆloc_d©a_t
);

320 i‡(
do_‰ì
) {

321 
buf
->
mÆloc_°©
 = 
UMEM_FREE_PATTERN_32
;

322 (
buf
 + 1)->
mÆloc_°©
 = 
UMEM_FREE_PATTERN_32
;

325 
¥o˚ss_mÆloc
;

329 
MEMALIGN_MAGIC
: {

330 
size_t
 
ovîhód
 =  (
mÆloc_d©a_t
);

332 #ifde‡
_LP64


333 
size_t
 
high_size
;

335 
ovîhód
 + (
mÆloc_d©a_t
);

337 
buf
--;

338 
high_size
 = 
buf
->
mÆloc_size
;

340 i‡(
	`UMEM_MALLOC_DECODE
(
buf
->
mÆloc_°©
, 
high_size
) !=

341 
MEMALIGN_MAGIC
) {

342 
mesßge
 = "invalid or corrupted buffer";

345 
size
 +
high_size
 << 32;

350 i‡(
do_‰ì
)

351 (
buf
 + 1)->
mÆloc_°©
 = 
UMEM_FREE_PATTERN_32
;

354 
ba£
 = (*)
buf
;

355 
d©a_size
 = 
size
 - 
ovîhód
;

357 i‡(
do_‰ì
)

358 
buf
->
mÆloc_°©
 = 
UMEM_FREE_PATTERN_32
;

360 
¥o˚ss_memÆign
;

363 i‡(
buf
->
mÆloc_°©
 =
UMEM_FREE_PATTERN_32
)

364 
mesßge
 = "double-free or invalid buffer";

366 
mesßge
 = "invalid or corrupted buffer";

370 
	`umem_îr_ªcovîabÀ
("%s(%p): %s\n",

371 
do_‰ì
? "‰ì" : "ªÆloc", 
buf_¨g
, 
mesßge
);

373 
î∫o
 = 
ﬁd_î∫o
;

376 
¥o˚ss_mÆloc
:

377 i‡(
do_‰ì
)

378 
	`_umem_‰ì
(
ba£
, 
size
);

380 *
d©a_size_¨g
 = 
d©a_size
;

382 
î∫o
 = 
ﬁd_î∫o
;

385 
¥o˚ss_memÆign
:

386 i‡(
do_‰ì
)

387 
	`vmem_x‰ì
(
umem_memÆign_¨ía
, 
ba£
, 
size
);

389 *
d©a_size_¨g
 = 
d©a_size
;

391 
î∫o
 = 
ﬁd_î∫o
;

393 
	}
}

395 #ifde‡
__GLIBC__


396 
	$umem_‰ì_hook
(*
buf
, c⁄° *
ˇŒî
)

399 
	$‰ì
(*
buf
)

402 i‡(
buf
 =
NULL
)

408 (Ë
	`¥o˚ss_‰ì
(
buf
, 1, 
NULL
);

409 
	}
}

411 #ifde‡
__GLIBC__


412 *
	$umem_ªÆloc_hook
(*
buf_¨g
, 
size_t
 
√wsize
, c⁄° *
ˇŒî
)

415 
	$ªÆloc
(*
buf_¨g
, 
size_t
 
√wsize
)

418 
size_t
 
ﬁdsize
;

419 *
buf
;

421 i‡(
buf_¨g
 =
NULL
)

422  (
	`mÆloc
(
√wsize
));

427 i‡(
	`¥o˚ss_‰ì
(
buf_¨g
, 0, &
ﬁdsize
) == 0) {

428 
î∫o
 = 
EINVAL
;

429  (
NULL
);

432 i‡(
√wsize
 =
ﬁdsize
)

433  (
buf_¨g
);

435 
buf
 = 
	`mÆloc
(
√wsize
);

436 i‡(
buf
 =
NULL
)

437  (
NULL
);

439 (Ë
	`mem˝y
(
buf
, 
buf_¨g
, 
	`MIN
(
√wsize
, 
ﬁdsize
));

440 
	`‰ì
(
buf_¨g
);

441  (
buf
);

442 
	}
}

444 #ifde‡
__GLIBC__


445 
__©åibuã__
((
c⁄°ru˘‹
)Ë
	$umem_mÆloc_öô_hook
()

447 i‡(
__mÆloc_hook
 !
umem_mÆloc_hook
) {

448 
	`umem_°¨tup
(
NULL
, 0, 0, NULL, NULL);

449 
__mÆloc_hook
 = 
umem_mÆloc_hook
;

450 
__‰ì_hook
 = 
umem_‰ì_hook
;

451 
__ªÆloc_hook
 = 
umem_ªÆloc_hook
;

452 
__memÆign_hook
 = 
umem_memÆign_hook
;

454 
	}
}

456 (*
__mÆloc_öôülize_hook
)(Ë
umem_mÆloc_öô_hook
;

459 
	`__©åibuã__
((
c⁄°ru˘‹
))

460 
	$__mÆloc_umem_öô
 ()

462 
	`umem_°¨tup
(
NULL
, 0, 0, NULL, NULL);

463 
	}
}

	@misc.c

32 
	#_BUILDING_UMEM_MISC_C


	)

33 
	~"c⁄fig.h
"

35 #i‡
HAVE_UNISTD_H


36 
	~<uni°d.h
>

38 #i‡
HAVE_DLFCN_H


39 
	~<dlf˙.h
>

41 
	~<sig«l.h
>

42 
	~<°d¨g.h
>

43 
	~<°dio.h
>

44 
	~<°rög.h
>

46 #i‡
HAVE_SYS_MACHELF_H


47 
	~<sys/machñf.h
>

50 
	~<umem_im∂.h
>

51 
	~"misc.h
"

53 #ifde‡
ECELERITY


54 
	~"utû.h
"

57 
	#UMEM_ERRFD
 2

	)

58 
	#UMEM_MAX_ERROR_SIZE
 4096

	)

66 
	#ERR_SIZE
 8192

	)

68 
muãx_t
 
	gumem_îr‹_lock
 = 
DEFAULTMUTEX
;

70 
	gumem_îr‹_buf„r
[
ERR_SIZE
] = "";

71 
uöt_t
 
	gumem_îr‹_begö
 = 0;

72 
uöt_t
 
	gumem_îr‹_íd
 = 0;

74 
	#WRITE_AND_INC
(
v¨
, 
vÆue
) { \

75 
umem_îr‹_buf„r
[(
v¨
)++] = (
vÆue
); \

76 
v¨
 = 
	`P2PHASE
((v¨), 
ERR_SIZE
); \

77 }

	)

80 
	$umem_log_íãr
(c⁄° *
îr‹_°r
, 
£rious
)

82 
lo›ed
;

83 
c
;

85 
lo›ed
 = 0;

86 #ifde‡
ECELERITY


87 
	`mem_¥ötf
(
£rious
 ? 
DCRITICAL
 : 
DINFO
, "umem: %s", 
îr‹_°r
);

90 (Ë
	`muãx_lock
(&
umem_îr‹_lock
);

92 (
c
 = *
îr‹_°r
++) != '\0') {

93 
	`WRITE_AND_INC
(
umem_îr‹_íd
, 
c
);

94 i‡(
umem_îr‹_íd
 =
umem_îr‹_begö
)

95 
lo›ed
 = 1;

98 
umem_îr‹_buf„r
[
umem_îr‹_íd
] = 0;

100 i‡(
lo›ed
) {

101 
uöt_t
 
idx
;

102 
umem_îr‹_begö
 = 
	`P2PHASE
(
umem_îr‹_íd
 + 1, 
ERR_SIZE
);

104 
idx
 = 
umem_îr‹_begö
;

105 
	`WRITE_AND_INC
(
idx
, '.');

106 
	`WRITE_AND_INC
(
idx
, '.');

107 
	`WRITE_AND_INC
(
idx
, '.');

110 (Ë
	`muãx_u∆ock
(&
umem_îr‹_lock
);

111 
	}
}

114 
	$umem_îr‹_íãr
(c⁄° *
îr‹_°r
)

116 #i‚de‡
UMEM_STANDALONE


117 i‡(
umem_ouçut
 && !
	`is£tugid
())

118 (Ë
	`wrôe
(
UMEM_ERRFD
, 
îr‹_°r
, 
	`°æí
(error_str));

121 
	`umem_log_íãr
(
îr‹_°r
, 1);

122 
	}
}

125 
	$highbô
(
ul⁄g_t
 
i
)

127 
h
 = 1;

129 i‡(
i
 == 0)

131 #ifde‡
_LP64


132 i‡(
i
 & 0xffffffff00000000ul) {

133 
h
 +32; 
i
 >>= 32;

136 i‡(
i
 & 0xffff0000) {

137 
h
 +16; 
i
 >>= 16;

139 i‡(
i
 & 0xff00) {

140 
h
 +8; 
i
 >>= 8;

142 i‡(
i
 & 0xf0) {

143 
h
 +4; 
i
 >>= 4;

145 i‡(
i
 & 0xc) {

146 
h
 +2; 
i
 >>= 2;

148 i‡(
i
 & 0x2) {

149 
h
 += 1;

151  (
h
);

152 
	}
}

155 
	$lowbô
(
ul⁄g_t
 
i
)

157 
h
 = 1;

159 i‡(
i
 == 0)

161 #ifde‡
_LP64


162 i‡(!(
i
 & 0xffffffff)) {

163 
h
 +32; 
i
 >>= 32;

166 i‡(!(
i
 & 0xffff)) {

167 
h
 +16; 
i
 >>= 16;

169 i‡(!(
i
 & 0xff)) {

170 
h
 +8; 
i
 >>= 8;

172 i‡(!(
i
 & 0xf)) {

173 
h
 +4; 
i
 >>= 4;

175 i‡(!(
i
 & 0x3)) {

176 
h
 +2; 
i
 >>= 2;

178 i‡(!(
i
 & 0x1)) {

179 
h
 += 1;

181  (
h
);

182 
	}
}

185 
	$hπ2ts
(
hπime_t
 
hπ
, 
time°ruc_t
 *
t•
)

187 
t•
->
tv_£c
 = 
hπ
 / 
NANOSEC
;

188 
t•
->
tv_n£c
 = 
hπ
 % 
NANOSEC
;

189 
	}
}

192 
	$log_mesßge
(c⁄° *
f‹m©
, ...)

194 
buf
[
UMEM_MAX_ERROR_SIZE
] = "";

196 
va_li°
 
va
;

198 
	`va_°¨t
(
va
, 
f‹m©
);

199 (Ë
	`v¢¥ötf
(
buf
, 
UMEM_MAX_ERROR_SIZE
-1, 
f‹m©
, 
va
);

200 
	`va_íd
(
va
);

202 #i‚de‡
UMEM_STANDALONE


203 i‡(
umem_ouçut
 > 1)

204 (Ë
	`wrôe
(
UMEM_ERRFD
, 
buf
, 
	`°æí
(buf));

207 
	`umem_log_íãr
(
buf
, 0);

208 
	}
}

210 #i‚de‡
UMEM_STANDALONE


212 
	$debug_¥ötf
(c⁄° *
f‹m©
, ...)

214 
buf
[
UMEM_MAX_ERROR_SIZE
] = "";

216 
va_li°
 
va
;

218 
	`va_°¨t
(
va
, 
f‹m©
);

219 (Ë
	`v¢¥ötf
(
buf
, 
UMEM_MAX_ERROR_SIZE
-1, 
f‹m©
, 
va
);

220 
	`va_íd
(
va
);

222 (Ë
	`wrôe
(
UMEM_ERRFD
, 
buf
, 
	`°æí
(buf));

223 
	}
}

227 
	$umem_v¥ötf
(c⁄° *
f‹m©
, 
va_li°
 
va
)

229 
buf
[
UMEM_MAX_ERROR_SIZE
] = "";

231 (Ë
	`v¢¥ötf
(
buf
, 
UMEM_MAX_ERROR_SIZE
-1, 
f‹m©
, 
va
);

233 
	`umem_îr‹_íãr
(
buf
);

234 
	}
}

237 
	$umem_¥ötf
(c⁄° *
f‹m©
, ...)

239 
va_li°
 
va
;

241 
	`va_°¨t
(
va
, 
f‹m©
);

242 
	`umem_v¥ötf
(
f‹m©
, 
va
);

243 
	`va_íd
(
va
);

244 
	}
}

248 
	$umem_¥ötf_w¨n
(*
ign‹ed
, c⁄° *
f‹m©
, ...)

250 
va_li°
 
va
;

252 
	`va_°¨t
(
va
, 
f‹m©
);

253 
	`umem_v¥ötf
(
f‹m©
, 
va
);

254 
	`va_íd
(
va
);

255 
	}
}

261 
	$¥öt_sym
(*
poöãr
)

263 #i‡
HAVE_SYS_MACHELF_H


264 
ªsu…
;

265 
Dl_öfo
 
sym_öfo
;

267 
uöçå_t
 
íd
 = 
NULL
;

269 
Sym
 *
ext_öfo
 = 
NULL
;

271 
ªsu…
 = 
	`dœddr1
(
poöãr
, &
sym_öfo
, (**)&
ext_öfo
,

272 
RTLD_DL_SYMENT
);

274 i‡(
ªsu…
 != 0) {

275 c⁄° *
íd∑th
;

277 
íd
 = (
uöçå_t
)
sym_öfo
.
dli_ßddr
 + 
ext_öfo
->
°_size
;

279 
íd∑th
 = 
	`°ºchr
(
sym_öfo
.
dli_‚ame
, '/');

280 i‡(
íd∑th
)

281 
íd∑th
++;

283 
íd∑th
 = 
sym_öfo
.
dli_‚ame
;

284 
	`umem_¥ötf
("%s'", 
íd∑th
);

287 i‡(
ªsu…
 =0 || (
uöçå_t
)
poöãr
 > 
íd
) {

288 
	`umem_¥ötf
("?? (0x%p)", 
poöãr
);

291 
	`umem_¥ötf
("%s+0x%p", 
sym_öfo
.
dli_¢ame
,

292 (*)
poöãr
 - (*)
sym_öfo
.
dli_ßddr
);

298 
	}
}

	@misc.h

30 #i‚def 
_MISC_H


31 
	#_MISC_H


	)

35 
	~"c⁄fig.h
"

36 
	~<sys/ty≥s.h
>

37 #i‚de‡
_WIN32


38 
	~<sys/time.h
>

40 #ifde‡
HAVE_THREAD_H


41 
	~<thªad.h
>

43 
	~"sﬁ_com∑t.h
"

45 
	~<°d¨g.h
>

47 #ifdef 
__˝lu•lus


51 
uöt_t
 
umem_ab‹t
;

52 
uöt_t
 
umem_ouçut
;

53 
ˇddr_t
 
umem_mö_°ack
;

54 
ˇddr_t
 
umem_max_°ack
;

61 #unde‡
off£tof


62 
	#off£tof
(
s
, 
m
Ë((
size_t
)(&(((†*)0)->m)))

	)

67 
debug_¥ötf
(c⁄° *
f‹m©
, ...);

72 
log_mesßge
(c⁄° *
f‹m©
, ...);

77 
highbô
(
ul⁄g_t
Ë
__©åibuã__
 ((
puª
));

78 
lowbô
(
ul⁄g_t
Ë
__©åibuã__
 ((
puª
));

84 
hπ2ts
(
hπime_t
 
hπ
, 
time°ruc_t
 *
t•
);

89 
¥öt_sym
(*
poöãr
);

95 
umem_¥ötf
(c⁄° *
f‹m©
, ...);

96 
umem_v¥ötf
(c⁄° *
f‹m©
, 
va_li°
);

98 
umem_¥ötf_w¨n
(*
ign‹ed
, c⁄° *
f‹m©
, ...);

100 
umem_îr‹_íãr
(const *);

105 
umem_∑nic
(c⁄° *
f‹m©
, ...Ë
__©åibuã__
((
n‹ëu∫
));

112 
umem_îr_ªcovîabÀ
(c⁄° *
f‹m©
, ...);

117 #ifde‡
NDEBUG


118 
	#ASSERT
(
as£πi⁄
Ë()0

	)

120 
	#ASSERT
(
as£πi⁄
) ()((assertion) || \

121 
	`__umem_as£π_Áûed
(#as£πi⁄, 
__FILE__
, 
__LINE__
))

	)

124 
__umem_as£π_Áûed
(c⁄° *
as£πi⁄
, c⁄° *
fûe
, 
löe
Ë
__©åibuã__
 ((
n‹ëu∫
));

134 *
gëÂ
();

143 
gëpc°ack
(
uöçå_t
 *
pc°ack
, 
pc°ack_limô
,

144 
check_sigh™dÀr
);

146 #ifdef 
__˝lu•lus


	@sol_compat.h

6 #i‚de‡
_EC_UMEM_SOL_COMPAT_H_


7 
	#_EC_UMEM_SOL_COMPAT_H_


	)

9 
	~"c⁄fig.h
"

11 
	~<°döt.h
>

12 
	~<±hªad.h
>

14 #ifde‡
HAVE_SYS_TIME_H


15 
	~<sys/time.h
>

18 #ifde‡
_WIN32


19 
	#THR_RETURN
 
DWORD


	)

20 
	#THR_API
 
WINAPI


	)

21 
	#INLINE
 
__ölöe


	)

23 
	#THR_RETURN
 *

	)

24 
	#THR_API


	)

25 
	#INLINE
 
ölöe


	)

28 #i‡
deföed
(
__MACH__
Ë|| deföed(
_WIN32
)

29 
	#NO_WEAK_SYMBOLS


	)

30 
	#_umem_ˇche_Æloc
(
a
,
b
Ë
	`umem_ˇche_Æloc
◊,b)

	)

31 
	#_umem_ˇche_‰ì
(
a
,
b
Ë
	`umem_ˇche_‰ì
◊,b)

	)

32 
	#_umem_zÆloc
(
a
,
b
Ë
	`umem_zÆloc
◊,b)

	)

33 
	#_umem_Æloc
(
a
,
b
Ë
	`umem_Æloc
◊,b)

	)

34 
	#_umem_Æloc_Æign
(
a
,
b
,
c
Ë
	`umem_Æloc_Æign
◊,b,c)

	)

35 
	#_umem_‰ì
(
a
,
b
Ë
	`umem_‰ì
◊,b)

	)

36 
	#_umem_‰ì_Æign
(
a
,
b
Ë
	`umem_‰ì_Æign
◊,b)

	)

39 #ifde‡
_WIN32


40 
	#bc›y
(
s
, 
d
, 
n
Ë
	`mem˝y
(d, s,Ç)

	)

41 
	#bzîo
(
m
, 
s
Ë
	`mem£t
(m, 0, s)

	)

44 
±hªad_t
 
	tthªad_t
;

45 
±hªad_muãx_t
 
	tmuãx_t
;

46 
±hªad_c⁄d_t
 
	tc⁄d_t
;

47 
u_öt64_t
 
	thπime_t
;

48 
uöt32_t
 
	tuöt_t
;

49 
	tul⁄g_t
;

50 
time•ec
 
	ttime°ruc_t
;

51 
	tl⁄gl⁄g_t
;

52 
time•ec
 
	ttime•ec_t
;

53 
INLINE
 
hπime_t
 
	$gëhπime
() {

54 
timevÆ
 
tv
;

55 
	`gëtimeofday
(&
tv
, 
NULL
);

56  (((
u_öt64_t
)
tv
.
tv_£c
Ë<< 32Ë|Åv.
tv_u£c
;

57 
	}
}

58 
	#thr_£lf
(Ë
	`±hªad_£lf
()

	)

59 
INLINE
 
thªad_t
 
	$_thr_£lf
() {

60  
	`thr_£lf
();

61 
	}
}

62 #i‡
deföed
(
_MACH_PORT_T
)

63 
	#CPUHINT
(Ë(
	`±hªad_mach_thªad_≈
(
	`±hªad_£lf
()))

	)

65 
	#thr_sig£tmask
 
±hªad_sigmask


	)

67 
	#THR_BOUND
 1

	)

68 
	#THR_DETACHED
 2

	)

69 
	#THR_DAEMON
 4

	)

71 
INLINE
 
thr_¸óã
(*
°ack_ba£
,

72 
size_t
 
°ack_size
, 
	$THR_RETURN
 (
THR_API
 *
°¨t_func
)(*),

73 *
¨g
, 
Êags
, 
thªad_t
 *
√w_thªad_ID
)

75 
ªt
;

76 
±hªad_©å_t
 
©å
;

78 
	`±hªad_©å_öô
(&
©å
);

80 i‡(
Êags
 & 
THR_DETACHED
) {

81 
	`±hªad_©å_£tdëach°©e
(&
©å
, 
PTHREAD_CREATE_DETACHED
);

83 
ªt
 = 
	`±hªad_¸óã
(
√w_thªad_ID
, &
©å
, 
°¨t_func
, 
¨g
);

84 
	`±hªad_©å_de°roy
(&
©å
);

85  
ªt
;

86 
	}
}

89 
	#muãx_öô
(
mp
, 
ty≥
, 
¨g
Ë
	`±hªad_muãx_öô
(mp, 
NULL
)

	)

90 
	#muãx_lock
(
mp
Ë
	`±hªad_muãx_lock
(mp)

	)

91 
	#muãx_u∆ock
(
mp
Ë
	`±hªad_muãx_u∆ock
(mp)

	)

92 
	#muãx_de°roy
(
mp
Ë
	`±hªad_muãx_de°roy
(mp)

	)

93 
	#muãx_åylock
(
mp
Ë
	`±hªad_muãx_åylock
(mp)

	)

94 
	#DEFAULTMUTEX
 
PTHREAD_MUTEX_INITIALIZER


	)

95 
	#DEFAULTCV
 
PTHREAD_COND_INITIALIZER


	)

96 
	#MUTEX_HELD
(
mp
Ë1

	)

98 
	#c⁄d_öô
(
c
, 
ty≥
, 
¨g
Ë
	`±hªad_c⁄d_öô
(c, 
NULL
)

	)

99 
	#c⁄d_waô
(
c
, 
m
Ë
	`±hªad_c⁄d_waô
(c, m)

	)

100 
	#_c⁄d_waô
(
c
, 
m
Ë
	`±hªad_c⁄d_waô
(c, m)

	)

101 
	#c⁄d_sig«l
(
c
Ë
	`±hªad_c⁄d_sig«l
(c)

	)

102 
	#c⁄d_brﬂdˇ°
(
c
Ë
	`±hªad_c⁄d_brﬂdˇ°
(c)

	)

103 
	#c⁄d_de°roy
(
c
Ë
	`±hªad_c⁄d_de°roy
(c)

	)

104 
	#c⁄d_timedwaô
 
±hªad_c⁄d_timedwaô


	)

105 
	#_c⁄d_timedwaô
 
±hªad_c⁄d_timedwaô


	)

107 #i‚de‡
RTLD_FIRST


108 
	#RTLD_FIRST
 0

	)

111 #ifde‡
ECELERITY


112 
	~"ec_©omic.h
"

114 #ifde‡
_WIN32


115 
	#ec_©omic_öc
(
a
Ë
	`I¡îlockedIn¸emít
◊)

	)

116 
	#ec_©omic_öc64
(
a
Ë
	`I¡îlockedIn¸emít64
◊)

	)

117 #ñi‡(
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)Ë&& deföed(
__GNUC__
)

118 
INLINE
 
uöt_t
 
	$ec_©omic_ˇs
(
uöt_t
 *
mem
, uöt_à
wôh
, uöt_à
cmp
)

120 
uöt_t
 
¥ev
;

121 
asm
 volatile ("lock; cmpxchgl %1, %2"

122 : "˜" (
¥ev
)

123 : "r" (
wôh
), "m" (*(
mem
)), "0" (
cmp
)

125  
¥ev
;

126 
	}
}

129 #i‚de‡
ec_©omic_öc


130 
INLINE
 
uöt_t
 
	$ec_©omic_öc
(
uöt_t
 *
mem
)

132 
uöt_t
 
œ°
;

134 
œ°
 = *
mem
;

135 } 
	`ec_©omic_ˇs
(
mem
, 
œ°
+1,Üast) !=Üast);

136  ++
œ°
;

137 
	}
}

139 #i‚de‡
ec_©omic_öc64


142 
	#ec_©omic_öc64
(
a
Ë(*a)++

	)

147 
	#P2PHASE
(
x
, 
Æign
Ë((xË& (◊lignË- 1))

	)

148 
	#P2ALIGN
(
x
, 
Æign
Ë((xË& -◊lign))

	)

149 
	#P2NPHASE
(
x
, 
Æign
Ë(-(xË& (◊lignË- 1))

	)

150 
	#P2ROUNDUP
(
x
, 
Æign
Ë(-(-(xË& -◊lign)))

	)

151 
	#P2END
(
x
, 
Æign
Ë(-(~(xË& -◊lign)))

	)

152 
	#P2PHASEUP
(
x
, 
Æign
, 
pha£
Ë(’ha£Ë- ((’ha£Ë- (x)Ë& -◊lign)))

	)

153 
	#P2CROSS
(
x
, 
y
, 
Æign
Ë(((xË^ (y)Ë> (ÆignË- 1)

	)

154 
	#P2SAMEHIGHBIT
(
x
, 
y
Ë(((xË^ (y)Ë< ((xË& (y)))

	)

155 
	#IS_P2ALIGNED
(
v
, 
a
Ë((((
uöçå_t
)(v)Ë& ((uöçå_t)◊Ë- 1)Ë=0)

	)

156 
	#ISP2
(
x
Ë(((xË& ((xË- 1)Ë=0)

	)

159 
	#©omic_add_64
(
lvÆ±r
, 
dñè
Ë
	`ec_©omic_öc64
÷vÆ±r)

	)

160 
	#©omic_add_32_nv
(
a
, 
b
Ë
	`ec_©omic_öc
◊)

	)

162 #i‚de‡
NANOSEC


163 
	#NANOSEC
 1000000000

	)

166 #ifde‡
_WIN32


167 
	#is£tugid
(Ë0

	)

168 #ñi‡!
HAVE_ISSETUGID


169 
	#is£tugid
(Ë(
	`gëeuid
(Ë=0)

	)

172 
	#_sysc⁄f
(
a
Ë
	`sysc⁄f
◊)

	)

173 
	#__NORETURN
 
	`__©åibuã__
 ((
n‹ëu∫
))

	)

175 
	#EC_UMEM_DUMMY_PCSTACK
 1

	)

176 
INLINE
 
	$__¡hªads
()

180 
	}
}

182 #i‡(
SIZEOF_VOID_P
 == 8)

183 
	#_LP64
 1

	)

186 #i‚de‡
MIN


187 
	#MIN
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

189 #i‚de‡
MAX


190 
	#MAX
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

	@sys/vmem.h

27 #i‚de‡
_SYS_VMEM_H


28 
	#_SYS_VMEM_H


	)

32 
	~<sys/ty≥s.h
>

34 #ifdef 
__˝lu•lus


42 
	#VM_SLEEP
 0x00000000

	)

43 
	#VM_NOSLEEP
 0x00000001

	)

44 
	#VM_PANIC
 0x00000002

	)

45 
	#VM_PUSHPAGE
 0x00000004

	)

46 
	#VM_KMFLAGS
 0x000000f‡

	)

48 
	#VM_BESTFIT
 0x00000100

	)

49 
	#VM_FIRSTFIT
 0x00000200

	)

50 
	#VM_NEXTFIT
 0x00000400

	)

57 
	#VM_MEMLOAD
 0x00000800

	)

58 
	#VM_NORELOC
 0x00001000

	)

64 
	#VM_ABORT
 0x00002000

	)

66 
	#VM_FLAGS
 0x0000FFFF

	)

71 
	#VMC_POPULATOR
 0x00010000

	)

72 
	#VMC_NO_QCACHE
 0x00020000

	)

73 
	#VMC_IDENTIFIER
 0x00040000

	)

78 
	#VMC_XALLOC
 0x00080000

	)

79 
	#VMC_FLAGS
 0xFFFF0000

	)

84 
	#VMEM_ALLOC
 0x01

	)

85 
	#VMEM_FREE
 0x02

	)

90 
	#VMEM_SPAN
 0x10

	)

91 
	#VMEM_ROTOR
 0x20

	)

92 
	#VMEM_WALKER
 0x40

	)

103 
	#VMEM_REENTRANT
 0x80000000

	)

105 
vmem
 
	tvmem_t
;

106 *(
	tvmem_Æloc_t
)(
	tvmem_t
 *, 
	tsize_t
, );

107 (
vmem_‰ì_t
)(
	tvmem_t
 *, *, 
	tsize_t
);

113 *(
	tvmem_ximp‹t_t
)(
	tvmem_t
 *, 
	tsize_t
 *, );

115 #ifde‡
_KERNEL


116 
vmem_t
 *
vmem_öô
(c⁄° *, *, 
size_t
, size_t,

117 
vmem_Æloc_t
 *, 
vmem_‰ì_t
 *);

118 
vmem_upd©e
(*);

119 
vmem_is_p›uœt‹
();

120 
size_t
 
vmem_£g_size
;

123 
vmem_t
 *
vmem_¸óã
(c⁄° *, *, 
size_t
, size_t,

124 
vmem_Æloc_t
 *, 
vmem_‰ì_t
 *, 
vmem_t
 *, 
size_t
, );

125 
vmem_t
 *
vmem_x¸óã
(c⁄° *, *, 
size_t
, size_t,

126 
vmem_ximp‹t_t
 *, 
vmem_‰ì_t
 *, 
vmem_t
 *, 
size_t
, );

127 
vmem_de°roy
(
vmem_t
 *);

128 *
vmem_Æloc
(
vmem_t
 *, 
size_t
, );

129 *
vmem_xÆloc
(
vmem_t
 *, 
size_t
, size_t, size_t, size_t,

131 
vmem_‰ì
(
vmem_t
 *, *, 
size_t
);

132 
vmem_x‰ì
(
vmem_t
 *, *, 
size_t
);

133 *
vmem_add
(
vmem_t
 *, *, 
size_t
, );

134 
vmem_c⁄èös
(
vmem_t
 *, *, 
size_t
);

135 
vmem_wÆk
(
vmem_t
 *, , (*)(*, *, 
size_t
), *);

136 
size_t
 
vmem_size
(
vmem_t
 *, );

138 #ifdef 
__˝lu•lus


	@sys/vmem_impl_user.h

30 #i‚de‡
_SYS_VMEM_IMPL_USER_H


31 
	#_SYS_VMEM_IMPL_USER_H


	)

35 #i‡
HAVE_SYS_KSTAT


36 
	~<sys/k°©.h
>

38 #i‚de‡
_WIN32


39 
	~<sys/time.h
>

41 
	~<sys/vmem.h
>

42 #i‡
HAVE_THREAD_H


43 
	~<thªad.h
>

45 
	~"sﬁ_com∑t.h
"

47 #i‡
HAVE_SYNC_H


48 
	~<synch.h
>

51 #ifdef 
__˝lu•lus


55 
vmem_£g
 
	tvmem_£g_t
;

57 
	#VMEM_STACK_DEPTH
 20

	)

59 
	svmem_£g
 {

63 
uöçå_t
 
vs_°¨t
;

64 
uöçå_t
 
vs_íd
;

65 
vmem_£g_t
 *
vs_k√xt
;

66 
vmem_£g_t
 *
vs_k¥ev
;

68 
vmem_£g_t
 *
vs_™ext
;

69 
vmem_£g_t
 *
vs_≠ªv
;

70 
uöt8_t
 
vs_ty≥
;

71 
uöt8_t
 
vs_imp‹t
;

72 
uöt8_t
 
vs_dïth
;

76 
thªad_t
 
vs_thªad
;

77 
hπime_t
 
vs_time°amp
;

78 
uöçå_t
 
vs_°ack
[
VMEM_STACK_DEPTH
];

81 
	svmem_‰ìli°
 {

82 
uöçå_t
 
vs_°¨t
;

83 
uöçå_t
 
vs_íd
;

84 
vmem_£g_t
 *
vs_k√xt
;

85 
vmem_£g_t
 *
vs_k¥ev
;

86 } 
	tvmem_‰ìli°_t
;

88 
	#VS_SIZE
(
v•
Ë((v•)->
vs_íd
 - (v•)->
vs_°¨t
)

	)

93 
	#VMEM_HASH_INDEX
(
a
, 
s
, 
q
, 
m
) \

94 ((((
a
Ë+ (◊Ë>> (
s
)Ë+ (◊Ë>> ((sË<< 1))Ë>> (
q
)Ë& (
m
))

	)

96 
	#VMEM_HASH
(
vmp
, 
addr
) \

97 (&(
vmp
)->
vm_hash_èbÀ
[
	`VMEM_HASH_INDEX
(
addr
, \

98 (
vmp
)->
vm_hash_shi·
, (vmp)->
vm_qshi·
, (vmp)->
vm_hash_mask
)])

	)

100 
	#VMEM_NAMELEN
 30

	)

101 
	#VMEM_HASH_INITIAL
 16

	)

102 
	#VMEM_NQCACHE_MAX
 16

	)

103 
	#VMEM_FREELISTS
 ( (*Ë* 8)

	)

105 
	svmem_k°©
 {

106 
uöt64_t
 
vk_mem_öu£
;

107 
uöt64_t
 
vk_mem_imp‹t
;

108 
uöt64_t
 
vk_mem_tŸÆ
;

109 
uöt32_t
 
vk_sour˚_id
;

110 
uöt64_t
 
vk_Æloc
;

111 
uöt64_t
 
vk_‰ì
;

112 
uöt64_t
 
vk_waô
;

113 
uöt64_t
 
vk_Áû
;

114 
uöt64_t
 
vk_lookup
;

115 
uöt64_t
 
vk_£¨ch
;

116 
uöt64_t
 
vk_p›uœã_waô
;

117 
uöt64_t
 
vk_p›uœã_Áû
;

118 
uöt64_t
 
vk_c⁄èös
;

119 
uöt64_t
 
vk_c⁄èös_£¨ch
;

120 } 
	tvmem_k°©_t
;

122 
	svmem
 {

123 
vm_«me
[
VMEM_NAMELEN
];

124 
c⁄d_t
 
vm_cv
;

125 
muãx_t
 
vm_lock
;

126 
uöt32_t
 
vm_id
;

127 
uöt32_t
 
vm_mtbf
;

128 
vm_cÊags
;

129 
vm_qshi·
;

130 
size_t
 
vm_qu™tum
;

131 
size_t
 
vm_qˇche_max
;

132 
vmem_Æloc_t
 *
vm_sour˚_Æloc
;

133 
vmem_‰ì_t
 *
vm_sour˚_‰ì
;

134 
vmem_t
 *
vm_sour˚
;

135 
vmem_t
 *
vm_√xt
;

136 
ssize_t
 
vm_n£g‰ì
;

137 
vmem_£g_t
 *
vm_£g‰ì
;

138 
vmem_£g_t
 **
vm_hash_èbÀ
;

139 
size_t
 
vm_hash_mask
;

140 
size_t
 
vm_hash_shi·
;

141 
ul⁄g_t
 
vm_‰ìm≠
;

142 
vmem_£g_t
 
vm_£g0
;

143 
vmem_£g_t
 
vm_rŸ‹
;

144 
vmem_£g_t
 *
vm_hash0
[
VMEM_HASH_INITIAL
];

145 *
vm_qˇche
[
VMEM_NQCACHE_MAX
];

146 
vmem_‰ìli°_t
 
vm_‰ìli°
[
VMEM_FREELISTS
 + 1];

147 
vmem_k°©_t
 
vm_k°©
;

154 
	svmem_p›uœã_lock
 {

155 
muãx_t
 
vm∂_muãx
;

156 
thªad_t
 
vm∂_thr
;

157 } 
	tvmem_p›uœã_lock_t
;

159 
	#VM_UMFLAGS
 
VM_KMFLAGS


	)

161 #ifdef 
__˝lu•lus


	@tools/leaky_subr.c

26 #¥agm®
idít
 "%Z%%M% %I% %E% SMI"

28 
	~"umem.h
"

30 
	~<sys/vmem_im∂_u£r.h
>

31 
	~<umem_im∂.h
>

33 
	~<Æloˇ.h
>

34 
	~<lib¥oc.h
>

35 
	~<°dio.h
>

36 
	~<°rög.h
>

37 
	~<sys/°ack.h
>

39 
	~"Àaky_im∂.h
"

40 
	~"misc.h
"

41 
	~"¥oc_kludges.h
"

43 
	~"umem_∑gesize.h
"

55 
	#TYPE_MMAP
 0

	)

56 
	#TYPE_SBRK
 1

	)

57 
	#TYPE_VMEM
 2

	)

58 
	#TYPE_CACHE
 3

	)

59 
	#TYPE_UMEM
 4

	)

61 
	#LKM_CTL_BUFCTL
 0

	)

62 
	#LKM_CTL_VMSEG
 1

	)

63 
	#LKM_CTL_MEMORY
 2

	)

64 
	#LKM_CTL_CACHE
 3

	)

65 
	#LKM_CTL_MASK
 3L

	)

70 
	#LKM_CTL
(
±r
, 
ty≥
Ë(
	`LKM_CTLPTR
’åË| (ty≥))

	)

71 
	#LKM_CTLPTR
(
˘l
Ë((
uöçå_t
)(˘lË& ~(
LKM_CTL_MASK
))

	)

72 
	#LKM_CTLTYPE
(
˘l
Ë((
uöçå_t
)(˘lË& (
LKM_CTL_MASK
))

	)

74 
uöçå_t
 
	gÀak_brkba£
;

75 
uöçå_t
 
	gÀak_brksize
;

77 
	#LEAKY_INBRK
(
±r
) \

78 (((
uöçå_t
)(
±r
Ë- 
Àak_brkba£
Ë< 
Àak_brksize
)

	)

80 
	sÀaky_£g_öfo
 {

81 
uöçå_t
 
	mls_°¨t
;

82 
uöçå_t
 
	mls_íd
;

83 } 
	tÀaky_£g_öfo_t
;

85 
	sÀaky_m≠s
 {

86 
Àaky_£g_öfo_t
 *
	mlm_£gs
;

87 
uöçå_t
 
	mlm_£g_cou¡
;

88 
uöçå_t
 
	mlm_£g_max
;

90 
p°©us_t
 *
	mlm_p°©us
;

92 
Àak_mèb_t
 **
	mlm_lmp
;

93 } 
	tÀaky_m≠s_t
;

97 
	$Àaky_mèb
(
uöçå_t
 
addr
, c⁄° 
umem_buf˘l_audô_t
 *
b˝
, 
Àak_mèb_t
 **
lmp
)

99 
Àak_mèb_t
 *
lm
 = (*
lmp
)++;

101 
lm
->
lkm_ba£
 = (
uöçå_t
)
b˝
->
bc_addr
;

102 
lm
->
lkm_buf˘l
 = 
	`LKM_CTL
(
addr
, 
LKM_CTL_BUFCTL
);

104  (
WALK_NEXT
);

105 
	}
}

109 
	$Àaky_mèb_addr
(
uöçå_t
 
addr
, *
ign‹ed
, 
Àak_mèb_t
 **
lmp
)

111 
Àak_mèb_t
 *
lm
 = (*
lmp
)++;

113 
lm
->
lkm_ba£
 = 
addr
;

115  (
WALK_NEXT
);

116 
	}
}

119 
	$Àaky_£g
(
uöçå_t
 
addr
, c⁄° 
vmem_£g_t
 *
£g
, 
Àak_mèb_t
 **
lmp
)

121 
Àak_mèb_t
 *
lm
 = (*
lmp
)++;

123 
lm
->
lkm_ba£
 = 
£g
->
vs_°¨t
;

124 
lm
->
lkm_limô
 = 
£g
->
vs_íd
;

125 
lm
->
lkm_buf˘l
 = 
	`LKM_CTL
(
addr
, 
LKM_CTL_VMSEG
);

126  (
WALK_NEXT
);

127 
	}
}

130 
	$Àaky_vmem
(
uöçå_t
 
addr
, c⁄° 
vmem_t
 *
vmem
, 
Àak_mèb_t
 **
lmp
)

132 i‡(
	`°rcmp
(
vmem
->
vm_«me
, "umem_oversize") != 0 &&

133 
	`°rcmp
(
vmem
->
vm_«me
, "umem_memalign") != 0)

134  (
WALK_NEXT
);

136 i‡(
	`mdb_pwÆk
("vmem_Æloc", (
mdb_wÆk_cb_t
)
Àaky_£g
, 
lmp
, 
addr
) == -1)

137 
	`mdb_w¨n
("ˇn'àwÆk vmem_Ælo¯f‹ %†(%p)", 
vmem
->
vm_«me
,

138 
addr
);

140  (
WALK_NEXT
);

141 
	}
}

145 
	$Àaky_e°im©e_vmem
(
uöçå_t
 
addr
, c⁄° 
vmem_t
 *
vmem
, 
size_t
 *
e°
)

147 i‡(
	`°rcmp
(
vmem
->
vm_«me
, "umem_oversize") != 0 &&

148 
	`°rcmp
(
vmem
->
vm_«me
, "umem_memalign") != 0)

149  (
WALK_NEXT
);

151 *
e°
 +()(
vmem
->
vm_k°©
.
vk_Æloc
 - vmem->vm_k°©.
vk_‰ì
);

153  (
WALK_NEXT
);

154 
	}
}

157 
	$Àaky_£g_cmp
(c⁄° *
l
, c⁄° *
r
)

159 c⁄° 
Àaky_£g_öfo_t
 *
lhs
 = (c⁄°Üóky_£g_öfo_à*)
l
;

160 c⁄° 
Àaky_£g_öfo_t
 *
rhs
 = (c⁄°Üóky_£g_öfo_à*)
r
;

162 i‡(
lhs
->
ls_°¨t
 < 
rhs
->ls_start)

164 i‡(
lhs
->
ls_°¨t
 > 
rhs
->ls_start)

168 
	}
}

170 
ssize_t


171 
	$Àaky_£g_£¨ch
(
uöçå_t
 
addr
, 
Àaky_£g_öfo_t
 *
li°p
, 
cou¡
)

173 
ssize_t
 
À·
 = 0, 
right
 = 
cou¡
 - 1, 
guess
;

175 
right
 >
À·
) {

176 
guess
 = (
right
 + 
À·
) >> 1;

178 i‡(
addr
 < 
li°p
[
guess
].
ls_°¨t
) {

179 
right
 = 
guess
 - 1;

183 i‡(
addr
 >
li°p
[
guess
].
ls_íd
) {

184 
À·
 = 
guess
 + 1;

188  (
guess
);

192 
	}
}

196 
	$Àaky_cou¡
(
uöçå_t
 
addr
, *
unu£d
, 
size_t
 *
tŸÆ
)

198 ++*
tŸÆ
;

200  (
WALK_NEXT
);

201 
	}
}

205 
	$Àaky_ªad_£gs
(
uöçå_t
 
addr
, c⁄° 
vmem_£g_t
 *
£g
, 
Àaky_m≠s_t
 *
lmp
)

207 
Àaky_£g_öfo_t
 *
my_si
 = 
lmp
->
lm_£gs
 +Ümp->
lm_£g_cou¡
;

209 i‡(
£g
->
vs_°¨t
 =£g->
vs_íd
 && seg->vs_start == 0)

210  (
WALK_NEXT
);

212 i‡(
lmp
->
lm_£g_cou¡
++ >lmp->
lm_£g_max
)

213  (
WALK_ERR
);

215 
my_si
->
ls_°¨t
 = 
£g
->
vs_°¨t
;

216 
my_si
->
ls_íd
 = 
£g
->
vs_íd
;

218  (
WALK_NEXT
);

219 
	}
}

223 
	$Àaky_¥o˚ss_™⁄_m≠pögs
(
uöçå_t
 
ign‹ed
, c⁄° 
¥m≠_t
 *
pmp
,

224 
Àaky_m≠s_t
 *
lmp
)

226 
uöçå_t
 
°¨t
 = 
pmp
->
¥_vaddr
;

227 
uöçå_t
 
íd
 = 
pmp
->
¥_vaddr
 +Ömp->
¥_size
;

229 
Àak_mèb_t
 *
lm
;

230 
p°©us_t
 *
P•
 = 
lmp
->
lm_p°©us
;

232 
uöçå_t
 
brk_°¨t
 = 
P•
->
¥_brkba£
;

233 
uöçå_t
 
brk_íd
 = 
P•
->
¥_brkba£
 + P•->
¥_brksize
;

235 
has_brk
 = 0;

236 
ö_vmem
 = 0;

241 i‡(
íd
 > 
brk_°¨t
 && 
°¨t
 < 
brk_íd
)

242 
has_brk
 = 1;

244 i‡(
	`Àaky_£g_£¨ch
(
°¨t
, 
lmp
->
lm_£gs
,Ümp->
lm_£g_cou¡
) != -1)

245 
ö_vmem
 = 1;

256 i‡((
pmp
->
¥_mÊags
 & (
MA_READ
 | 
MA_WRITE
)) == (MA_READ | MA_WRITE) &&

257 (
pmp
->
¥_mÊags
 & 
MA_SHARED
) == 0 &&

258 (
pmp
->
¥_m≠«me
[0] == 0) &&

259 !
has_brk
 &&

260 !
ö_vmem
) {

261 
	`d¥ötf
(("mm≠edÑegi⁄: [%p, %p)\n", 
°¨t
, 
íd
));

262 
lm
 = (*
lmp
->
lm_lmp
)++;

263 
lm
->
lkm_ba£
 = 
°¨t
;

264 
lm
->
lkm_limô
 = 
íd
;

265 
lm
->
lkm_buf˘l
 = 
	`LKM_CTL
(
pmp
->
¥_vaddr
, 
LKM_CTL_MEMORY
);

268  (
WALK_NEXT
);

269 
	}
}

272 
	$Àaky_h™dÀ_sbrk
(
Àaky_m≠s_t
 *
lmp
)

274 
uöçå_t
 
brkba£
 = 
lmp
->
lm_p°©us
->
¥_brkba£
;

275 
uöçå_t
 
brkíd
 = 
brkba£
 + 
lmp
->
lm_p°©us
->
¥_brksize
;

277 
Àak_mèb_t
 *
lm
;

279 
Àaky_£g_öfo_t
 *
£gs
 = 
lmp
->
lm_£gs
;

281 
x
, 
fú°
 = -1, 
œ°
 = -1;

283 
	`d¥ötf
(("brk: [%p, %p)\n", 
brkba£
, 
brkíd
));

285 
x
 = 0; x < 
lmp
->
lm_£g_cou¡
; x++) {

286 i‡(
£gs
[
x
].
ls_°¨t
 >
brkba£
 && segs[x].
ls_íd
 <
brkíd
) {

287 i‡(
fú°
 == -1)

288 
fú°
 = 
x
;

289 
œ°
 = 
x
;

293 i‡(
brkba£
 =
brkíd
) {

294 
	`d¥ötf
(("empty brk -- doÇothing\n"));

295 } i‡(
fú°
 == -1) {

296 
	`d¥ötf
(("addög [%p, %pËwhﬁêbrk\n", 
brkba£
, 
brkíd
));

298 
lm
 = (*
lmp
->
lm_lmp
)++;

299 
lm
->
lkm_ba£
 = 
brkba£
;

300 
lm
->
lkm_limô
 = 
brkíd
;

301 
lm
->
lkm_buf˘l
 = 
	`LKM_CTL
(
brkba£
, 
LKM_CTL_MEMORY
);

303 
uöçå_t
 
curbrk
 = 
	`P2ROUNDUP
(
brkba£
, 
umem_∑gesize
);

305 i‡(
curbrk
 !
£gs
[
fú°
].
ls_°¨t
) {

306 
	`d¥ötf
(("adding [%p, %p) in brk, before first seg\n",

307 
brkba£
, 
£gs
[
fú°
].
ls_°¨t
));

309 
lm
 = (*
lmp
->
lm_lmp
)++;

310 
lm
->
lkm_ba£
 = 
brkba£
;

311 
lm
->
lkm_limô
 = 
£gs
[
fú°
].
ls_°¨t
;

312 
lm
->
lkm_buf˘l
 = 
	`LKM_CTL
(
brkba£
, 
LKM_CTL_MEMORY
);

314 
curbrk
 = 
£gs
[
fú°
].
ls_°¨t
;

316 } i‡(
curbrk
 !
brkba£
) {

317 
	`d¥ötf
(("ign‹ê[%p, %pË--Ñólign\n", 
brkba£
,

318 
curbrk
));

321 
x
 = 
fú°
; x <
œ°
; x++) {

322 i‡(
curbrk
 < 
£gs
[
x
].
ls_°¨t
) {

323 
	`d¥ötf
(("addög [%p, %pËö brk\n", 
curbrk
,

324 
£gs
[
x
].
ls_°¨t
));

326 
lm
 = (*
lmp
->
lm_lmp
)++;

327 
lm
->
lkm_ba£
 = 
curbrk
;

328 
lm
->
lkm_limô
 = 
£gs
[
x
].
ls_°¨t
;

329 
lm
->
lkm_buf˘l
 = 
	`LKM_CTL
(
curbrk
,

330 
LKM_CTL_MEMORY
);

332 
curbrk
 = 
£gs
[
x
].
ls_íd
;

335 i‡(
curbrk
 < 
brkíd
) {

336 
	`d¥ötf
(("adding [%p, %p) in brk,áfterÜast seg\n",

337 
curbrk
, 
brkíd
));

339 
lm
 = (*
lmp
->
lm_lmp
)++;

340 
lm
->
lkm_ba£
 = 
curbrk
;

341 
lm
->
lkm_limô
 = 
brkíd
;

342 
lm
->
lkm_buf˘l
 = 
	`LKM_CTL
(
curbrk
, 
LKM_CTL_MEMORY
);

345 
	}
}

348 
	$Àaky_h™dÀ_™⁄_m≠pögs
(
Àak_mèb_t
 **
lmp
)

350 
Àaky_m≠s_t
 
lm
;

352 
vmem_t
 *
hóp_¨ía
;

353 
vmem_t
 *
vm_√xt
;

354 
vmem_t
 *
hóp_t›
;

355 
vmem_t
 
vmem
;

357 
p°©us_t
 
Ps
;

359 i‡(
	`mdb_gë_xd©a
("p°©us", &
Ps
,  (Ps)) == -1) {

360 
	`mdb_w¨n
("couldn'tÑeadÖstatus xdata");

361  (
DCMD_ERR
);

363 
lm
.
lm_p°©us
 = &
Ps
;

365 
Àak_brkba£
 = 
Ps
.
¥_brkba£
;

366 
Àak_brksize
 = 
Ps
.
¥_brksize
;

368 i‡(
	`umem_ªadv¨
(&
hóp_¨ía
, "heap_arena") == -1) {

369 
	`mdb_w¨n
("couldn'tÑead heap_arena");

370  (
DCMD_ERR
);

373 i‡(
hóp_¨ía
 =
NULL
) {

374 
	`mdb_w¨n
("heap_arena is NULL.\n");

375  (
DCMD_ERR
);

378 
vm_√xt
 = 
hóp_¨ía
; vm_√xà!
NULL
; vm_√xà
vmem
.
vm_sour˚
) {

379 i‡(
	`mdb_vªad
(&
vmem
,  (vmem), (
uöçå_t
)
vm_√xt
) == -1) {

380 
	`mdb_w¨n
("couldn'àªad vmemáà%p", 
vm_√xt
);

381  (
DCMD_ERR
);

383 
hóp_t›
 = 
vm_√xt
;

386 
lm
.
lm_£g_cou¡
 = 0;

387 
lm
.
lm_£g_max
 = 0;

389 i‡(
	`mdb_pwÆk
("vmem_•™", (
mdb_wÆk_cb_t
)
Àaky_cou¡
,

390 &
lm
.
lm_£g_max
, (
uöçå_t
)
hóp_t›
) == -1) {

391 
	`mdb_w¨n
("couldn'àwÆk vmem_•™ f‹ vmem %p", 
hóp_t›
);

392  (
DCMD_ERR
);

394 
lm
.
lm_£gs
 = 
	`mdb_Æloc
÷m.
lm_£g_max
 *  (*lm.lm_segs),

395 
UM_SLEEP
 | 
UM_GC
);

397 i‡(
	`mdb_pwÆk
("vmem_•™", (
mdb_wÆk_cb_t
)
Àaky_ªad_£gs
, &
lm
,

398 (
uöçå_t
)
hóp_t›
) == -1) {

399 
	`mdb_w¨n
("couldn't walk vmem_span for vmem %p",

400 
hóp_t›
);

401  (
DCMD_ERR
);

404 i‡(
lm
.
lm_£g_cou¡
 >Üm.
lm_£g_max
) {

405 
	`mdb_w¨n
("£gmíàli° f‹ vmem %∞gªw\n", 
hóp_t›
);

406  (
DCMD_ERR
);

409 
	`qs‹t
(
lm
.
lm_£gs
,Üm.
lm_£g_cou¡
,  (*lm.lm_£gs), 
Àaky_£g_cmp
);

411 
lm
.
lm_lmp
 = 
lmp
;

413 
	`¥ockludge_add_wÆkîs
();

415 i‡(
	`mdb_wÆk
(
KLUDGE_MAPWALK_NAME
,

416 (
mdb_wÆk_cb_t
)
Àaky_¥o˚ss_™⁄_m≠pögs
, &
lm
) == -1) {

417 
	`mdb_w¨n
("Couldn'àwÆk "
KLUDGE_MAPWALK_NAME
);

418 
	`¥ockludge_ªmove_wÆkîs
();

419  (
DCMD_ERR
);

422 
	`¥ockludge_ªmove_wÆkîs
();

423 
	`Àaky_h™dÀ_sbrk
(&
lm
);

425  (
DCMD_OK
);

426 
	}
}

429 
	$Àaky_öãª°ed
(c⁄° 
umem_ˇche_t
 *
c
)

431 
vmem_t
 
vmem
;

433 i‡(
	`mdb_vªad
(&
vmem
,  (vmem), (
uöçå_t
)
c
->
ˇche_¨ía
) == -1) {

434 
	`mdb_w¨n
("cannotÑeadárena %p for cache '%s'",

435 (
uöçå_t
)
c
->
ˇche_¨ía
, c->
ˇche_«me
);

443 i‡(
	`°rcmp
(
vmem
.
vm_«me
, "umem_default") != 0 &&

444 
	`°rcmp
(
vmem
.
vm_«me
, "umem_firewall") != 0) {

445 
	`d¥ötf
(("Skipping cache '%s' withárena '%s'\n",

446 
c
->
ˇche_«me
, 
vmem
.
vm_«me
));

451 
	}
}

455 
	$Àaky_e°im©e
(
uöçå_t
 
addr
, c⁄° 
umem_ˇche_t
 *
c
, 
size_t
 *
e°
)

457 i‡(!
	`Àaky_öãª°ed
(
c
))

458  (
WALK_NEXT
);

460 *
e°
 +
	`umem_e°im©e_Æloˇãd
(
addr
, 
c
);

462  (
WALK_NEXT
);

463 
	}
}

467 
	$Àaky_ˇche
(
uöçå_t
 
addr
, c⁄° 
umem_ˇche_t
 *
c
, 
Àak_mèb_t
 **
lmp
)

469 
Àak_mèb_t
 *
lm
 = *
lmp
;

470 
mdb_wÆk_cb_t
 
cb
;

471 c⁄° *
wÆk
;

472 
audô
 = (
c
->
ˇche_Êags
 & 
UMF_AUDIT
);

474 i‡(!
	`Àaky_öãª°ed
(
c
))

475  (
WALK_NEXT
);

477 i‡(
audô
) {

478 
wÆk
 = "bufctl";

479 
cb
 = (
mdb_wÆk_cb_t
)
Àaky_mèb
;

481 
wÆk
 = "umem";

482 
cb
 = (
mdb_wÆk_cb_t
)
Àaky_mèb_addr
;

484 i‡(
	`mdb_pwÆk
(
wÆk
, 
cb
, 
lmp
, 
addr
) == -1) {

485 
	`mdb_w¨n
("ˇn'àwÆk umem f‹ cachê%∞(%s)", 
addr
,

486 
c
->
ˇche_«me
);

487  (
WALK_DONE
);

490 ; 
lm
 < *
lmp
;Üm++) {

491 
lm
->
lkm_limô
 =Üm->
lkm_ba£
 + 
c
->
ˇche_bufsize
;

492 i‡(!
audô
)

493 
lm
->
lkm_buf˘l
 = 
	`LKM_CTL
(
addr
, 
LKM_CTL_CACHE
);

495  (
WALK_NEXT
);

496 
	}
}

498 *
	gm≠_hód
 = "%-?s %?s %-10s usedÑeason\n";

499 *
	gm≠_fmt
 = "[%?p,%?p) %-10s ";

500 
	#BACKING_LEN
 10

	)

503 
	$Àaky_m≠pögs_hódî
()

505 
	`d¥ötf
((
m≠_hód
, "mapping", "", "backing"));

506 
	}
}

510 
	$Àaky_gªp_m≠pögs
(
uöçå_t
 
ign‹ed
, c⁄° 
¥m≠_t
 *
pmp
,

511 c⁄° 
p°©us_t
 *
P•
)

513 c⁄° *
m≠_lib«me_±r
;

514 
db_mp_«me
[
BACKING_LEN
+1];

516 
m≠_lib«me_±r
 = 
	`°ºchr
(
pmp
->
¥_m≠«me
, '/');

517 i‡(
m≠_lib«me_±r
 !
NULL
)

518 
m≠_lib«me_±r
++;

520 
m≠_lib«me_±r
 = 
pmp
->
¥_m≠«me
;

522 
	`°æ˝y
(
db_mp_«me
, 
m≠_lib«me_±r
,  (db_mp_name));

524 
	`d¥ötf
((
m≠_fmt
, 
pmp
->
¥_vaddr
, (*Ìmp->¥_vadd∏+Ömp->
¥_size
,

525 
db_mp_«me
));

527 
	#USE
(
r¢
Ë
	`d¥ötf_c⁄t
(("ye† %s\n", (r¢)))

	)

528 
	#IGNORE
(
r¢
Ë
	`d¥ötf_c⁄t
(("nÿ %s\n", (r¢)))

	)

530 i‡(!(
pmp
->
¥_mÊags
 & 
MA_WRITE
Ë|| !’mp->¥_mÊag†& 
MA_READ
)) {

531 
	`IGNORE
("read-only");

532 } i‡(
pmp
->
¥_vaddr
 <
P•
->
¥_brkba£
 &&

533 
pmp
->
¥_vaddr
 +Ömp->
¥_size
 > 
P•
->
¥_brkba£
) {

534 
	`USE
("bss");

535 
	`Àaky_gªp
(
pmp
->
¥_vaddr
, 
P•
->
¥_brkba£
 -Ömp->pr_vaddr);

536 } i‡(
pmp
->
¥_vaddr
 >
P•
->
¥_brkba£
 &&

537 
pmp
->
¥_vaddr
 < 
P•
->
¥_brkba£
 + P•->
¥_brksize
) {

538 
	`IGNORE
("in brk");

539 } i‡(
pmp
->
¥_vaddr
 =
P•
->
¥_°kba£
 &&

540 
pmp
->
¥_size
 =
P•
->
¥_°ksize
) {

541 
	`IGNORE
("stack");

542 } i‡(0 =
	`°rcmp
(
m≠_lib«me_±r
, "a.out")) {

543 
	`USE
("a.out data");

544 
	`Àaky_gªp
(
pmp
->
¥_vaddr
,Ömp->
¥_size
);

545 } i‡(0 =
	`°∫cmp
(
m≠_lib«me_±r
, "libumem.so", 10)) {

546 
	`IGNORE
("part of umem");

547 } i‡(
pmp
->
¥_m≠«me
[0] != 0) {

548 
	`USE
("lib data");

549 
	`Àaky_gªp
(
pmp
->
¥_vaddr
,Ömp->
¥_size
);

550 } i‡((
pmp
->
¥_mÊags
 & 
MA_ANON
Ë&&Ömp->
¥_m≠«me
[0] == 0) {

551 
	`IGNORE
("anon");

553 
	`IGNORE
("");

556 #unde‡
USE


557 #unde‡
IGNORE


559  (
WALK_NEXT
);

560 
	}
}

564 
	$Àaky_m¨k_lwp
(*
ign‹ed
, c⁄° 
lwp°©us_t
 *
lwp
)

566 
	`Àaky_m¨k_±r
(
lwp
->
¥_ªg
[
R_SP
] + 
STACK_BIAS
);

568 
	}
}

572 
	$Àaky_¥o˚ss_lwp
(*
ign‹ed
, c⁄° 
lwp°©us_t
 *
lwp
)

574 c⁄° 
uöçå_t
 *
ªgs
 = (c⁄° uöçå_à*)&
lwp
->
¥_ªg
;

575 
i
;

576 
uöçå_t
 
•
;

577 
uöçå_t
 
addr
;

578 
size_t
 
size
;

580 
i
 = 0; i < 
R_SP
; i++)

581 
	`Àaky_gªp_±r
(
ªgs
[
i
]);

583 
•
 = 
ªgs
[
i
++] + 
STACK_BIAS
;

584 i‡(
	`Àaky_lookup_m¨ked
(
•
, &
addr
, &
size
))

585 
	`Àaky_gªp
(
•
, 
size
 - (• - 
addr
));

587 ; 
i
 < 
NPRGREG
; i++)

588 
	`Àaky_gªp_±r
(
ªgs
[
i
]);

591 
	}
}

599 
	$Àaky_¥o˚ss_¥oc
()

601 
p°©us_t
 
Ps
;

602 
ps_¥och™dÀ
 *
Pr
;

604 i‡(
	`mdb_gë_xd©a
("p°©us", &
Ps
,  (Ps)) == -1) {

605 
	`mdb_w¨n
("couldn'tÑeadÖstatus xdata");

606  (
DCMD_ERR
);

609 
	`d¥ötf
(("pstatus says:\n"));

610 
	`d¥ötf
(("\tbrk: base %p size %p\n",

611 
Ps
.
¥_brkba£
, Ps.
¥_brksize
));

612 
	`d¥ötf
(("\tstk: base %p size %p\n",

613 
Ps
.
¥_°kba£
, Ps.
¥_°ksize
));

615 i‡(
	`mdb_gë_xd©a
("psh™dÀ", &
Pr
,  (Pr)) == -1) {

616 
	`mdb_w¨n
("couldn'tÑeadÖshandle xdata");

617  (
DCMD_ERR
);

620 i‡(
	`Plwp_ôî
(
Pr
, 
Àaky_m¨k_lwp
, 
NULL
) != 0) {

621 
	`mdb_w¨n
("findleaks: FailedÅo iterateÜwps\n");

622  (
DCMD_ERR
);

625 i‡(
	`Plwp_ôî
(
Pr
, 
Àaky_¥o˚ss_lwp
, 
NULL
) != 0) {

626 
	`mdb_w¨n
("findleaks: FailedÅo iterateÜwps\n");

627  (
DCMD_ERR
);

630 
	`¥ockludge_add_wÆkîs
();

632 
	`Àaky_m≠pögs_hódî
();

634 i‡(
	`mdb_wÆk
(
KLUDGE_MAPWALK_NAME
, (
mdb_wÆk_cb_t
)
Àaky_gªp_m≠pögs
,

635 &
Ps
) == -1) {

636 
	`mdb_w¨n
("Couldn'àwÆk "
KLUDGE_MAPWALK_NAME
);

637 
	`¥ockludge_ªmove_wÆkîs
();

641 
	`¥ockludge_ªmove_wÆkîs
();

644 
	}
}

647 
	$Àaky_subr_ˇŒî
(c⁄° 
uöçå_t
 *
°ack
, 
uöt_t
 
dïth
, *
buf
,

648 
uöçå_t
 *
p˝
)

650 
i
;

651 
GElf_Sym
 
sym
;

652 
uöçå_t
 
pc
 = 0;

654 
buf
[0] = 0;

656 
i
 = 0; i < 
dïth
; i++) {

657 
pc
 = 
°ack
[
i
];

659 i‡(
	`mdb_lookup_by_addr
(
pc
,

660 
MDB_SYM_FUZZY
, 
buf
, 
MDB_SYM_NAMLEN
, &
sym
) == -1)

662 i‡(
	`°∫cmp
(
buf
, "libumem.so", 10) == 0)

665 *
p˝
 = 
pc
;

673 *
p˝
 = 
pc
;

674 
	}
}

677 
	$Àaky_subr_buf˘l_cmp
(c⁄° 
Àak_buf˘l_t
 *
lhs
, c⁄°Üók_buf˘l_à*
rhs
)

679 
lbuf
[
MDB_SYM_NAMLEN
], 
rbuf
[MDB_SYM_NAMLEN];

680 
uöçå_t
 
lˇŒî
, 
rˇŒî
;

681 
rvÆ
;

683 
	`Àaky_subr_ˇŒî
(
lhs
->
lkb_°ack
,Ühs->
lkb_dïth
, 
lbuf
, &
lˇŒî
);

684 
	`Àaky_subr_ˇŒî
(
rhs
->
lkb_°ack
, 
lhs
->
lkb_dïth
, 
rbuf
, &
rˇŒî
);

686 i‡(
rvÆ
 = 
	`°rcmp
(
lbuf
, 
rbuf
))

687  (
rvÆ
);

689 i‡(
lˇŒî
 < 
rˇŒî
)

692 i‡(
lˇŒî
 > 
rˇŒî
)

695 i‡(
lhs
->
lkb_d©a
 < 
rhs
->lkb_data)

698 i‡(
lhs
->
lkb_d©a
 > 
rhs
->lkb_data)

702 
	}
}

706 
	$Àaky_subr_e°im©e
(
size_t
 *
e°p
)

708 i‡(
umem_ªady
 == 0) {

709 
	`mdb_w¨n
(

711  (
DCMD_ERR
);

714 i‡(
umem_ªady
 =
UMEM_READY_INIT_FAILED
) {

715 
	`mdb_w¨n
("findleaks: umem initialization failed --Ço "

717  (
DCMD_ERR
);

720 i‡(
umem_ªady
 !
UMEM_READY
) {

721 
	`mdb_w¨n
("findleaks: Noállocations have occured --Ço "

723  (
DCMD_ERR
);

726 i‡(
	`mdb_wÆk
("umem_ˇche", (
mdb_wÆk_cb_t
)
Àaky_e°im©e
, 
e°p
) == -1) {

727 
	`mdb_w¨n
("couldn't walk 'umem_cache'");

728  (
DCMD_ERR
);

731 i‡(
	`mdb_wÆk
("vmem", (
mdb_wÆk_cb_t
)
Àaky_e°im©e_vmem
, 
e°p
) == -1) {

732 
	`mdb_w¨n
("couldn't walk 'vmem'");

733  (
DCMD_ERR
);

736 i‡(*
e°p
 == 0) {

737 
	`mdb_w¨n
("findleaks: Noállocated buffers found.\n");

738  (
DCMD_ERR
);

741 
	`¥ockludge_add_wÆkîs
();

743 i‡(
	`mdb_wÆk
(
KLUDGE_MAPWALK_NAME
, (
mdb_wÆk_cb_t
)
Àaky_cou¡
,

744 
e°p
) == -1) {

745 
	`mdb_w¨n
("Couldn'àwÆk "
KLUDGE_MAPWALK_NAME
);

746 
	`¥ockludge_ªmove_wÆkîs
();

747  (
DCMD_ERR
);

750 
	`¥ockludge_ªmove_wÆkîs
();

752  (
DCMD_OK
);

753 
	}
}

756 
	$Àaky_subr_fûl
(
Àak_mèb_t
 **
lmµ
)

758 i‡(
	`Àaky_h™dÀ_™⁄_m≠pögs
(
lmµ
Ë!
DCMD_OK
) {

759 
	`mdb_w¨n
("unableÅoÖrocess mappings\n");

760  (
DCMD_ERR
);

763 i‡(
	`mdb_wÆk
("vmem", (
mdb_wÆk_cb_t
)
Àaky_vmem
, 
lmµ
) == -1) {

764 
	`mdb_w¨n
("couldn't walk 'vmem'");

765  (
DCMD_ERR
);

768 i‡(
	`mdb_wÆk
("umem_ˇche", (
mdb_wÆk_cb_t
)
Àaky_ˇche
, 
lmµ
) == -1) {

769 
	`mdb_w¨n
("couldn't walk 'umem_cache'");

770  (
DCMD_ERR
);

773  (
DCMD_OK
);

774 
	}
}

777 
	$Àaky_subr_run
()

779 i‡(
	`Àaky_¥o˚ss_¥oc
(Ë=
DCMD_ERR
) {

780 
	`mdb_w¨n
("failedÅoÖrocessÖroc");

781  (
DCMD_ERR
);

783  (
DCMD_OK
);

784 
	}
}

787 
	$Àaky_subr_add_Àak
(
Àak_mèb_t
 *
lmp
)

789 
uöçå_t
 
addr
 = 
	`LKM_CTLPTR
(
lmp
->
lkm_buf˘l
);

790 
uöt_t
 
dïth
;

792 
vmem_£g_t
 
vs
;

793 
umem_buf˘l_audô_t
 *
b˝
;

794 
	`UMEM_LOCAL_BUFCTL_AUDIT
(&
b˝
);

796 
	`LKM_CTLTYPE
(
lmp
->
lkm_buf˘l
)) {

797 
LKM_CTL_BUFCTL
:

798 i‡(
	`mdb_vªad
(
b˝
, 
UMEM_BUFCTL_AUDIT_SIZE
, 
addr
) == -1) {

799 
	`mdb_w¨n
("couldn'tÑeadÜeaked bufctlátáddr %p",

800 
addr
);

804 
dïth
 = 
	`MIN
(
b˝
->
bc_dïth
, 
umem_°ack_dïth
);

814 i‡(
dïth
 > 0)

815 
dïth
--;

816 
	`Àaky_add_Àak
(
TYPE_UMEM
, 
addr
, (
uöçå_t
)
b˝
->
bc_addr
,

817 
b˝
->
bc_time°amp
, b˝->
bc_°ack
 + 1, 
dïth
,

818 (
uöçå_t
)
b˝
->
bc_ˇche
, (uintptr_t)bcp->bc_cache);

820 
LKM_CTL_VMSEG
:

821 i‡(
	`mdb_vªad
(&
vs
,  (vs), 
addr
) == -1) {

822 
	`mdb_w¨n
("couldn'tÑeadÜeaked vmem_segátáddr %p",

823 
addr
);

826 
dïth
 = 
	`MIN
(
vs
.
vs_dïth
, 
VMEM_STACK_DEPTH
);

828 
	`Àaky_add_Àak
(
TYPE_VMEM
, 
addr
, 
vs
.
vs_°¨t
, vs.
vs_time°amp
,

829 
vs
.
vs_°ack
, 
dïth
, 0, (vs.
vs_íd
 - vs.
vs_°¨t
));

831 
LKM_CTL_MEMORY
:

832 i‡(
	`LEAKY_INBRK
(
addr
))

833 
	`Àaky_add_Àak
(
TYPE_SBRK
, 
addr
,áddr, 0, 
NULL
, 0, 0,

834 
lmp
->
lkm_limô
 - 
addr
);

836 
	`Àaky_add_Àak
(
TYPE_MMAP
, 
addr
,áddr, 0, 
NULL
, 0, 0,

837 
lmp
->
lkm_limô
 - 
addr
);

839 
LKM_CTL_CACHE
:

840 
	`Àaky_add_Àak
(
TYPE_CACHE
, 
lmp
->
lkm_ba£
,Ümp->lkm_base, 0,

841 
NULL
, 0, 
addr
,áddr);

844 
	`mdb_w¨n
("internalÉrror: invalidÜeak_bufctl_t\n");

847 
	}
}

849 
	glk_vmem_£í
;

850 
	glk_ˇche_£í
;

851 
	glk_umem_£í
;

852 
size_t
 
	glk_âl
;

853 
size_t
 
	glk_byãs
;

856 
	$Àaky_subr_dump_°¨t
(
ty≥
)

858 
ty≥
) {

859 
TYPE_MMAP
:

860 
lk_vmem_£í
 = 0;

863 
TYPE_SBRK
:

864 
TYPE_VMEM
:

867 
TYPE_CACHE
:

868 
lk_ˇche_£í
 = 0;

871 
TYPE_UMEM
:

872 
lk_umem_£í
 = 0;

879 
lk_âl
 = 0;

880 
lk_byãs
 = 0;

881 
	}
}

884 
	$Àaky_subr_dump
(c⁄° 
Àak_buf˘l_t
 *
lkb
, 
vîbo£
)

886 c⁄° 
Àak_buf˘l_t
 *
cur
;

887 
umem_ˇche_t
 
ˇche
;

888 
size_t
 
mö
, 
max
, 
size
;

889 
sz
[30];

890 
c
[
MDB_SYM_NAMLEN
];

891 
uöçå_t
 
ˇŒî
;

892 c⁄° *
nm
, *
nm_lc
;

893 
uöt8_t
 
ty≥
 = 
lkb
->
lkb_ty≥
;

895 i‡(
vîbo£
) {

896 
lk_âl
 = 0;

897 
lk_byãs
 = 0;

898 } i‡(!
lk_vmem_£í
 && (
ty≥
 =
TYPE_VMEM
 ||Åy≥ =
TYPE_MMAP
 ||

899 
ty≥
 =
TYPE_SBRK
)) {

900 
lk_vmem_£í
 = 1;

901 
	`mdb_¥ötf
("%-16s %7s %?s %s\n",

905 
lkb
->
lkb_ty≥
) {

906 
TYPE_MMAP
:

907 
TYPE_SBRK
:

908 
nm
 = (
lkb
->
lkb_ty≥
 =
TYPE_MMAP
) ? "MMAP" : "SBRK";

909 
nm_lc
 = (
lkb
->
lkb_ty≥
 =
TYPE_MMAP
) ? "mmap(2)" : "sbrk(2)";

911 ; 
lkb
 !
NULL
;Ükb =Ükb->
lkb_√xt
) {

912 i‡(!
vîbo£
)

913 
	`mdb_¥ötf
("%-16d %7d %?∞%s\n", 
lkb
->
lkb_d©a
,

914 
lkb
->
lkb_dups
 + 1,Ükb->
lkb_addr
, 
nm
);

916 
	`mdb_¥ötf
("%sÜeak: [%p, %p), %ld bytes\n",

917 
nm_lc
, 
lkb
->
lkb_addr
,

918 
lkb
->
lkb_addr
 +Ükb->
lkb_d©a
,

919 
lkb
->
lkb_d©a
);

920 
lk_âl
++;

921 
lk_byãs
 +
lkb
->
lkb_d©a
;

925 
TYPE_VMEM
:

926 
mö
 = 
max
 = 
lkb
->
lkb_d©a
;

928 
cur
 = 
lkb
; cu∏!
NULL
; cu∏cur->
lkb_√xt
) {

929 
size
 = 
cur
->
lkb_d©a
;

931 i‡(
size
 < 
mö
)

932 
mö
 = 
size
;

933 i‡(
size
 > 
max
)

934 
max
 = 
size
;

936 
lk_âl
++;

937 
lk_byãs
 +
size
;

940 i‡(
mö
 =
max
)

941 (Ë
	`mdb_¢¥ötf
(
sz
,  (sz), "%ld", 
mö
);

943 (Ë
	`mdb_¢¥ötf
(
sz
,  (sz), "%ld-%ld",

944 
mö
, 
max
);

946 i‡(!
vîbo£
) {

947 
	`Àaky_subr_ˇŒî
(
lkb
->
lkb_°ack
,Ükb->
lkb_dïth
,

948 
c
, &
ˇŒî
);

950 
	`mdb_¥ötf
("%-16†%7d %?∞%a\n", 
sz
, 
lkb
->
lkb_dups
 + 1,

951 
lkb
->
lkb_addr
, 
ˇŒî
);

953 
mdb_¨g_t
 
v
;

955 i‡(
lk_âl
 == 1)

956 
	`mdb_¥ötf
("umem_oversizeÜeak: 1 vmem_seg, "

957 "%ld byãs\n", 
lk_byãs
);

959 
	`mdb_¥ötf
("umem_oversizeÜeak: %d vmem_segs, "

961 
lk_âl
, 
sz
, 
lk_byãs
);

963 
v
.
a_ty≥
 = 
MDB_TYPE_STRING
;

964 
v
.
a_un
.
a_°r
 = "-v";

966 i‡(
	`mdb_ˇŒ_dcmd
("vmem_£g", 
lkb
->
lkb_addr
,

967 
DCMD_ADDRSPEC
, 1, &
v
) == -1) {

968 
	`mdb_w¨n
("'%p::vmem_seg -v' failed",

969 
lkb
->
lkb_addr
);

974 
TYPE_CACHE
:

975 i‡(!
lk_ˇche_£í
) {

976 
lk_ˇche_£í
 = 1;

977 i‡(
lk_vmem_£í
)

978 
	`mdb_¥ötf
("\n");

979 
	`mdb_¥ötf
("%-?s %7s %?s %s\n",

983 i‡(
	`mdb_vªad
(&
ˇche
,  (ˇche), 
lkb
->
lkb_d©a
) == -1) {

989 
	`mdb_w¨n
("can'tÑead cache %p forÜeaked "

990 "buf„∏%p", 
lkb
->
lkb_d©a
,Ükb->
lkb_addr
);

994 
lk_âl
 +
lkb
->
lkb_dups
 + 1;

995 
lk_byãs
 +(
lkb
->
lkb_dups
 + 1Ë* 
ˇche
.
ˇche_bufsize
;

997 
ˇŒî
 = (
lkb
->
lkb_dïth
 =0Ë? 0 :Ükb->
lkb_°ack
[0];

998 i‡(
ˇŒî
 != 0) {

999 (Ë
	`mdb_¢¥ötf
(
c
,  (c), "%a", 
ˇŒî
);

1001 (Ë
	`mdb_¢¥ötf
(
c
,  (c), "%s",

1002 (
vîbo£
) ? "" : "?");

1005 i‡(!
vîbo£
) {

1006 
	`mdb_¥ötf
("%0?∞%7d %0?∞%s\n", 
lkb
->
lkb_cid
,

1007 
lkb
->
lkb_dups
 + 1,Ükb->
lkb_addr
, 
c
);

1009 i‡(
lk_âl
 == 1)

1010 
	`mdb_¥ötf
("%sÜeak: 1 buffer, %ld bytes,\n",

1011 
ˇche
.
ˇche_«me
, 
lk_byãs
);

1013 
	`mdb_¥ötf
("%sÜeak: %d buffers, "

1015 
ˇche
.
ˇche_«me
, 
lk_âl
,

1016 
ˇche
.
ˇche_bufsize
, 
lk_byãs
);

1017 
	`mdb_¥ötf
(" %s%s%ssampleáddr %p\n",

1018 (
ˇŒî
 =0Ë? "" : "ˇŒî ", 
c
,

1019 (
ˇŒî
 =0Ë? "" : ", ", 
lkb
->
lkb_addr
);

1023 
TYPE_UMEM
:

1024 i‡(!
lk_umem_£í
) {

1025 
lk_umem_£í
 = 1;

1026 i‡(
lk_vmem_£í
 || 
lk_ˇche_£í
)

1027 
	`mdb_¥ötf
("\n");

1028 
	`mdb_¥ötf
("%-?s %7s %?s %s\n",

1031 i‡(
	`mdb_vªad
(&
ˇche
,  (ˇche), 
lkb
->
lkb_d©a
) == -1) {

1037 
	`mdb_w¨n
("can'tÑead cache %p forÜeaked "

1038 "buf˘»%p", 
lkb
->
lkb_d©a
,Ükb->
lkb_addr
);

1042 
lk_âl
 +
lkb
->
lkb_dups
 + 1;

1043 
lk_byãs
 +(
lkb
->
lkb_dups
 + 1Ë* 
ˇche
.
ˇche_bufsize
;

1045 i‡(!
vîbo£
) {

1046 
	`Àaky_subr_ˇŒî
(
lkb
->
lkb_°ack
,Ükb->
lkb_dïth
, 
c
,

1047 &
ˇŒî
);

1049 
	`mdb_¥ötf
("%0?∞%7d %0?∞%a\n", 
lkb
->
lkb_d©a
,

1050 
lkb
->
lkb_dups
 + 1,Ükb->
lkb_addr
, 
ˇŒî
);

1052 
mdb_¨g_t
 
v
;

1054 i‡(
lk_âl
 == 1)

1055 
	`mdb_¥ötf
("%sÜeak: 1 buffer, %ld bytes\n",

1056 
ˇche
.
ˇche_«me
, 
lk_byãs
);

1058 
	`mdb_¥ötf
("%sÜeak: %d buffers, "

1060 
ˇche
.
ˇche_«me
, 
lk_âl
,

1061 
ˇche
.
ˇche_bufsize
, 
lk_byãs
);

1063 
v
.
a_ty≥
 = 
MDB_TYPE_STRING
;

1064 
v
.
a_un
.
a_°r
 = "-v";

1066 i‡(
	`mdb_ˇŒ_dcmd
("buf˘l", 
lkb
->
lkb_addr
,

1067 
DCMD_ADDRSPEC
, 1, &
v
) == -1) {

1068 
	`mdb_w¨n
("'%p::bufctl -v' failed",

1069 
lkb
->
lkb_addr
);

1077 
	}
}

1080 
	$Àaky_subr_dump_íd
(
ty≥
)

1082 
i
;

1083 
width
;

1084 c⁄° *
Àak
;

1086 
ty≥
) {

1087 
TYPE_VMEM
:

1088 i‡(!
lk_vmem_£í
)

1091 
width
 = 16;

1092 
Àak
 = "oversizedÜeak";

1095 
TYPE_CACHE
:

1096 i‡(!
lk_ˇche_£í
)

1099 
width
 =  (
uöçå_t
) * 2;

1100 
Àak
 = "buffer";

1103 
TYPE_UMEM
:

1104 i‡(!
lk_umem_£í
)

1107 
width
 =  (
uöçå_t
) * 2;

1108 
Àak
 = "buffer";

1115 
i
 = 0; i < 72; i++)

1116 
	`mdb_¥ötf
("-");

1117 
	`mdb_¥ötf
("\n%*s %7ld %s%s, %ld byte%s\n",

1118 
width
, "TŸÆ", 
lk_âl
, 
Àak
, (lk_ttl == 1) ? "" : "s",

1119 
lk_byãs
, (lk_bytes == 1) ? "" : "s");

1120 
	}
}

1123 
	$Àaky_subr_övoke_ˇŒback
(c⁄° 
Àak_buf˘l_t
 *
lkb
, 
mdb_wÆk_cb_t
 
cb
,

1124 *
cbd©a
)

1126 
vmem_£g_t
 
vs
;

1127 
umem_buf˘l_audô_t
 *
b˝
;

1128 
	`UMEM_LOCAL_BUFCTL_AUDIT
(&
b˝
);

1130 
lkb
->
lkb_ty≥
) {

1131 
TYPE_VMEM
:

1132 i‡(
	`mdb_vªad
(&
vs
,  (vs), 
lkb
->
lkb_addr
) == -1) {

1133 
	`mdb_w¨n
("unableÅoÑead vmem_segát %p",

1134 
lkb
->
lkb_addr
);

1135  (
WALK_NEXT
);

1137  (
	`cb
(
lkb
->
lkb_addr
, &
vs
, 
cbd©a
));

1139 
TYPE_UMEM
:

1140 i‡(
	`mdb_vªad
(
b˝
, 
UMEM_BUFCTL_AUDIT_SIZE
,

1141 
lkb
->
lkb_addr
) == -1) {

1142 
	`mdb_w¨n
("unableÅoÑead bufctlát %p",

1143 
lkb
->
lkb_addr
);

1144  (
WALK_NEXT
);

1146  (
	`cb
(
lkb
->
lkb_addr
, 
b˝
, 
cbd©a
));

1149  (
	`cb
(
lkb
->
lkb_addr
, 
NULL
, 
cbd©a
));

1151 
	}
}

	@tools/libumem.c

26 
	~"umem.h
"

27 
	~<lib¥oc.h
>

28 
	~<mdb/mdb_mod≠i.h
>

30 
	~"kgªp.h
"

31 
	~"Àaky.h
"

32 
	~"misc.h
"

33 
	~"¥oc_kludges.h
"

35 
	~<umem_im∂.h
>

36 
	~<sys/vmem_im∂_u£r.h
>

38 
	~"umem_∑gesize.h
"

40 
	sd©afmt
 {

41 *
	mhdr1
;

42 *
	mhdr2
;

43 *
	mdashes
;

44 *
	mfmt
;

45 } 
	td©afmt_t
;

47 
d©afmt_t
 
	gumemfmt
[] = {

56 { 
NULL
, NULL, NULL, NULL }

59 
d©afmt_t
 
	gvmemfmt
[] = {

67 { 
NULL
, NULL, NULL, NULL }

72 
	$uma°©_˝u_avaû
(
uöçå_t
 
addr
, c⁄° 
umem_˝u_ˇche_t
 *
c˝
, *
avaû
)

74 i‡(
c˝
->
cc_rounds
 > 0)

75 *
avaû
 +
c˝
->
cc_rounds
;

76 i‡(
c˝
->
cc_¥ounds
 > 0)

77 *
avaû
 +
c˝
->
cc_¥ounds
;

79  (
WALK_NEXT
);

80 
	}
}

84 
	$uma°©_˝u_Æloc
(
uöçå_t
 
addr
, c⁄° 
umem_˝u_ˇche_t
 *
c˝
, *
Æloc
)

86 *
Æloc
 +
c˝
->
cc_Æloc
;

88  (
WALK_NEXT
);

89 
	}
}

93 
	$uma°©_¶ab_avaû
(
uöçå_t
 
addr
, c⁄° 
umem_¶ab_t
 *
•
, *
avaû
)

95 *
avaû
 +
•
->
¶ab_chunks
 - sp->
¶ab_ªf˙t
;

97  (
WALK_NEXT
);

98 
	}
}

100 
	suma°©_vmem
 {

101 
uöçå_t
 
	mkv_addr
;

102 
uma°©_vmem
 *
	mkv_√xt
;

103 
	mkv_memöu£
;

104 
	mkv_Æloc
;

105 
	mkv_Áû
;

106 } 
	tuma°©_vmem_t
;

109 
	$uma°©_ˇche
(
uöçå_t
 
addr
, c⁄° 
umem_ˇche_t
 *
˝
, 
uma°©_vmem_t
 **
kvp
)

111 
uma°©_vmem_t
 *
kv
;

112 
d©afmt_t
 *
dÂ
 = 
umemfmt
;

113 
magsize
;

115 
avaû
, 
Æloc
, 
tŸÆ
;

116 
size_t
 
memöu£
 = (
˝
->
ˇche_¶ab_¸óã
 - cp->
ˇche_¶ab_de°roy
) *

117 
˝
->
ˇche_¶absize
;

119 
mdb_wÆk_cb_t
 
˝u_avaû
 = (mdb_wÆk_cb_t)
uma°©_˝u_avaû
;

120 
mdb_wÆk_cb_t
 
˝u_Æloc
 = (mdb_wÆk_cb_t)
uma°©_˝u_Æloc
;

121 
mdb_wÆk_cb_t
 
¶ab_avaû
 = (mdb_wÆk_cb_t)
uma°©_¶ab_avaû
;

123 
magsize
 = 
	`umem_gë_magsize
(
˝
);

125 
Æloc
 = 
˝
->
ˇche_¶ab_Æloc
 + cp->
ˇche_fuŒ
.
ml_Æloc
;

126 
avaû
 = 
˝
->
ˇche_fuŒ
.
ml_tŸÆ
 * 
magsize
;

127 
tŸÆ
 = 
˝
->
ˇche_bu·ŸÆ
;

129 (Ë
	`mdb_pwÆk
("umem_˝u_ˇche", 
˝u_Æloc
, &
Æloc
, 
addr
);

130 (Ë
	`mdb_pwÆk
("umem_˝u_ˇche", 
˝u_avaû
, &
avaû
, 
addr
);

131 (Ë
	`mdb_pwÆk
("umem_¶ab_∑πül", 
¶ab_avaû
, &
avaû
, 
addr
);

133 
kv
 = *
kvp
; kv !
NULL
; kv = kv->
kv_√xt
) {

134 i‡(
kv
->
kv_addr
 =(
uöçå_t
)
˝
->
ˇche_¨ía
)

135 
out
;

138 
kv
 = 
	`mdb_zÆloc
( (
uma°©_vmem_t
), 
UM_SLEEP
 | 
UM_GC
);

139 
kv
->
kv_√xt
 = *
kvp
;

140 
kv
->
kv_addr
 = (
uöçå_t
)
˝
->
ˇche_¨ía
;

141 *
kvp
 = 
kv
;

142 
out
:

143 
kv
->
kv_memöu£
 +
memöu£
;

144 
kv
->
kv_Æloc
 +
Æloc
;

145 
kv
->
kv_Áû
 +
˝
->
ˇche_Æloc_Áû
;

147 
	`mdb_¥ötf
((
dÂ
++)->
fmt
, 
˝
->
ˇche_«me
);

148 
	`mdb_¥ötf
((
dÂ
++)->
fmt
, 
˝
->
ˇche_bufsize
);

149 
	`mdb_¥ötf
((
dÂ
++)->
fmt
, 
tŸÆ
 - 
avaû
);

150 
	`mdb_¥ötf
((
dÂ
++)->
fmt
, 
tŸÆ
);

151 
	`mdb_¥ötf
((
dÂ
++)->
fmt
, 
memöu£
);

152 
	`mdb_¥ötf
((
dÂ
++)->
fmt
, 
Æloc
);

153 
	`mdb_¥ötf
((
dÂ
++)->
fmt
, 
˝
->
ˇche_Æloc_Áû
);

154 
	`mdb_¥ötf
("\n");

156  (
WALK_NEXT
);

157 
	}
}

160 
	$uma°©_vmem_tŸÆs
(
uöçå_t
 
addr
, c⁄° 
vmem_t
 *
v
, 
uma°©_vmem_t
 *
kv
)

162 
kv
 !
NULL
 && kv->
kv_addr
 !
addr
)

163 
kv
 = kv->
kv_√xt
;

165 i‡(
kv
 =
NULL
 || kv->
kv_Æloc
 == 0)

166  (
WALK_NEXT
);

168 
	`mdb_¥ötf
("TŸÆ [%s]%*†%6†%6†%6†%9u %9u %5u\n", 
v
->
vm_«me
,

169 17 - 
	`°æí
(
v
->
vm_«me
), "", "", "", "",

170 
kv
->
kv_memöu£
, kv->
kv_Æloc
, kv->
kv_Áû
);

172  (
WALK_NEXT
);

173 
	}
}

177 
	$uma°©_vmem
(
uöçå_t
 
addr
, c⁄° 
vmem_t
 *
v
, *
ign‹ed
)

179 
d©afmt_t
 *
dÂ
 = 
vmemfmt
;

180 
uöçå_t
 
∑ddr
;

181 
vmem_t
 
∑ª¡
;

182 
idít
 = 0;

184 
∑ddr
 = (
uöçå_t
)
v
->
vm_sour˚
;Öadd∏!
NULL
; 
idít
 += 4) {

185 i‡(
	`mdb_vªad
(&
∑ª¡
,  (∑ª¡), 
∑ddr
) == -1) {

186 
	`mdb_w¨n
("couldn'àåa˚ %p'†™˚°ry", 
addr
);

187 
idít
 = 0;

190 
∑ddr
 = (
uöçå_t
)
∑ª¡
.
vm_sour˚
;

193 
	`mdb_¥ötf
("%*s", 
idít
, "");

194 
	`mdb_¥ötf
((
dÂ
++)->
fmt
, 25 - 
idít
, 
v
->
vm_«me
);

195 
	`mdb_¥ötf
((
dÂ
++)->
fmt
, 
v
->
vm_k°©
.
vk_mem_öu£
);

196 
	`mdb_¥ötf
((
dÂ
++)->
fmt
, 
v
->
vm_k°©
.
vk_mem_tŸÆ
);

197 
	`mdb_¥ötf
((
dÂ
++)->
fmt
, 
v
->
vm_k°©
.
vk_mem_imp‹t
);

198 
	`mdb_¥ötf
((
dÂ
++)->
fmt
, 
v
->
vm_k°©
.
vk_Æloc
);

199 
	`mdb_¥ötf
((
dÂ
++)->
fmt
, 
v
->
vm_k°©
.
vk_Áû
);

201 
	`mdb_¥ötf
("\n");

203  (
WALK_NEXT
);

204 
	}
}

208 
	$uma°©
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
¨gc
, c⁄° 
mdb_¨g_t
 *
¨gv
)

210 
uma°©_vmem_t
 *
kv
 = 
NULL
;

211 
d©afmt_t
 *
dÂ
;

213 i‡(
¨gc
 != 0)

214  (
DCMD_USAGE
);

216 
dÂ
 = 
umemfmt
; dÂ->
hdr1
 !
NULL
; dfp++)

217 
	`mdb_¥ötf
("%†", 
dÂ
->
hdr1
);

218 
	`mdb_¥ötf
("\n");

220 
dÂ
 = 
umemfmt
; dÂ->
hdr1
 !
NULL
; dfp++)

221 
	`mdb_¥ötf
("%†", 
dÂ
->
hdr2
);

222 
	`mdb_¥ötf
("\n");

224 
dÂ
 = 
umemfmt
; dÂ->
hdr1
 !
NULL
; dfp++)

225 
	`mdb_¥ötf
("%†", 
dÂ
->
dashes
);

226 
	`mdb_¥ötf
("\n");

228 i‡(
	`mdb_wÆk
("umem_ˇche", (
mdb_wÆk_cb_t
)
uma°©_ˇche
, &
kv
) == -1) {

229 
	`mdb_w¨n
("can't walk 'umem_cache'");

230  (
DCMD_ERR
);

233 
dÂ
 = 
umemfmt
; dÂ->
hdr1
 !
NULL
; dfp++)

234 
	`mdb_¥ötf
("%†", 
dÂ
->
dashes
);

235 
	`mdb_¥ötf
("\n");

237 i‡(
	`mdb_wÆk
("vmem", (
mdb_wÆk_cb_t
)
uma°©_vmem_tŸÆs
, 
kv
) == -1) {

238 
	`mdb_w¨n
("can't walk 'vmem'");

239  (
DCMD_ERR
);

242 
dÂ
 = 
umemfmt
; dÂ->
hdr1
 !
NULL
; dfp++)

243 
	`mdb_¥ötf
("%†", 
dÂ
->
dashes
);

244 
	`mdb_¥ötf
("\n");

246 
	`mdb_¥ötf
("\n");

248 
dÂ
 = 
vmemfmt
; dÂ->
hdr1
 !
NULL
; dfp++)

249 
	`mdb_¥ötf
("%†", 
dÂ
->
hdr1
);

250 
	`mdb_¥ötf
("\n");

252 
dÂ
 = 
vmemfmt
; dÂ->
hdr1
 !
NULL
; dfp++)

253 
	`mdb_¥ötf
("%†", 
dÂ
->
hdr2
);

254 
	`mdb_¥ötf
("\n");

256 
dÂ
 = 
vmemfmt
; dÂ->
hdr1
 !
NULL
; dfp++)

257 
	`mdb_¥ötf
("%†", 
dÂ
->
dashes
);

258 
	`mdb_¥ötf
("\n");

260 i‡(
	`mdb_wÆk
("vmem", (
mdb_wÆk_cb_t
)
uma°©_vmem
, 
NULL
) == -1) {

261 
	`mdb_w¨n
("can't walk 'vmem'");

262  (
DCMD_ERR
);

265 
dÂ
 = 
vmemfmt
; dÂ->
hdr1
 !
NULL
; dfp++)

266 
	`mdb_¥ötf
("%†", 
dÂ
->
dashes
);

267 
	`mdb_¥ötf
("\n");

268  (
DCMD_OK
);

269 
	}
}

275 #i‚de‡
_KMDB


277 
	sugªp_wÆk_d©a
 {

278 
kgªp_cb_func
 *
	mug_cb
;

279 *
	mug_cbd©a
;

280 } 
	tugªp_wÆk_d©a_t
;

284 
	$ugªp_m≠pög_cb
(
uöçå_t
 
addr
, c⁄° *
¥m_¨g
, *
d©a
)

286 
ugªp_wÆk_d©a_t
 *
ug
 = 
d©a
;

287 c⁄° 
¥m≠_t
 *
¥m
 = 
¥m_¨g
;

289  (
ug
->
	`ug_cb
(
¥m
->
¥_vaddr
,Örm->¥_vadd∏+Örm->
¥_size
,

290 
ug
->
ug_cbd©a
));

291 
	}
}

294 
	$kgªp_subr
(
kgªp_cb_func
 *
cb
, *
cbd©a
)

296 
ugªp_wÆk_d©a_t
 
ug
;

298 
	`¥ockludge_add_wÆkîs
();

300 
ug
.
ug_cb
 = 
cb
;

301 
ug
.
ug_cbd©a
 = 
cbd©a
;

303 i‡(
	`mdb_wÆk
(
KLUDGE_MAPWALK_NAME
, 
ugªp_m≠pög_cb
, &
ug
) == -1) {

304 
	`mdb_w¨n
("U«bÀÅÿwÆk "
KLUDGE_MAPWALK_NAME
);

305  (
DCMD_ERR
);

308 
	`¥ockludge_ªmove_wÆkîs
();

309  (
DCMD_OK
);

310 
	}
}

312 
size_t


313 
	$kgªp_subr_∑gesize
()

315  (
PAGESIZE
);

316 
	}
}

320 c⁄° 
mdb_dcmd_t
 
	gdcmds
[] = {

323 { "uma°©", 
NULL
, "umemáŒoˇt‹ sèts", 
uma°©
 },

326 { "umem_debug", 
NULL
, "toggÀ umem dcmd/wÆk debuggög", 
umem_debug
},

329 { "umem_°©us", 
NULL
, "Print umem statusánd message buffer",

330 
umem_°©us
 },

332 
Ælocdby
 },

334 "[-àthd]", "¥öà‹ fûã∏®buf˘l", 
buf˘l
, 
buf˘l_hñp
 },

335 { "buf˘l_audô", ":", "¥öà®buf˘l_audô", 
buf˘l_audô
 },

336 { "‰ìdby", ":", "givíáÅhªad,Öröàô†‰ìd buf„rs", 
‰ìdby
 },

338 "di•œy umemÅønß˘i⁄Üogánd sèckÅø˚s", 
umÆog
 },

340 "u£r†o‡thêumemáŒoˇt‹", 
umau£rs
 },

341 { "umem_ˇche", "?", "¥öà®umem cache", 
umem_ˇche
 },

342 { "umem_log", "?", "dum∞umemÅønß˘i⁄Üog", 
umem_log
 },

345 
umem_mÆloc_di°
, 
umem_mÆloc_di°_hñp
 },

348 
umem_mÆloc_öfo
, 
umem_mÆloc_öfo_hñp
 },

350 
umem_vîify
 },

351 { "vmem", "?", "¥öà®vmem_t", 
vmem
 },

354 "¥öà‹ fûã∏®vmem_£g", 
vmem_£g
, 
vmem_£g_hñp
 },

356 #i‚de‡
_KMDB


358 { "ugªp", 
KGREP_USAGE
, "search useráddress space foráÖointer",

359 
kgªp
, 
kgªp_hñp
 },

362 { "födÀaks", 
FINDLEAKS_USAGE
, "search forÖotential memoryÜeaks",

363 
födÀaks
, 
födÀaks_hñp
 },

366 { 
NULL
 }

369 c⁄° 
mdb_wÆkî_t
 
	gwÆkîs
[] = {

373 
Ælocdby_wÆk_öô
, 
Ælocdby_wÆk_°ï
, 
Ælocdby_wÆk_föi
 },

375 
buf˘l_wÆk_öô
, 
umem_wÆk_°ï
, 
umem_wÆk_föi
 },

377 
buf˘l_hi°‹y_wÆk_öô
, 
buf˘l_hi°‹y_wÆk_°ï
,

378 
buf˘l_hi°‹y_wÆk_föi
 },

380 
‰ì˘l_wÆk_öô
, 
umem_wÆk_°ï
, 
umem_wÆk_föi
 },

382 
‰ìdby_wÆk_öô
, 
Ælocdby_wÆk_°ï
, 
Ælocdby_wÆk_föi
 },

384 
‰ìmem_wÆk_öô
, 
umem_wÆk_°ï
, 
umem_wÆk_föi
 },

386 
umem_wÆk_öô
, 
umem_wÆk_°ï
, 
umem_wÆk_föi
 },

388 
umem_˝u_wÆk_öô
, 
umem_˝u_wÆk_°ï
, 
umem_˝u_wÆk_föi
 },

390 
umem_˝u_ˇche_wÆk_öô
, 
umem_˝u_ˇche_wÆk_°ï
, 
NULL
 },

392 
umem_hash_wÆk_öô
, 
umem_hash_wÆk_°ï
, 
umem_hash_wÆk_föi
 },

394 
umem_log_wÆk_öô
, 
umem_log_wÆk_°ï
, 
umem_log_wÆk_föi
 },

396 
umem_¶ab_wÆk_öô
, 
umem_¶ab_wÆk_°ï
, 
NULL
 },

399 
umem_¶ab_wÆk_∑πül_öô
, 
umem_¶ab_wÆk_°ï
, 
NULL
 },

401 
vmem_wÆk_öô
, 
vmem_wÆk_°ï
, 
vmem_wÆk_föi
 },

403 
vmem_Æloc_wÆk_öô
, 
vmem_£g_wÆk_°ï
, 
vmem_£g_wÆk_föi
 },

405 
vmem_‰ì_wÆk_öô
, 
vmem_£g_wÆk_°ï
, 
vmem_£g_wÆk_föi
 },

407 
vmem_wÆk_öô
, 
vmem_po°fix_wÆk_°ï
, 
vmem_wÆk_föi
 },

409 
vmem_£g_wÆk_öô
, 
vmem_£g_wÆk_°ï
, 
vmem_£g_wÆk_föi
 },

411 
vmem_•™_wÆk_öô
, 
vmem_£g_wÆk_°ï
, 
vmem_£g_wÆk_föi
 },

413 #i‚de‡
_KMDB


416 
Àaky_wÆk_öô
, 
Àaky_wÆk_°ï
, 
Àaky_wÆk_föi
 },

418 
Àaky_wÆk_öô
, 
Àaky_buf_wÆk_°ï
, 
Àaky_wÆk_föi
 },

421 { 
NULL
 }

424 c⁄° 
mdb_modöfo_t
 
	gmodöfo
 = {
MDB_API_VERSION
, 
dcmds
, 
wÆkîs
};

426 c⁄° 
mdb_modöfo_t
 *

427 
	$_mdb_öô
()

429 i‡(
	`umem_öô
() != 0)

430  (
NULL
);

432  (&
modöfo
);

433 
	}
}

436 
	$_mdb_föi
()

438 #i‚de‡
_KMDB


439 
	`Àaky_˛ónup
(1);

441 
	}
}

	@tools/misc.c

26 #¥agm®
idít
 "%Z%%M% %I% %E% SMI"

28 
	~"misc.h
"

30 
	#UMEM_OBJNAME
 "libumem.so"

	)

32 
	gumem_debug_Àvñ
 = 0;

33 
	gumem_is_°™dÆ⁄e
 = 0;

37 
	$umem_debug
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
¨gc
, c⁄° 
mdb_¨g_t
 *
¨gv
)

39 
umem_debug_Àvñ
 ^= 1;

41 
	`mdb_¥ötf
("umem: debugging isÇow %s\n",

42 
umem_debug_Àvñ
 ? "on" : "off");

44  (
DCMD_OK
);

45 
	}
}

59 
	$umem_£t_°™dÆ⁄e
()

61 
GElf_Sym
 
sym
;

62 
ªady
;

64 i‡(
	`mdb_lookup_by_obj
(
UMEM_OBJNAME
, "umem_Æloc", &
sym
) == 0)

65 
umem_is_°™dÆ⁄e
 = 0;

66 i‡(
	`mdb_lookup_by_obj
(
MDB_OBJ_EXEC
, "umem_Æloc", &
sym
) == 0)

67 
umem_is_°™dÆ⁄e
 = 1;

75 i‡(
	`umem_ªadv¨
(&
ªady
, "umem_ready") == -1)

78 
	}
}

80 
ssize_t


81 
	$umem_lookup_by_«me
(c⁄° *
«me
, 
GElf_Sym
 *
sym
)

83  (
	`mdb_lookup_by_obj
((
umem_is_°™dÆ⁄e
 ? 
MDB_OBJ_EXEC
 :

84 
UMEM_OBJNAME
), 
«me
, 
sym
));

85 
	}
}

88 
ssize_t


89 
	$umem_ªadv¨
(*
buf
, c⁄° *
«me
)

91 
GElf_Sym
 
sym
;

93 i‡(
	`umem_lookup_by_«me
(
«me
, &
sym
))

96 i‡(
	`mdb_vªad
(
buf
, 
sym
.
°_size
, (
uöçå_t
)sym.
°_vÆue
)

97 =
sym
.
°_size
)

98  ((
ssize_t
)
sym
.
°_size
);

101 
	}
}

104 
	$is_umem_sym
(c⁄° *
sym
, c⁄° *
¥efix
)

106 *
tick_p
 = 
	`°ºchr
(
sym
, '`');

108  (
	`°∫cmp
(
sym
, "libumem", 7Ë=0 && 
tick_p
 !
NULL
 &&

109 
	`°∫cmp
(
tick_p
 + 1, 
¥efix
, 
	`°æí
(prefix)) == 0);

110 
	}
}

	@tools/misc.h

26 #i‚def 
_MDBMOD_MISC_H


27 
	#_MDBMOD_MISC_H


	)

29 #¥agm®
idít
 "%Z%%M% %I% %E% SMI"

31 
	~<mdb/mdb_mod≠i.h
>

33 #ifde‡
__˝lu•lus


37 
	#off£tof
(
s
, 
m
Ë((
size_t
)(&(((†*)0)->m)))

	)

39 
umem_debug
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

41 
umem_£t_°™dÆ⁄e
();

42 
ssize_t
 
umem_lookup_by_«me
(c⁄° *, 
GElf_Sym
 *);

43 
ssize_t
 
umem_ªadv¨
(*, const *);

48 
is_umem_sym
(const *, const *);

50 
	#d¥ötf
(
x
Ëi‡(
umem_debug_Àvñ
) { \

51 
	`mdb_¥ötf
("umem debug: "); \

53 
mdb_¥ötf
 
x
 ;\

54 }

	)

56 
	#d¥ötf_c⁄t
(
x
Ëi‡(
umem_debug_Àvñ
) { \

58 
mdb_¥ötf
 
x
 ;\

59 }

	)

61 
umem_debug_Àvñ
;

63 #ifde‡
__˝lu•lus


	@tools/proc_kludges.c

27 #¥agm®
idít
 "%Z%%M% %I% %E% SMI"

29 
	~<mdb/mdb_mod≠i.h
>

30 
	~<sys/machñf.h
>

32 
	~<lib¥oc.h
>

33 
	~<°dio.h
>

35 
	~"¥oc_kludges.h
"

37 
	s¥ockuldge_m≠pögs
 {

38 
ps_¥och™dÀ
 *
	mpkm_Pr
;

40 
uöt_t
 
	mpkm_idx
;

42 
uöt_t
 
	mpkm_cou¡
;

43 
uöt_t
 
	mpkm_max
;

45 
¥m≠_t
 *
	mpkm_m≠pögs
;

47 
uöt_t
 
	mpkm_ﬁd_max
;

48 
¥m≠_t
 *
	mpkm_ﬁd_m≠pögs
;

49 } 
	t¥ockludge_m≠pögs_t
;

53 
	$¥ockludge_m≠pögs_ôî
(
¥ockludge_m≠pögs_t
 *
pkm
, c⁄° 
¥m≠_t
 *
pmp
,

54 c⁄° *
obje˘_«me
)

56 i‡(
pkm
->
pkm_cou¡
 >pkm->
pkm_max
) {

57 
s
 = 
pkm
->
pkm_max
 ?Ökm->pkm_max * 2 : 16;

59 
pkm
->
pkm_ﬁd_max
 =Ökm->
pkm_max
;

60 
pkm
->
pkm_ﬁd_m≠pögs
 =Ökm->
pkm_m≠pögs
;

61 
pkm
->
pkm_max
 = 
s
;

62 
pkm
->
pkm_m≠pögs
 = 
	`mdb_Æloc
( (
¥m≠_t
Ë* 
s
, 
UM_SLEEP
);

64 
	`bc›y
(
pkm
->
pkm_ﬁd_m≠pögs
,Ökm->
pkm_m≠pögs
,

65  (
¥m≠_t
Ë* 
pkm
->
pkm_ﬁd_max
);

67 
	`mdb_‰ì
(
pkm
->
pkm_ﬁd_m≠pögs
,

68  (
¥m≠_t
Ë* 
pkm
->
pkm_ﬁd_max
);

70 
pkm
->
pkm_ﬁd_m≠pögs
 = 
NULL
;

71 
pkm
->
pkm_ﬁd_max
 = 0;

73 
	`bc›y
(
pmp
, &
pkm
->
pkm_m≠pögs
[pkm->
pkm_cou¡
++],  (
¥m≠_t
));

76 
	}
}

79 
	$¥ockludge_m≠pögs_wÆk_öô
(
mdb_wÆk_°©e_t
 *
mws
)

81 
ps_¥och™dÀ
 *
Pr
;

82 
rc
;

84 
¥ockludge_m≠pögs_t
 *
pkm
;

86 i‡(
	`mdb_gë_xd©a
("psh™dÀ", &
Pr
,  (Pr)) == -1) {

87 
	`mdb_w¨n
("couldn'tÑeadÖshandle xdata");

88  (
WALK_ERR
);

91 
pkm
 = 
	`mdb_zÆloc
( (
¥ockludge_m≠pögs_t
), 
UM_SLEEP
);

92 
pkm
->
pkm_Pr
 = 
Pr
;

93 
mws
->
wÆk_d©a
 = 
pkm
;

95 
rc
 = 
	`Pm≠pög_ôî
(
Pr
, (
¥oc_m≠_f
 *)
¥ockludge_m≠pögs_ôî
, 
pkm
);

96 i‡(
rc
 != 0) {

97 
	`mdb_w¨n
("Pmapping_iter failed");

99 
	`¥ockludge_m≠pögs_wÆk_föi
(
mws
);

100  (
WALK_ERR
);

102  (
WALK_NEXT
);

103 
	}
}

106 
	$¥ockludge_m≠pögs_wÆk_°ï
(
mdb_wÆk_°©e_t
 *
w•
)

108 
¥ockludge_m≠pögs_t
 *
pkm
 = 
w•
->
wÆk_d©a
;

109 
°©us
;

111 i‡(
pkm
->
pkm_idx
 >pkm->
pkm_cou¡
)

112  (
WALK_DONE
);

114 
°©us
 = 
w•
->
	`wÆk_ˇŒback
(0, &
pkm
->
pkm_m≠pögs
[pkm->
pkm_idx
++],

115 
w•
->
wÆk_cbd©a
);

117  (
°©us
);

118 
	}
}

121 
	$¥ockludge_m≠pögs_wÆk_föi
(
mdb_wÆk_°©e_t
 *
w•
)

123 
¥ockludge_m≠pögs_t
 *
pkm
 = 
w•
->
wÆk_d©a
;

124 i‡(
pkm
 !
NULL
) {

125 i‡(
pkm
->
pkm_ﬁd_m≠pögs
 !
NULL
) {

126 
	`mdb_‰ì
(
pkm
->
pkm_ﬁd_m≠pögs
,

127  (
¥m≠_t
Ë* 
pkm
->
pkm_ﬁd_max
);

129 i‡(
pkm
->
pkm_m≠pögs
 &&

130 
pkm
->
pkm_m≠pögs
 !pkm->
pkm_ﬁd_m≠pögs
) {

131 
	`mdb_‰ì
(
pkm
->
pkm_m≠pögs
,

132  (
¥m≠_t
Ë* 
pkm
->
pkm_max
);

134 
	`mdb_‰ì
(
pkm
,  (
¥ockludge_m≠pögs_t
));

136 
	}
}

138 
	gadd_cou¡
 = 0;

141 
	$¥ockludge_add_wÆkîs
()

143 
mdb_wÆkî_t
 
w
;

145 i‡(
add_cou¡
++ == 0) {

146 
w
.
wÆk_«me
 = 
KLUDGE_MAPWALK_NAME
;

147 
w
.
wÆk_des¸
 = "kludge: walkÅheÖrocess'Örmap_ts";

148 
w
.
wÆk_öô
 = 
¥ockludge_m≠pögs_wÆk_öô
;

149 
w
.
wÆk_°ï
 = 
¥ockludge_m≠pögs_wÆk_°ï
;

150 
w
.
wÆk_föi
 = 
¥ockludge_m≠pögs_wÆk_föi
;

151 
w
.
wÆk_öô_¨g
 = 
NULL
;

153 i‡(
	`mdb_add_wÆkî
(&
w
) == -1) {

154 
	`mdb_w¨n
("u«bÀÅÿadd wÆkî "
KLUDGE_MAPWALK_NAME
);

157 
	}
}

160 
	$¥ockludge_ªmove_wÆkîs
()

162 i‡(--
add_cou¡
 == 0) {

163 
	`mdb_ªmove_wÆkî
(
KLUDGE_MAPWALK_NAME
);

165 
	}
}

	@tools/proc_kludges.h

27 #i‚def 
_PROC_KLUDGES_H


28 
	#_PROC_KLUDGES_H


	)

30 #¥agm®
idít
 "%Z%%M% %I% %E% SMI"

32 #ifdef 
__˝lu•lus


36 
	#KLUDGE_MAPWALK_NAME
 "__¥ockludge_m≠pögs"

	)

38 
¥ockludge_m≠pögs_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

39 
¥ockludge_m≠pögs_wÆk_°ï
(
mdb_wÆk_°©e_t
 *);

40 
¥ockludge_m≠pögs_wÆk_föi
(
mdb_wÆk_°©e_t
 *);

42 
¥ockludge_add_wÆkîs
();

43 
¥ockludge_ªmove_wÆkîs
();

45 #ifdef 
__˝lu•lus


	@tools/umem.c

26 
	~"umem.h
"

28 
	~<sys/vmem_im∂_u£r.h
>

29 
	~<umem_im∂.h
>

31 
	~<Æloˇ.h
>

32 
	~<limôs.h
>

33 
	~<mdb/mdb_wh©is.h
>

35 
	~"misc.h
"

36 
	~"Àaky.h
"

37 
	~"di°.h
"

39 
	~"umem_∑gesize.h
"

41 
	#UM_ALLOCATED
 0x1

	)

42 
	#UM_FREE
 0x2

	)

43 
	#UM_BUFCTL
 0x4

	)

44 
	#UM_HASH
 0x8

	)

46 
	gumem_ªady
;

48 
	gumem_°ack_dïth_w¨√d
;

49 
uöt32_t
 
	gumem_max_n˝us
;

50 
uöt32_t
 
	gumem_°ack_dïth
;

52 
size_t
 
	gumem_∑gesize
;

54 
	#UMEM_READVAR
(
v¨
) \

55 (
	`umem_ªadv¨
(&(
v¨
), #var) == -1 && \

56 (
	`mdb_w¨n
("ÁûedÅÿªad "#v¨), 1))

	)

59 
	$umem_upd©e_v¨übÀs
()

61 
size_t
 
∑gesize
;

67 i‡(
	`umem_£t_°™dÆ⁄e
() == -1) {

68 
umem_ªady
 = 0;

76 i‡(
	`umem_ªadv¨
(&
umem_max_n˝us
, "umem_max_ncpus") == -1 &&

77 
	`umem_ªadv¨
(&
umem_max_n˝us
, "max_ncpus") == -1) {

78 
	`mdb_w¨n
("unableÅoÑead umem_max_ncpus or max_ncpus");

81 i‡(
	`UMEM_READVAR
(
umem_ªady
))

83 i‡(
	`UMEM_READVAR
(
umem_°ack_dïth
))

85 i‡(
	`UMEM_READVAR
(
∑gesize
))

88 i‡(
umem_°ack_dïth
 > 
UMEM_MAX_STACK_DEPTH
) {

89 i‡(
umem_°ack_dïth_w¨√d
 == 0) {

90 
	`mdb_w¨n
("umem_stack_depth corrupted (%d > %d)\n",

91 
umem_°ack_dïth
, 
UMEM_MAX_STACK_DEPTH
);

92 
umem_°ack_dïth_w¨√d
 = 1;

94 
umem_°ack_dïth
 = 0;

97 
umem_∑gesize
 = 
∑gesize
;

100 
	}
}

104 
	$umem_öô_wÆkîs
(
uöçå_t
 
addr
, c⁄° 
umem_ˇche_t
 *
c
, *
ign‹ed
)

106 
mdb_wÆkî_t
 
w
;

107 
des¸
[64];

109 (Ë
	`mdb_¢¥ötf
(
des¸
,  (descr),

110 "wÆkÅhê%†ˇche", 
c
->
ˇche_«me
);

112 
w
.
wÆk_«me
 = 
c
->
ˇche_«me
;

113 
w
.
wÆk_des¸
 = 
des¸
;

114 
w
.
wÆk_öô
 = 
umem_wÆk_öô
;

115 
w
.
wÆk_°ï
 = 
umem_wÆk_°ï
;

116 
w
.
wÆk_föi
 = 
umem_wÆk_föi
;

117 
w
.
wÆk_öô_¨g
 = (*)
addr
;

119 i‡(
	`mdb_add_wÆkî
(&
w
) == -1)

120 
	`mdb_w¨n
("ÁûedÅÿadd %†wÆkî", 
c
->
ˇche_«me
);

122  (
WALK_NEXT
);

123 
	}
}

127 
	$umem_°©ech™ge_cb
(*
¨g
)

129 
bìn_ªady
 = 0;

131 #i‚de‡
_KMDB


132 
	`Àaky_˛ónup
(1);

135 i‡(
	`umem_upd©e_v¨übÀs
() == -1)

138 i‡(
bìn_ªady
)

141 i‡(
umem_ªady
 !
UMEM_READY
)

144 
bìn_ªady
 = 1;

145 (Ë
	`mdb_wÆk
("umem_ˇche", (
mdb_wÆk_cb_t
)
umem_öô_wÆkîs
, 
NULL
);

146 
	}
}

149 
	$umem_ab‹t_mesßges
()

151 *
umem_îr‹_buf„r
;

152 
uöt_t
 
umem_îr‹_begö
;

153 
GElf_Sym
 
sym
;

154 
size_t
 
bufsize
;

156 i‡(
	`UMEM_READVAR
(
umem_îr‹_begö
))

157  (
DCMD_ERR
);

159 i‡(
	`umem_lookup_by_«me
("umem_îr‹_buf„r", &
sym
) == -1) {

160 
	`mdb_w¨n
("unableÅoÜook up umem_error_buffer");

161  (
DCMD_ERR
);

164 
bufsize
 = (
size_t
)
sym
.
°_size
;

166 
umem_îr‹_buf„r
 = 
	`mdb_Æloc
(
bufsize
+1, 
UM_SLEEP
 | 
UM_GC
);

168 i‡(
	`mdb_vªad
(
umem_îr‹_buf„r
, 
bufsize
, (
uöçå_t
)
sym
.
°_vÆue
)

169 !
bufsize
) {

170 
	`mdb_w¨n
("unableÅoÑead umem_error_buffer");

171  (
DCMD_ERR
);

174 
umem_îr‹_buf„r
[
bufsize
] = 0;

176 i‡((
umem_îr‹_begö
 % 
bufsize
) == 0)

177 
	`mdb_¥ötf
("%s\n", 
umem_îr‹_buf„r
);

179 
umem_îr‹_buf„r
[(
umem_îr‹_begö
 % 
bufsize
) - 1] = 0;

180 
	`mdb_¥ötf
("%s%s\n",

181 &
umem_îr‹_buf„r
[
umem_îr‹_begö
 % 
bufsize
],

182 
umem_îr‹_buf„r
);

185  (
DCMD_OK
);

186 
	}
}

189 
	$umem_log_°©us
(c⁄° *
«me
, 
umem_log_hódî_t
 *
vÆ
)

191 
umem_log_hódî_t
 
my_lh
;

192 
uöçå_t
 
pos
 = (uöçå_t)
vÆ
;

193 
size_t
 
size
;

195 i‡(
pos
 =
NULL
)

198 i‡(
	`mdb_vªad
(&
my_lh
,  (
umem_log_hódî_t
), 
pos
) == -1) {

199 
	`mdb_w¨n
("\nunableÅoÑead umem_%s_logÖointer %p",

200 
«me
, 
pos
);

204 
size
 = 
my_lh
.
lh_chunksize
 * my_lh.
lh_nchunks
;

206 i‡(
size
 % (1024 * 1024) == 0)

207 
	`mdb_¥ötf
("%s=%dm ", 
«me
, 
size
 / (1024 * 1024));

208 i‡(
size
 % 1024 == 0)

209 
	`mdb_¥ötf
("%s=%dk ", 
«me
, 
size
 / 1024);

211 
	`mdb_¥ötf
("%s=%d ", 
«me
, 
size
);

212 
	}
}

214 
	sumem_debug_Êags
 {

215 c⁄° *
	mudf_«me
;

216 
uöt_t
 
	mudf_Êags
;

217 
uöt_t
 
	mudf_˛ór
;

218 } 
	tumem_debug_Êags_t
;

220 
umem_debug_Êags_t
 
	gumem_°©us_Êags
[] = {

221 { "øndom", 
UMF_RANDOMIZE
, 
UMF_RANDOM
 },

222 { "deÁu…", 
UMF_AUDIT
 | 
UMF_DEADBEEF
 | 
UMF_REDZONE
 | 
UMF_CONTENTS
 },

223 { "audô", 
UMF_AUDIT
 },

224 { "gu¨ds", 
UMF_DEADBEEF
 | 
UMF_REDZONE
 },

225 { "nosig«l", 
UMF_CHECKSIGNAL
 },

226 { "fúewÆl", 
UMF_FIREWALL
 },

227 { "lôe", 
UMF_LITE
 },

228 { 
NULL
 }

233 
	$umem_°©us
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
ac
, c⁄° 
mdb_¨g_t
 *
¨gv
)

235 
umem_loggög
;

237 
umem_log_hódî_t
 *
umem_å™ß˘i⁄_log
;

238 
umem_log_hódî_t
 *
umem_c⁄ã¡_log
;

239 
umem_log_hódî_t
 *
umem_Áûuª_log
;

240 
umem_log_hódî_t
 *
umem_¶ab_log
;

242 
	`mdb_¥ötf
("Status:\t\t%s\n",

243 
umem_ªady
 =
UMEM_READY_INIT_FAILED
 ? "initialization failed" :

244 
umem_ªady
 =
UMEM_READY_STARTUP
 ? "uninitialized" :

245 
umem_ªady
 =
UMEM_READY_INITING
 ? "initialization inÖrocess" :

246 
umem_ªady
 =
UMEM_READY
 ? "readyándáctive" :

247 
umem_ªady
 == 0 ? "notÜoaded intoáddress space" :

250 i‡(
umem_ªady
 == 0)

251  (
DCMD_OK
);

253 
	`mdb_¥ötf
("C⁄cuºícy:\t%d\n", 
umem_max_n˝us
);

255 i‡(
	`UMEM_READVAR
(
umem_loggög
))

256 
îr
;

257 i‡(
	`UMEM_READVAR
(
umem_å™ß˘i⁄_log
))

258 
îr
;

259 i‡(
	`UMEM_READVAR
(
umem_c⁄ã¡_log
))

260 
îr
;

261 i‡(
	`UMEM_READVAR
(
umem_Áûuª_log
))

262 
îr
;

263 i‡(
	`UMEM_READVAR
(
umem_¶ab_log
))

264 
îr
;

266 
	`mdb_¥ötf
("Logs:\t\t");

267 
	`umem_log_°©us
("å™ß˘i⁄", 
umem_å™ß˘i⁄_log
);

268 
	`umem_log_°©us
("c⁄ã¡", 
umem_c⁄ã¡_log
);

269 
	`umem_log_°©us
("Áû", 
umem_Áûuª_log
);

270 
	`umem_log_°©us
("¶ab", 
umem_¶ab_log
);

271 i‡(!
umem_loggög
)

272 
	`mdb_¥ötf
("(inactive)");

273 
	`mdb_¥ötf
("\n");

275 
	`mdb_¥ötf
("Message buffer:\n");

276  (
	`umem_ab‹t_mesßges
());

278 
îr
:

279 
	`mdb_¥ötf
("Message buffer:\n");

280 (Ë
	`umem_ab‹t_mesßges
();

281  (
DCMD_ERR
);

282 
	}
}

285 
uöçå_t
 
	mucw_fú°
;

286 
uöçå_t
 
	mucw_cuºít
;

287 } 
	tumem_ˇche_wÆk_t
;

290 
	$umem_ˇche_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

292 
umem_ˇche_wÆk_t
 *
ucw
;

293 
umem_ˇche_t
 
c
;

294 
uöçå_t
 
˝
;

295 
GElf_Sym
 
sym
;

297 i‡(
	`umem_lookup_by_«me
("umem_nuŒ_ˇche", &
sym
) == -1) {

298 
	`mdb_w¨n
("couldn't find umem_null_cache");

299  (
WALK_ERR
);

302 
˝
 = (
uöçå_t
)
sym
.
°_vÆue
;

304 i‡(
	`mdb_vªad
(&
c
,  (
umem_ˇche_t
), 
˝
) == -1) {

305 
	`mdb_w¨n
("couldn'àªad cachê© %p", 
˝
);

306  (
WALK_ERR
);

309 
ucw
 = 
	`mdb_Æloc
( (
umem_ˇche_wÆk_t
), 
UM_SLEEP
);

311 
ucw
->
ucw_fú°
 = 
˝
;

312 
ucw
->
ucw_cuºít
 = (
uöçå_t
)
c
.
ˇche_√xt
;

313 
w•
->
wÆk_d©a
 = 
ucw
;

315  (
WALK_NEXT
);

316 
	}
}

319 
	$umem_ˇche_wÆk_°ï
(
mdb_wÆk_°©e_t
 *
w•
)

321 
umem_ˇche_wÆk_t
 *
ucw
 = 
w•
->
wÆk_d©a
;

322 
umem_ˇche_t
 
c
;

323 
°©us
;

325 i‡(
	`mdb_vªad
(&
c
,  (
umem_ˇche_t
), 
ucw
->
ucw_cuºít
) == -1) {

326 
	`mdb_w¨n
("couldn'àªad cachê© %p", 
ucw
->
ucw_cuºít
);

327  (
WALK_DONE
);

330 
°©us
 = 
w•
->
	`wÆk_ˇŒback
(
ucw
->
ucw_cuºít
, &
c
, w•->
wÆk_cbd©a
);

332 i‡((
ucw
->
ucw_cuºít
 = (
uöçå_t
)
c
.
ˇche_√xt
Ë=ucw->
ucw_fú°
)

333  (
WALK_DONE
);

335  (
°©us
);

336 
	}
}

339 
	$umem_ˇche_wÆk_föi
(
mdb_wÆk_°©e_t
 *
w•
)

341 
umem_ˇche_wÆk_t
 *
ucw
 = 
w•
->
wÆk_d©a
;

342 
	`mdb_‰ì
(
ucw
,  (
umem_ˇche_wÆk_t
));

343 
	}
}

346 
umem_˝u_t
 *
	mucw_˝us
;

347 
uöt32_t
 
	mucw_cuºít
;

348 
uöt32_t
 
	mucw_max
;

349 } 
	tumem_˝u_wÆk_°©e_t
;

352 
	$umem_˝u_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

354 
umem_˝u_t
 *
umem_˝us
;

356 
umem_˝u_wÆk_°©e_t
 *
ucw
;

358 i‡(
	`umem_ªadv¨
(&
umem_˝us
, "umem_cpus") == -1) {

359 
	`mdb_w¨n
("failedÅoÑead 'umem_cpus'");

360  (
WALK_ERR
);

363 
ucw
 = 
	`mdb_Æloc
( (*ucw), 
UM_SLEEP
);

365 
ucw
->
ucw_˝us
 = 
umem_˝us
;

366 
ucw
->
ucw_cuºít
 = 0;

367 
ucw
->
ucw_max
 = 
umem_max_n˝us
;

369 
w•
->
wÆk_d©a
 = 
ucw
;

370  (
WALK_NEXT
);

371 
	}
}

374 
	$umem_˝u_wÆk_°ï
(
mdb_wÆk_°©e_t
 *
w•
)

376 
umem_˝u_t
 
˝u
;

377 
umem_˝u_wÆk_°©e_t
 *
ucw
 = 
w•
->
wÆk_d©a
;

379 
uöçå_t
 
ˇddr
;

381 i‡(
ucw
->
ucw_cuºít
 >ucw->
ucw_max
)

382  (
WALK_DONE
);

384 
ˇddr
 = (
uöçå_t
)&(
ucw
->
ucw_˝us
[ucw->
ucw_cuºít
]);

386 i‡(
	`mdb_vªad
(&
˝u
,  (
umem_˝u_t
), 
ˇddr
) == -1) {

387 
	`mdb_w¨n
("ÁûedÅÿªad cpu %d", 
ucw
->
ucw_cuºít
);

388  (
WALK_ERR
);

391 
ucw
->
ucw_cuºít
++;

393  (
w•
->
	`wÆk_ˇŒback
(
ˇddr
, &
˝u
, w•->
wÆk_cbd©a
));

394 
	}
}

397 
	$umem_˝u_wÆk_föi
(
mdb_wÆk_°©e_t
 *
w•
)

399 
umem_˝u_wÆk_°©e_t
 *
ucw
 = 
w•
->
wÆk_d©a
;

401 
	`mdb_‰ì
(
ucw
,  (*ucw));

402 
	}
}

405 
	$umem_˝u_ˇche_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

407 i‡(
w•
->
wÆk_addr
 =
NULL
) {

408 
	`mdb_w¨n
("umem_cpu_cache doesn't support global walks");

409  (
WALK_ERR
);

412 i‡(
	`mdb_œyîed_wÆk
("umem_˝u", 
w•
) == -1) {

413 
	`mdb_w¨n
("couldn't walk 'umem_cpu'");

414  (
WALK_ERR
);

417 
w•
->
wÆk_d©a
 = (*)w•->
wÆk_addr
;

419  (
WALK_NEXT
);

420 
	}
}

423 
	$umem_˝u_ˇche_wÆk_°ï
(
mdb_wÆk_°©e_t
 *
w•
)

425 
uöçå_t
 
ˇddr
 = (uöçå_t)
w•
->
wÆk_d©a
;

426 c⁄° 
umem_˝u_t
 *
˝u
 = 
w•
->
wÆk_œyî
;

427 
umem_˝u_ˇche_t
 
cc
;

429 
ˇddr
 +
˝u
->
˝u_ˇche_off£t
;

431 i‡(
	`mdb_vªad
(&
cc
,  (
umem_˝u_ˇche_t
), 
ˇddr
) == -1) {

432 
	`mdb_w¨n
("couldn'àªad umem_˝u_ˇchê© %p", 
ˇddr
);

433  (
WALK_ERR
);

436  (
w•
->
	`wÆk_ˇŒback
(
ˇddr
, &
cc
, w•->
wÆk_cbd©a
));

437 
	}
}

440 
	$umem_¶ab_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

442 
uöçå_t
 
ˇddr
 = 
w•
->
wÆk_addr
;

443 
umem_ˇche_t
 
c
;

445 i‡(
ˇddr
 =
NULL
) {

446 
	`mdb_w¨n
("umem_slab doesn't support global walks\n");

447  (
WALK_ERR
);

450 i‡(
	`mdb_vªad
(&
c
,  (c), 
ˇddr
) == -1) {

451 
	`mdb_w¨n
("couldn'àªad umem_ˇchê© %p", 
ˇddr
);

452  (
WALK_ERR
);

455 
w•
->
wÆk_d©a
 =

456 (*)(
ˇddr
 + 
	`off£tof
(
umem_ˇche_t
, 
ˇche_nuŒ¶ab
));

457 
w•
->
wÆk_addr
 = (
uöçå_t
)
c
.
ˇche_nuŒ¶ab
.
¶ab_√xt
;

459  (
WALK_NEXT
);

460 
	}
}

463 
	$umem_¶ab_wÆk_∑πül_öô
(
mdb_wÆk_°©e_t
 *
w•
)

465 
uöçå_t
 
ˇddr
 = 
w•
->
wÆk_addr
;

466 
umem_ˇche_t
 
c
;

468 i‡(
ˇddr
 =
NULL
) {

469 
	`mdb_w¨n
("umem_slab_partial doesn't support global walks\n");

470  (
WALK_ERR
);

473 i‡(
	`mdb_vªad
(&
c
,  (c), 
ˇddr
) == -1) {

474 
	`mdb_w¨n
("couldn'àªad umem_ˇchê© %p", 
ˇddr
);

475  (
WALK_ERR
);

478 
w•
->
wÆk_d©a
 =

479 (*)(
ˇddr
 + 
	`off£tof
(
umem_ˇche_t
, 
ˇche_nuŒ¶ab
));

480 
w•
->
wÆk_addr
 = (
uöçå_t
)
c
.
ˇche_‰ìli°
;

490 i‡((
uöçå_t
)
w•
->
wÆk_d©a
 =w•->
wÆk_addr
)

491 
w•
->
wÆk_addr
 = (
uöçå_t
)
c
.
ˇche_nuŒ¶ab
.
¶ab_¥ev
;

493  (
WALK_NEXT
);

494 
	}
}

497 
	$umem_¶ab_wÆk_°ï
(
mdb_wÆk_°©e_t
 *
w•
)

499 
umem_¶ab_t
 
s
;

500 
uöçå_t
 
addr
 = 
w•
->
wÆk_addr
;

501 
uöçå_t
 
ßddr
 = (uöçå_t)
w•
->
wÆk_d©a
;

502 
uöçå_t
 
ˇddr
 = 
ßddr
 - 
	`off£tof
(
umem_ˇche_t
, 
ˇche_nuŒ¶ab
);

504 i‡(
addr
 =
ßddr
)

505  (
WALK_DONE
);

507 i‡(
	`mdb_vªad
(&
s
,  (s), 
addr
) == -1) {

508 
	`mdb_w¨n
("ÁûedÅÿªad sœbáà%p", 
w•
->
wÆk_addr
);

509  (
WALK_ERR
);

512 i‡((
uöçå_t
)
s
.
¶ab_ˇche
 !
ˇddr
) {

513 
	`mdb_w¨n
("slab %p isn't in cache %p (in cache %p)\n",

514 
addr
, 
ˇddr
, 
s
.
¶ab_ˇche
);

515  (
WALK_ERR
);

518 
w•
->
wÆk_addr
 = (
uöçå_t
)
s
.
¶ab_√xt
;

520  (
w•
->
	`wÆk_ˇŒback
(
addr
, &
s
, w•->
wÆk_cbd©a
));

521 
	}
}

524 
	$umem_ˇche
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
ac
, c⁄° 
mdb_¨g_t
 *
¨gv
)

526 
umem_ˇche_t
 
c
;

528 i‡(!(
Êags
 & 
DCMD_ADDRSPEC
)) {

529 i‡(
	`mdb_wÆk_dcmd
("umem_ˇche", "umem_ˇche", 
ac
, 
¨gv
) == -1) {

530 
	`mdb_w¨n
("can't walk umem_cache");

531  (
DCMD_ERR
);

533  (
DCMD_OK
);

536 i‡(
	`DCMD_HDRSPEC
(
Êags
))

537 
	`mdb_¥ötf
("%-?s %-25s %4s %8s %8s %8s\n", "ADDR", "NAME",

540 i‡(
	`mdb_vªad
(&
c
,  (c), 
addr
) == -1) {

541 
	`mdb_w¨n
("couldn'àªad umem_ˇchê© %p", 
addr
);

542  (
DCMD_ERR
);

545 
	`mdb_¥ötf
("%0?∞%-25†%04x %08x %8ld %8Œd\n", 
addr
, 
c
.
ˇche_«me
,

546 
c
.
ˇche_Êags
, c.
ˇche_cÊags
, c.
ˇche_bufsize
, c.
ˇche_bu·ŸÆ
);

548  (
DCMD_OK
);

549 
	}
}

552 
	$addrcmp
(c⁄° *
lhs
, c⁄° *
rhs
)

554 
uöçå_t
 
p1
 = *((uöçå_à*)
lhs
);

555 
uöçå_t
 
p2
 = *((uöçå_à*)
rhs
);

557 i‡(
p1
 < 
p2
)

559 i‡(
p1
 > 
p2
)

562 
	}
}

565 
	$buf˘lcmp
(c⁄° 
umem_buf˘l_audô_t
 **
lhs
, c⁄° umem_buf˘l_audô_à**
rhs
)

567 c⁄° 
umem_buf˘l_audô_t
 *
b˝1
 = *
lhs
;

568 c⁄° 
umem_buf˘l_audô_t
 *
b˝2
 = *
rhs
;

570 i‡(
b˝1
->
bc_time°amp
 > 
b˝2
->bc_timestamp)

573 i‡(
b˝1
->
bc_time°amp
 < 
b˝2
->bc_timestamp)

577 
	}
}

579 
	sumem_hash_wÆk
 {

580 
uöçå_t
 *
	mumhw_èbÀ
;

581 
size_t
 
	mumhw_√Àms
;

582 
size_t
 
	mumhw_pos
;

583 
umem_buf˘l_t
 
	mumhw_cur
;

584 } 
	tumem_hash_wÆk_t
;

587 
	$umem_hash_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

589 
umem_hash_wÆk_t
 *
umhw
;

590 
uöçå_t
 *
hash
;

591 
umem_ˇche_t
 
c
;

592 
uöçå_t
 
haddr
, 
addr
 = 
w•
->
wÆk_addr
;

593 
size_t
 
√Àms
;

594 
size_t
 
hsize
;

596 i‡(
addr
 =
NULL
) {

597 
	`mdb_w¨n
("umem_hash doesn't support global walks\n");

598  (
WALK_ERR
);

601 i‡(
	`mdb_vªad
(&
c
,  (c), 
addr
) == -1) {

602 
	`mdb_w¨n
("couldn'àªad cachê©ádd∏%p", 
addr
);

603  (
WALK_ERR
);

606 i‡(!(
c
.
ˇche_Êags
 & 
UMF_HASH
)) {

607 
	`mdb_w¨n
("ˇchê%∞d€¢'àhavê®hashÅabÀ\n", 
addr
);

608  (
WALK_DONE
);

611 
umhw
 = 
	`mdb_zÆloc
( (
umem_hash_wÆk_t
), 
UM_SLEEP
);

612 
umhw
->
umhw_cur
.
bc_√xt
 = 
NULL
;

613 
umhw
->
umhw_pos
 = 0;

615 
umhw
->
umhw_√Àms
 = 
√Àms
 = 
c
.
ˇche_hash_mask
 + 1;

616 
hsize
 = 
√Àms
 *  (
uöçå_t
);

617 
haddr
 = (
uöçå_t
)
c
.
ˇche_hash_èbÀ
;

619 
umhw
->
umhw_èbÀ
 = 
hash
 = 
	`mdb_Æloc
(
hsize
, 
UM_SLEEP
);

620 i‡(
	`mdb_vªad
(
hash
, 
hsize
, 
haddr
) == -1) {

621 
	`mdb_w¨n
("ÁûedÅÿªad hashÅabÀáà%p", 
haddr
);

622 
	`mdb_‰ì
(
hash
, 
hsize
);

623 
	`mdb_‰ì
(
umhw
,  (
umem_hash_wÆk_t
));

624  (
WALK_ERR
);

627 
w•
->
wÆk_d©a
 = 
umhw
;

629  (
WALK_NEXT
);

630 
	}
}

633 
	$umem_hash_wÆk_°ï
(
mdb_wÆk_°©e_t
 *
w•
)

635 
umem_hash_wÆk_t
 *
umhw
 = 
w•
->
wÆk_d©a
;

636 
uöçå_t
 
addr
 = 
NULL
;

638 i‡((
addr
 = (
uöçå_t
)
umhw
->
umhw_cur
.
bc_√xt
Ë=
NULL
) {

639 
umhw
->
umhw_pos
 < umhw->
umhw_√Àms
) {

640 i‡((
addr
 = 
umhw
->
umhw_èbÀ
[umhw->
umhw_pos
++]Ë!
NULL
)

644 i‡(
addr
 =
NULL
)

645  (
WALK_DONE
);

647 i‡(
	`mdb_vªad
(&
umhw
->
umhw_cur
,  (
umem_buf˘l_t
), 
addr
) == -1) {

648 
	`mdb_w¨n
("couldn'àªad umem_buf˘l_à©ádd∏%p", 
addr
);

649  (
WALK_ERR
);

652  (
w•
->
	`wÆk_ˇŒback
(
addr
, &
umhw
->
umhw_cur
, w•->
wÆk_cbd©a
));

653 
	}
}

656 
	$umem_hash_wÆk_föi
(
mdb_wÆk_°©e_t
 *
w•
)

658 
umem_hash_wÆk_t
 *
umhw
 = 
w•
->
wÆk_d©a
;

660 i‡(
umhw
 =
NULL
)

663 
	`mdb_‰ì
(
umhw
->
umhw_èbÀ
, umhw->
umhw_√Àms
 *  (
uöçå_t
));

664 
	`mdb_‰ì
(
umhw
,  (
umem_hash_wÆk_t
));

665 
	}
}

672 
	$umem_hash_lookup
(
umem_ˇche_t
 *
˝
, 
uöçå_t
 
ˇddr
, *
buf
, uöçå_à*
out
)

674 
uöçå_t
 
buckë
 = (uöçå_t)
	`UMEM_HASH
(
˝
, 
buf
);

675 
umem_buf˘l_t
 *
b˝
;

676 
umem_buf˘l_t
 
bc
;

678 i‡(
	`mdb_vªad
(&
b˝
,  (
umem_buf˘l_t
 *), 
buckë
) == -1) {

679 
	`mdb_w¨n
("unableÅoÑead hash bucket for %p in cache %p",

680 
buf
, 
ˇddr
);

684 
b˝
 !
NULL
) {

685 i‡(
	`mdb_vªad
(&
bc
,  (
umem_buf˘l_t
),

686 (
uöçå_t
)
b˝
) == -1) {

687 
	`mdb_w¨n
("u«bÀÅÿªad buf˘»© %p", 
b˝
);

690 i‡(
bc
.
bc_addr
 =
buf
) {

691 *
out
 = (
uöçå_t
)
b˝
;

694 
b˝
 = 
bc
.
bc_√xt
;

697 
	`mdb_w¨n
("u«bÀÅÿföd buf˘»f‹ %∞ö cachê%p\n", 
buf
, 
ˇddr
);

699 
	}
}

702 
	$umem_gë_magsize
(c⁄° 
umem_ˇche_t
 *
˝
)

704 
uöçå_t
 
addr
 = (uöçå_t)
˝
->
ˇche_magty≥
;

705 
GElf_Sym
 
mt_sym
;

706 
umem_magty≥_t
 
mt
;

707 
ªs
;

714 i‡((
ªs
 = 
˝
->
ˇche_˝u
[0].
cc_magsize
) != 0 ||

715 (
˝
->
ˇche_Êags
 & 
UMF_NOMAGAZINE
))

716  (
ªs
);

718 i‡(
	`umem_lookup_by_«me
("umem_magty≥", &
mt_sym
) == -1) {

719 
	`mdb_w¨n
("unableÅoÑead 'umem_magtype'");

720 } i‡(
addr
 < 
mt_sym
.
°_vÆue
 ||

721 
addr
 +  (
mt
Ë- 1 > 
mt_sym
.
°_vÆue
 + mt_sym.
°_size
 - 1 ||

722 ((
addr
 - 
mt_sym
.
°_vÆue
Ë%  (
mt
)) != 0) {

723 
	`mdb_w¨n
("cache '%s' has invalid magtypeÖointer (%p)\n",

724 
˝
->
ˇche_«me
, 
addr
);

727 i‡(
	`mdb_vªad
(&
mt
,  (mt), 
addr
) == -1) {

728 
	`mdb_w¨n
("u«bÀÅÿªad magty≥áà%a", 
addr
);

731  (
mt
.
mt_magsize
);

732 
	}
}

736 
	$umem_e°im©e_¶ab
(
uöçå_t
 
addr
, c⁄° 
umem_¶ab_t
 *
•
, 
size_t
 *
e°
)

738 *
e°
 -(
•
->
¶ab_chunks
 - sp->
¶ab_ªf˙t
);

740  (
WALK_NEXT
);

741 
	}
}

747 
size_t


748 
	$umem_e°im©e_Æloˇãd
(
uöçå_t
 
addr
, c⁄° 
umem_ˇche_t
 *
˝
)

750 
magsize
;

751 
size_t
 
ˇche_e°
;

753 
ˇche_e°
 = 
˝
->
ˇche_bu·ŸÆ
;

755 (Ë
	`mdb_pwÆk
("umem_slab_partial",

756 (
mdb_wÆk_cb_t
)
umem_e°im©e_¶ab
, &
ˇche_e°
, 
addr
);

758 i‡((
magsize
 = 
	`umem_gë_magsize
(
˝
)) != 0) {

759 
size_t
 
mag_e°
 = 
˝
->
ˇche_fuŒ
.
ml_tŸÆ
 * 
magsize
;

761 i‡(
ˇche_e°
 >
mag_e°
) {

762 
ˇche_e°
 -
mag_e°
;

764 
	`mdb_w¨n
("cache %p's magazineÜayer holds more buffers "

765 "th™Åhê¶abÜayî.\n", 
addr
);

768  (
ˇche_e°
);

769 
	}
}

771 
	#READMAG_ROUNDS
(
rounds
) { \

772 i‡(
	`mdb_vªad
(
mp
, 
magbsize
, (
uöçå_t
)
ump
) == -1) { \

773 
	`mdb_w¨n
("couldn'àªad magazöê© %p", 
ump
); \

774 
Áû
; \

776 
i
 = 0; i < 
rounds
; i++) { \

777 
magli°
[
mag˙t
++] = 
mp
->
mag_round
[
i
]; \

778 i‡(
mag˙t
 =
magmax
) { \

779 
	`mdb_w¨n
("%d magazinesÉxceeds fudge factor\n", \

780 
mag˙t
); \

781 
Áû
; \

784 }

	)

787 
	$umem_ªad_magazöes
(
umem_ˇche_t
 *
˝
, 
uöçå_t
 
addr
,

788 ***
magli°p
, 
size_t
 *
mag˙ç
, size_à*
magmaxp
, 
Æloc_Êags
)

790 
umem_magazöe_t
 *
ump
, *
mp
;

791 **
magli°
 = 
NULL
;

792 
i
, 
˝u
;

793 
size_t
 
magsize
, 
magmax
, 
magbsize
;

794 
size_t
 
mag˙t
 = 0;

800 
magsize
 = 
	`umem_gë_magsize
(
˝
);

801 i‡(
magsize
 == 0) {

802 *
magli°p
 = 
NULL
;

803 *
mag˙ç
 = 0;

804 *
magmaxp
 = 0;

805  (
WALK_NEXT
);

820 
magmax
 = (
˝
->
ˇche_fuŒ
.
ml_tŸÆ
 + 2 * 
umem_max_n˝us
 + 100Ë* 
magsize
;

821 
magbsize
 = 
	`off£tof
(
umem_magazöe_t
, 
mag_round
[
magsize
]);

823 i‡(
magbsize
 >
PAGESIZE
 / 2) {

824 
	`mdb_w¨n
("magazine size for cache %p unreasonable (%x)\n",

825 
addr
, 
magbsize
);

826  (
WALK_ERR
);

829 
magli°
 = 
	`mdb_Æloc
(
magmax
 *  (*), 
Æloc_Êags
);

830 
mp
 = 
	`mdb_Æloc
(
magbsize
, 
Æloc_Êags
);

831 i‡(
mp
 =
NULL
 || 
magli°
 == NULL)

832 
Áû
;

837 
ump
 = 
˝
->
ˇche_fuŒ
.
ml_li°
; um∞!
NULL
; ) {

838 
	`READMAG_ROUNDS
(
magsize
);

839 
ump
 = 
mp
->
mag_√xt
;

841 i‡(
ump
 =
˝
->
ˇche_fuŒ
.
ml_li°
)

845 
	`d¥ötf
(("cache_fullÜist done\n"));

851 
˝u
 = 0; cpu < 
umem_max_n˝us
; cpu++) {

852 
umem_˝u_ˇche_t
 *
c˝
 = &
˝
->
ˇche_˝u
[
˝u
];

854 
	`d¥ötf
(("reading cpu cache %p\n",

855 (
uöçå_t
)
c˝
 - (uöçå_t)
˝
 + 
addr
));

857 i‡(
c˝
->
cc_rounds
 > 0 &&

858 (
ump
 = 
c˝
->
cc_lﬂded
Ë!
NULL
) {

859 
	`d¥ötf
(("ªadög %dÜﬂdedÑounds\n", 
c˝
->
cc_rounds
));

860 
	`READMAG_ROUNDS
(
c˝
->
cc_rounds
);

863 i‡(
c˝
->
cc_¥ounds
 > 0 &&

864 (
ump
 = 
c˝
->
cc_∂ﬂded
Ë!
NULL
) {

865 
	`d¥ötf
(("reading %dÖreviouslyÜoadedÑounds\n",

866 
c˝
->
cc_¥ounds
));

867 
	`READMAG_ROUNDS
(
c˝
->
cc_¥ounds
);

871 
	`d¥ötf
(("magazöêœyî: %d buf„rs\n", 
mag˙t
));

873 i‡(!(
Æloc_Êags
 & 
UM_GC
))

874 
	`mdb_‰ì
(
mp
, 
magbsize
);

876 *
magli°p
 = 
magli°
;

877 *
mag˙ç
 = 
mag˙t
;

878 *
magmaxp
 = 
magmax
;

880  (
WALK_NEXT
);

882 
Áû
:

883 i‡(!(
Æloc_Êags
 & 
UM_GC
)) {

884 i‡(
mp
)

885 
	`mdb_‰ì
(
mp
, 
magbsize
);

886 i‡(
magli°
)

887 
	`mdb_‰ì
(
magli°
, 
magmax
 *  (*));

889  (
WALK_ERR
);

890 
	}
}

893 
	$umem_wÆk_ˇŒback
(
mdb_wÆk_°©e_t
 *
w•
, 
uöçå_t
 
buf
)

895  (
w•
->
	`wÆk_ˇŒback
(
buf
, 
NULL
, w•->
wÆk_cbd©a
));

896 
	}
}

899 
	$buf˘l_wÆk_ˇŒback
(
umem_ˇche_t
 *
˝
, 
mdb_wÆk_°©e_t
 *
w•
, 
uöçå_t
 
buf
)

901 
umem_buf˘l_audô_t
 *
b
;

902 
	`UMEM_LOCAL_BUFCTL_AUDIT
(&
b
);

908 i‡(!(
˝
->
ˇche_Êags
 & 
UMF_AUDIT
) ||

909 
	`mdb_vªad
(
b
, 
UMEM_BUFCTL_AUDIT_SIZE
, 
buf
) == -1) {

910 (Ë
	`mem£t
(
b
, 0, 
UMEM_BUFCTL_AUDIT_SIZE
);

911 i‡(
	`mdb_vªad
(
b
,  (
umem_buf˘l_t
), 
buf
) == -1) {

912 
	`mdb_w¨n
("u«bÀÅÿªad buf˘»© %p", 
buf
);

913  (
WALK_ERR
);

917  (
w•
->
	`wÆk_ˇŒback
(
buf
, 
b
, w•->
wÆk_cbd©a
));

918 
	}
}

920 
	sumem_wÆk
 {

921 
	mumw_ty≥
;

923 
	mumw_addr
;

924 
umem_ˇche_t
 *
	mumw_˝
;

925 
size_t
 
	mumw_csize
;

930 **
	mumw_magli°
;

931 
size_t
 
	mumw_max
;

932 
size_t
 
	mumw_cou¡
;

933 
size_t
 
	mumw_pos
;

938 *
	mumw_vÆid
;

939 *
	mumw_uba£
;

940 } 
	tumem_wÆk_t
;

943 
	$umem_wÆk_öô_comm⁄
(
mdb_wÆk_°©e_t
 *
w•
, 
ty≥
)

945 
umem_wÆk_t
 *
umw
;

946 
csize
;

947 
umem_ˇche_t
 *
˝
;

948 
size_t
 
vm_qu™tum
;

950 
size_t
 
magmax
, 
mag˙t
;

951 **
magli°
 = 
NULL
;

952 
uöt_t
 
chunksize
, 
¶absize
;

953 
°©us
 = 
WALK_ERR
;

954 
uöçå_t
 
addr
 = 
w•
->
wÆk_addr
;

955 c⁄° *
œyîed
;

957 
ty≥
 &~
UM_HASH
;

959 i‡(
addr
 =
NULL
) {

960 
	`mdb_w¨n
("umem walk doesn't support global walks\n");

961  (
WALK_ERR
);

964 
	`d¥ötf
(("wÆkög %p\n", 
addr
));

969 
csize
 = 
	`UMEM_CACHE_SIZE
(
umem_max_n˝us
);

970 
˝
 = 
	`mdb_Æloc
(
csize
, 
UM_SLEEP
);

972 i‡(
	`mdb_vªad
(
˝
, 
csize
, 
addr
) == -1) {

973 
	`mdb_w¨n
("couldn'àªad cachê©ádd∏%p", 
addr
);

974 
out2
;

987 i‡(
	`mdb_vªad
(&
vm_qu™tum
,  (vm_quantum),

988 (
uöçå_t
)&
˝
->
ˇche_¨ía
->
vm_qu™tum
) == -1 ||

989 
vm_qu™tum
 == 0 ||

990 (
vm_qu™tum
 & (vm_quantum - 1)) != 0 ||

991 
˝
->
ˇche_¶absize
 < 
vm_qu™tum
 ||

992 
	`P2PHASE
(
˝
->
ˇche_¶absize
, 
vm_qu™tum
) != 0 ||

993 
˝
->
ˇche_chunksize
 == 0 ||

994 
˝
->
ˇche_chunksize
 > cp->
ˇche_¶absize
) {

995 
	`mdb_w¨n
("%∞i†nŸá vÆid umem_ˇche_t\n", 
addr
);

996 
out2
;

999 
	`d¥ötf
(("bu‡tŸÆ i†%d\n", 
˝
->
ˇche_bu·ŸÆ
));

1001 i‡(
˝
->
ˇche_bu·ŸÆ
 == 0) {

1002 
	`mdb_‰ì
(
˝
, 
csize
);

1003  (
WALK_DONE
);

1010 i‡((
ty≥
 & 
UM_BUFCTL
Ë&& !(
˝
->
ˇche_Êags
 & 
UMF_HASH
)) {

1011 
	`d¥ötf
(("bufctlÑequested,Çot UMF_HASH (flags: %p)\n",

1012 
˝
->
ˇche_Êags
));

1013 
	`mdb_‰ì
(
˝
, 
csize
);

1014  (
WALK_DONE
);

1020 i‡(
	`umem_ªad_magazöes
(
˝
, 
addr
, &
magli°
, &
mag˙t
, &
magmax
,

1021 
UM_SLEEP
Ë=
WALK_ERR
)

1022 
out2
;

1028 i‡(
ty≥
 & 
UM_ALLOCATED
)

1029 
	`qs‹t
(
magli°
, 
mag˙t
,  (*), 
addrcmp
);

1031 
w•
->
wÆk_d©a
 = 
umw
 = 
	`mdb_zÆloc
( (
umem_wÆk_t
), 
UM_SLEEP
);

1033 
umw
->
umw_ty≥
 = 
ty≥
;

1034 
umw
->
umw_addr
 = 
addr
;

1035 
umw
->
umw_˝
 = 
˝
;

1036 
umw
->
umw_csize
 = 
csize
;

1037 
umw
->
umw_magli°
 = 
magli°
;

1038 
umw
->
umw_max
 = 
magmax
;

1039 
umw
->
umw_cou¡
 = 
mag˙t
;

1040 
umw
->
umw_pos
 = 0;

1046 i‡((
˝
->
ˇche_Êags
 & 
UMF_HASH
Ë&& (
ty≥
 & 
UM_ALLOCATED
)) {

1047 
œyîed
 = "umem_hash";

1049 
umw
->
umw_ty≥
 |
UM_HASH
;

1056 i‡(
ty≥
 & 
UM_ALLOCATED
)

1057 
œyîed
 = "umem_slab";

1059 
œyîed
 = "umem_slab_partial";

1067 i‡(!(
˝
->
ˇche_Êags
 & 
UMF_HASH
)) {

1068 
chunksize
 = 
˝
->
ˇche_chunksize
;

1069 
¶absize
 = 
˝
->
ˇche_¶absize
;

1071 
umw
->
umw_uba£
 = 
	`mdb_Æloc
(
¶absize
 +

1072  (
umem_buf˘l_t
), 
UM_SLEEP
);

1074 i‡(
ty≥
 & 
UM_ALLOCATED
)

1075 
umw
->
umw_vÆid
 =

1076 
	`mdb_Æloc
(
¶absize
 / 
chunksize
, 
UM_SLEEP
);

1080 
°©us
 = 
WALK_NEXT
;

1082 i‡(
	`mdb_œyîed_wÆk
(
œyîed
, 
w•
) == -1) {

1083 
	`mdb_w¨n
("u«bÀÅÿ°¨àœyîed '%s' wÆk", 
œyîed
);

1084 
°©us
 = 
WALK_ERR
;

1087 
out1
:

1088 i‡(
°©us
 =
WALK_ERR
) {

1089 i‡(
umw
->
umw_vÆid
)

1090 
	`mdb_‰ì
(
umw
->
umw_vÆid
, 
¶absize
 / 
chunksize
);

1092 i‡(
umw
->
umw_uba£
)

1093 
	`mdb_‰ì
(
umw
->
umw_uba£
, 
¶absize
 +

1094  (
umem_buf˘l_t
));

1096 i‡(
umw
->
umw_magli°
)

1097 
	`mdb_‰ì
(
umw
->
umw_magli°
, umw->
umw_max
 *

1098  (
uöçå_t
));

1100 
	`mdb_‰ì
(
umw
,  (
umem_wÆk_t
));

1101 
w•
->
wÆk_d©a
 = 
NULL
;

1104 
out2
:

1105 i‡(
°©us
 =
WALK_ERR
)

1106 
	`mdb_‰ì
(
˝
, 
csize
);

1108  (
°©us
);

1109 
	}
}

1112 
	$umem_wÆk_°ï
(
mdb_wÆk_°©e_t
 *
w•
)

1114 
umem_wÆk_t
 *
umw
 = 
w•
->
wÆk_d©a
;

1115 
ty≥
 = 
umw
->
umw_ty≥
;

1116 
umem_ˇche_t
 *
˝
 = 
umw
->
umw_˝
;

1118 **
magli°
 = 
umw
->
umw_magli°
;

1119 
mag˙t
 = 
umw
->
umw_cou¡
;

1121 
uöçå_t
 
chunksize
, 
¶absize
;

1122 
uöçå_t
 
addr
;

1123 c⁄° 
umem_¶ab_t
 *
•
;

1124 c⁄° 
umem_buf˘l_t
 *
b˝
;

1125 
umem_buf˘l_t
 
bc
;

1127 
chunks
;

1128 *
kba£
;

1129 *
buf
;

1130 
i
, 
ªt
;

1132 *
vÆid
, *
uba£
;

1137 i‡(
ty≥
 & 
UM_HASH
) {

1144 
buf
 = ((c⁄° 
umem_buf˘l_t
 *)
w•
->
wÆk_œyî
)->
bc_addr
;

1146 i‡(
mag˙t
 > 0 &&

1147 
	`b£¨ch
(&
buf
, 
magli°
, 
mag˙t
,  (*),

1148 
addrcmp
Ë!
NULL
)

1149  (
WALK_NEXT
);

1151 i‡(
ty≥
 & 
UM_BUFCTL
)

1152  (
	`buf˘l_wÆk_ˇŒback
(
˝
, 
w•
, w•->
wÆk_addr
));

1154  (
	`umem_wÆk_ˇŒback
(
w•
, (
uöçå_t
)
buf
));

1157 
ªt
 = 
WALK_NEXT
;

1159 
addr
 = 
umw
->
umw_addr
;

1165 i‡((
ty≥
 & 
UM_FREE
Ë&& 
mag˙t
 != 0) {

1166 
umw
->
umw_cou¡
 = 0;

1167 
i
 = 0; i < 
mag˙t
; i++) {

1168 
buf
 = 
magli°
[
i
];

1170 i‡(
ty≥
 & 
UM_BUFCTL
) {

1171 
uöçå_t
 
out
;

1173 i‡(
˝
->
ˇche_Êags
 & 
UMF_BUFTAG
) {

1174 
umem_bu·ag_t
 *
bç
;

1175 
umem_bu·ag_t
 
èg
;

1178 
bç
 = 
	`UMEM_BUFTAG
(
˝
, 
buf
);

1179 i‡(
	`mdb_vªad
(&
èg
,  (tag),

1180 (
uöçå_t
)
bç
) == -1) {

1181 
	`mdb_w¨n
("reading buftag for "

1182 "%∞© %p", 
buf
, 
bç
);

1185 
out
 = (
uöçå_t
)
èg
.
bt_buf˘l
;

1187 i‡(
	`umem_hash_lookup
(
˝
, 
addr
, 
buf
,

1188 &
out
) == -1)

1191 
ªt
 = 
	`buf˘l_wÆk_ˇŒback
(
˝
, 
w•
, 
out
);

1193 
ªt
 = 
	`umem_wÆk_ˇŒback
(
w•
, (
uöçå_t
)
buf
);

1196 i‡(
ªt
 !
WALK_NEXT
)

1197  (
ªt
);

1204 
chunksize
 = 
˝
->
ˇche_chunksize
;

1205 
¶absize
 = 
˝
->
ˇche_¶absize
;

1207 
•
 = 
w•
->
wÆk_œyî
;

1208 
chunks
 = 
•
->
¶ab_chunks
;

1209 
kba£
 = 
•
->
¶ab_ba£
;

1211 
	`d¥ötf
(("kba£ i†%p\n", 
kba£
));

1213 i‡(!(
˝
->
ˇche_Êags
 & 
UMF_HASH
)) {

1214 
vÆid
 = 
umw
->
umw_vÆid
;

1215 
uba£
 = 
umw
->
umw_uba£
;

1217 i‡(
	`mdb_vªad
(
uba£
, 
chunks
 * 
chunksize
,

1218 (
uöçå_t
)
kba£
) == -1) {

1219 
	`mdb_w¨n
("ÁûedÅÿªad sœb c⁄ã¡†© %p", 
kba£
);

1220  (
WALK_ERR
);

1227 i‡(
ty≥
 & 
UM_ALLOCATED
)

1228 (Ë
	`mem£t
(
vÆid
, 1, 
chunks
);

1230 
vÆid
 = 
NULL
;

1231 
uba£
 = 
NULL
;

1237 
b˝
 = 
•
->
¶ab_hód
;

1239 
	`d¥ötf
(("ªf˙ài†%d; chunk†i†%d\n", 
•
->
¶ab_ªf˙t
, 
chunks
));

1246 
i
 = 
•
->
¶ab_ªf˙t
; i <
chunks
; i++) {

1247 
uöt_t
 
ndx
;

1249 
	`d¥ötf
(("b˝ i†%p\n", 
b˝
));

1251 i‡(
b˝
 =
NULL
) {

1252 i‡(
i
 =
chunks
)

1254 
	`mdb_w¨n
(

1256 
•
, 
addr
, 
chunks
 - 
i
);

1260 i‡(
˝
->
ˇche_Êags
 & 
UMF_HASH
) {

1261 i‡(
	`mdb_vªad
(&
bc
,  (bc), (
uöçå_t
)
b˝
) == -1) {

1262 
	`mdb_w¨n
("failedÅoÑead bufctlÖtrát %p",

1263 
b˝
);

1266 
buf
 = 
bc
.
bc_addr
;

1274 
bc
 = *((
umem_buf˘l_t
 *)

1275 ((
uöçå_t
)
b˝
 - (uöçå_t)
kba£
 +

1276 (
uöçå_t
)
uba£
));

1278 
buf
 = 
	`UMEM_BUF
(
˝
, 
b˝
);

1281 
ndx
 = ((
uöçå_t
)
buf
 - (uöçå_t)
kba£
Ë/ 
chunksize
;

1283 i‡(
ndx
 > 
¶absize
 / 
˝
->
ˇche_bufsize
) {

1290 
	`mdb_w¨n
("buf %p is out ofÑange for "

1291 "¶ab %p, cachê%p\n", 
buf
, 
•
, 
addr
);

1292 } i‡(
ty≥
 & 
UM_ALLOCATED
) {

1297 
vÆid
[
ndx
] = 0;

1302 i‡(
ty≥
 & 
UM_BUFCTL
) {

1303 
ªt
 = 
	`buf˘l_wÆk_ˇŒback
(
˝
, 
w•
,

1304 (
uöçå_t
)
b˝
);

1306 
ªt
 = 
	`umem_wÆk_ˇŒback
(
w•
, (
uöçå_t
)
buf
);

1308 i‡(
ªt
 !
WALK_NEXT
)

1309  (
ªt
);

1312 
b˝
 = 
bc
.
bc_√xt
;

1315 i‡(
b˝
 !
NULL
) {

1316 
	`d¥ötf
(("slab %p in cache %p freelistÅooÜong (%p)\n",

1317 
•
, 
addr
, 
b˝
));

1324 i‡(
ty≥
 & 
UM_FREE
)

1325  (
WALK_NEXT
);

1327 i‡(
ty≥
 & 
UM_BUFCTL
) {

1328 
	`mdb_w¨n
("impossible situation: small-slab UM_BUFCTL walk for "

1329 "ˇchê%p\n", 
addr
);

1330  (
WALK_ERR
);

1337 
i
 = 0; 
ªt
 =
WALK_NEXT
 && i < 
chunks
; i++) {

1338 
buf
 = (*)
kba£
 + 
i
 * 
chunksize
;

1340 i‡(!
vÆid
[
i
])

1343 i‡(
mag˙t
 > 0 &&

1344 
	`b£¨ch
(&
buf
, 
magli°
, 
mag˙t
,  (*),

1345 
addrcmp
Ë!
NULL
)

1348 
ªt
 = 
	`umem_wÆk_ˇŒback
(
w•
, (
uöçå_t
)
buf
);

1350  (
ªt
);

1351 
	}
}

1354 
	$umem_wÆk_föi
(
mdb_wÆk_°©e_t
 *
w•
)

1356 
umem_wÆk_t
 *
umw
 = 
w•
->
wÆk_d©a
;

1357 
uöçå_t
 
chunksize
;

1358 
uöçå_t
 
¶absize
;

1360 i‡(
umw
 =
NULL
)

1363 i‡(
umw
->
umw_magli°
 !
NULL
)

1364 
	`mdb_‰ì
(
umw
->
umw_magli°
, umw->
umw_max
 *  (*));

1366 
chunksize
 = 
umw
->
umw_˝
->
ˇche_chunksize
;

1367 
¶absize
 = 
umw
->
umw_˝
->
ˇche_¶absize
;

1369 i‡(
umw
->
umw_vÆid
 !
NULL
)

1370 
	`mdb_‰ì
(
umw
->
umw_vÆid
, 
¶absize
 / 
chunksize
);

1371 i‡(
umw
->
umw_uba£
 !
NULL
)

1372 
	`mdb_‰ì
(
umw
->
umw_uba£
, 
¶absize
 +  (
umem_buf˘l_t
));

1374 
	`mdb_‰ì
(
umw
->
umw_˝
, umw->
umw_csize
);

1375 
	`mdb_‰ì
(
umw
,  (
umem_wÆk_t
));

1376 
	}
}

1380 
	$umem_wÆk_Æl
(
uöçå_t
 
addr
, c⁄° 
umem_ˇche_t
 *
c
, 
mdb_wÆk_°©e_t
 *
w•
)

1388 i‡(
c
->
ˇche_cÊags
 & 
UMC_NOTOUCH
)

1389  (
WALK_NEXT
);

1391 i‡(
	`mdb_pwÆk
(
w•
->
wÆk_d©a
, w•->
wÆk_ˇŒback
,

1392 
w•
->
wÆk_cbd©a
, 
addr
) == -1)

1393  (
WALK_DONE
);

1395  (
WALK_NEXT
);

1396 
	}
}

1398 
	#UMEM_WALK_ALL
(
«me
, 
w•
) { \

1399 
w•
->
wÆk_d©a
 = (
«me
); \

1400 i‡(
	`mdb_wÆk
("umem_ˇche", (
mdb_wÆk_cb_t
)
umem_wÆk_Æl
, 
w•
) == -1) \

1401  (
WALK_ERR
); \

1402  (
WALK_DONE
); \

1403 }

	)

1406 
	$umem_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

1408 i‡(
w•
->
wÆk_¨g
 !
NULL
)

1409 
w•
->
wÆk_addr
 = (
uöçå_t
)w•->
wÆk_¨g
;

1411 i‡(
w•
->
wÆk_addr
 =
NULL
)

1412 
	`UMEM_WALK_ALL
("umem", 
w•
);

1413  (
	`umem_wÆk_öô_comm⁄
(
w•
, 
UM_ALLOCATED
));

1414 
	}
}

1417 
	$buf˘l_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

1419 i‡(
w•
->
wÆk_addr
 =
NULL
)

1420 
	`UMEM_WALK_ALL
("buf˘l", 
w•
);

1421  (
	`umem_wÆk_öô_comm⁄
(
w•
, 
UM_ALLOCATED
 | 
UM_BUFCTL
));

1422 
	}
}

1425 
	$‰ìmem_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

1427 i‡(
w•
->
wÆk_addr
 =
NULL
)

1428 
	`UMEM_WALK_ALL
("‰ìmem", 
w•
);

1429  (
	`umem_wÆk_öô_comm⁄
(
w•
, 
UM_FREE
));

1430 
	}
}

1433 
	$‰ì˘l_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

1435 i‡(
w•
->
wÆk_addr
 =
NULL
)

1436 
	`UMEM_WALK_ALL
("‰ì˘l", 
w•
);

1437  (
	`umem_wÆk_öô_comm⁄
(
w•
, 
UM_FREE
 | 
UM_BUFCTL
));

1438 
	}
}

1440 
	sbuf˘l_hi°‹y_wÆk
 {

1441 *
	mbhw_√xt
;

1442 
umem_ˇche_t
 *
	mbhw_ˇche
;

1443 
umem_¶ab_t
 *
	mbhw_¶ab
;

1444 
hπime_t
 
	mbhw_time°amp
;

1445 } 
	tbuf˘l_hi°‹y_wÆk_t
;

1448 
	$buf˘l_hi°‹y_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

1450 
buf˘l_hi°‹y_wÆk_t
 *
bhw
;

1451 
umem_buf˘l_audô_t
 
bc
;

1452 
umem_buf˘l_audô_t
 
b˙
;

1454 i‡(
w•
->
wÆk_addr
 =
NULL
) {

1455 
	`mdb_w¨n
("bufctl_history walk doesn't support global walks\n");

1456  (
WALK_ERR
);

1459 i‡(
	`mdb_vªad
(&
bc
,  (bc), 
w•
->
wÆk_addr
) == -1) {

1460 
	`mdb_w¨n
("u«bÀÅÿªad buf˘»© %p", 
w•
->
wÆk_addr
);

1461  (
WALK_ERR
);

1464 
bhw
 = 
	`mdb_zÆloc
( (*bhw), 
UM_SLEEP
);

1465 
bhw
->
bhw_time°amp
 = 0;

1466 
bhw
->
bhw_ˇche
 = 
bc
.
bc_ˇche
;

1467 
bhw
->
bhw_¶ab
 = 
bc
.
bc_¶ab
;

1473 i‡(
bc
.
bc_œ°log
 !
NULL
 &&

1474 
	`mdb_vªad
(&
b˙
,  (b˙), (
uöçå_t
)
bc
.
bc_œ°log
) != -1 &&

1475 
bc
.
bc_addr
 =
b˙
.bc_addr &&

1476 
bc
.
bc_ˇche
 =
b˙
.bc_cache &&

1477 
bc
.
bc_¶ab
 =
b˙
.bc_slab &&

1478 
bc
.
bc_time°amp
 =
b˙
.bc_timestamp &&

1479 
bc
.
bc_thªad
 =
b˙
.bc_thread)

1480 
bhw
->
bhw_√xt
 = 
bc
.
bc_œ°log
;

1482 
bhw
->
bhw_√xt
 = (*)
w•
->
wÆk_addr
;

1484 
w•
->
wÆk_addr
 = (
uöçå_t
)
bc
.
bc_addr
;

1485 
w•
->
wÆk_d©a
 = 
bhw
;

1487  (
WALK_NEXT
);

1488 
	}
}

1491 
	$buf˘l_hi°‹y_wÆk_°ï
(
mdb_wÆk_°©e_t
 *
w•
)

1493 
buf˘l_hi°‹y_wÆk_t
 *
bhw
 = 
w•
->
wÆk_d©a
;

1494 
uöçå_t
 
addr
 = (uöçå_t)
bhw
->
bhw_√xt
;

1495 
uöçå_t
 
ba£addr
 = 
w•
->
wÆk_addr
;

1496 
umem_buf˘l_audô_t
 *
b
;

1497 
	`UMEM_LOCAL_BUFCTL_AUDIT
(&
b
);

1499 i‡(
addr
 =
NULL
)

1500  (
WALK_DONE
);

1502 i‡(
	`mdb_vªad
(
b
, 
UMEM_BUFCTL_AUDIT_SIZE
, 
addr
) == -1) {

1503 
	`mdb_w¨n
("u«bÀÅÿªad buf˘»© %p", 
bhw
->
bhw_√xt
);

1504  (
WALK_ERR
);

1512 i‡((
uöçå_t
)
b
->
bc_addr
 !
ba£addr
 ||

1513 
b
->
bc_ˇche
 !
bhw
->
bhw_ˇche
 ||

1514 
b
->
bc_¶ab
 !
bhw
->
bhw_¶ab
 ||

1515 (
bhw
->
bhw_time°amp
 !0 && 
b
->
bc_time°amp
 >= bhw->bhw_timestamp))

1516  (
WALK_DONE
);

1518 
bhw
->
bhw_√xt
 = 
b
->
bc_œ°log
;

1519 
bhw
->
bhw_time°amp
 = 
b
->
bc_time°amp
;

1521  (
w•
->
	`wÆk_ˇŒback
(
addr
, 
b
, w•->
wÆk_cbd©a
));

1522 
	}
}

1525 
	$buf˘l_hi°‹y_wÆk_föi
(
mdb_wÆk_°©e_t
 *
w•
)

1527 
buf˘l_hi°‹y_wÆk_t
 *
bhw
 = 
w•
->
wÆk_d©a
;

1529 
	`mdb_‰ì
(
bhw
,  (*bhw));

1530 
	}
}

1532 
	sumem_log_wÆk
 {

1533 
umem_buf˘l_audô_t
 *
	mulw_ba£
;

1534 
umem_buf˘l_audô_t
 **
	mulw_s‹ãd
;

1535 
umem_log_hódî_t
 
	mulw_lh
;

1536 
size_t
 
	mulw_size
;

1537 
size_t
 
	mulw_maxndx
;

1538 
size_t
 
	mulw_ndx
;

1539 } 
	tumem_log_wÆk_t
;

1542 
	$umem_log_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

1544 
uöçå_t
 
Õ
 = 
w•
->
wÆk_addr
;

1545 
umem_log_wÆk_t
 *
ulw
;

1546 
umem_log_hódî_t
 *
lhp
;

1547 
maxndx
, 
i
, 
j
, 
k
;

1553 i‡(
Õ
 =
NULL
 && 
	`umem_ªadv¨
(&lp, "umem_transaction_log") == -1) {

1554 
	`mdb_w¨n
("failedÅoÑead 'umem_transaction_log'");

1555  (
WALK_ERR
);

1558 i‡(
Õ
 =
NULL
) {

1559 
	`mdb_w¨n
("log is disabled\n");

1560  (
WALK_ERR
);

1563 
ulw
 = 
	`mdb_zÆloc
( (
umem_log_wÆk_t
), 
UM_SLEEP
);

1564 
lhp
 = &
ulw
->
ulw_lh
;

1566 i‡(
	`mdb_vªad
(
lhp
,  (
umem_log_hódî_t
), 
Õ
) == -1) {

1567 
	`mdb_w¨n
("ÁûedÅÿªadÜog hódîáà%p", 
Õ
);

1568 
	`mdb_‰ì
(
ulw
,  (
umem_log_wÆk_t
));

1569  (
WALK_ERR
);

1572 
ulw
->
ulw_size
 = 
lhp
->
lh_chunksize
 *Ühp->
lh_nchunks
;

1573 
ulw
->
ulw_ba£
 = 
	`mdb_Æloc
(ulw->
ulw_size
, 
UM_SLEEP
);

1574 
maxndx
 = 
lhp
->
lh_chunksize
 / 
UMEM_BUFCTL_AUDIT_SIZE
 - 1;

1576 i‡(
	`mdb_vªad
(
ulw
->
ulw_ba£
, ulw->
ulw_size
,

1577 (
uöçå_t
)
lhp
->
lh_ba£
) == -1) {

1578 
	`mdb_w¨n
("ÁûedÅÿªadÜogáàba£ %p", 
lhp
->
lh_ba£
);

1579 
	`mdb_‰ì
(
ulw
->
ulw_ba£
, ulw->
ulw_size
);

1580 
	`mdb_‰ì
(
ulw
,  (
umem_log_wÆk_t
));

1581  (
WALK_ERR
);

1584 
ulw
->
ulw_s‹ãd
 = 
	`mdb_Æloc
(
maxndx
 * 
lhp
->
lh_nchunks
 *

1585  (
umem_buf˘l_audô_t
 *), 
UM_SLEEP
);

1587 
i
 = 0, 
k
 = 0; i < 
lhp
->
lh_nchunks
; i++) {

1588 
ˇddr_t
 
chunk
 = (caddr_t)

1589 ((
uöçå_t
)
ulw
->
ulw_ba£
 + 
i
 * 
lhp
->
lh_chunksize
);

1591 
j
 = 0; j < 
maxndx
; j++) {

1593 
ulw
->
ulw_s‹ãd
[
k
++] = (
umem_buf˘l_audô_t
 *)
chunk
;

1594 
chunk
 +
UMEM_BUFCTL_AUDIT_SIZE
;

1598 
	`qs‹t
(
ulw
->
ulw_s‹ãd
, 
k
,  (
umem_buf˘l_audô_t
 *),

1599 ((*)(c⁄° *, c⁄° *))
buf˘lcmp
);

1601 
ulw
->
ulw_maxndx
 = 
k
;

1602 
w•
->
wÆk_d©a
 = 
ulw
;

1604  (
WALK_NEXT
);

1605 
	}
}

1608 
	$umem_log_wÆk_°ï
(
mdb_wÆk_°©e_t
 *
w•
)

1610 
umem_log_wÆk_t
 *
ulw
 = 
w•
->
wÆk_d©a
;

1611 
umem_buf˘l_audô_t
 *
b˝
;

1613 i‡(
ulw
->
ulw_ndx
 =ulw->
ulw_maxndx
)

1614  (
WALK_DONE
);

1616 
b˝
 = 
ulw
->
ulw_s‹ãd
[ulw->
ulw_ndx
++];

1618  (
w•
->
	`wÆk_ˇŒback
((
uöçå_t
)
b˝
 - (uöçå_t)
ulw
->
ulw_ba£
 +

1619 (
uöçå_t
)
ulw
->
ulw_lh
.
lh_ba£
, 
b˝
, 
w•
->
wÆk_cbd©a
));

1620 
	}
}

1623 
	$umem_log_wÆk_föi
(
mdb_wÆk_°©e_t
 *
w•
)

1625 
umem_log_wÆk_t
 *
ulw
 = 
w•
->
wÆk_d©a
;

1627 
	`mdb_‰ì
(
ulw
->
ulw_ba£
, ulw->
ulw_size
);

1628 
	`mdb_‰ì
(
ulw
->
ulw_s‹ãd
, ulw->
ulw_maxndx
 *

1629  (
umem_buf˘l_audô_t
 *));

1630 
	`mdb_‰ì
(
ulw
,  (
umem_log_wÆk_t
));

1631 
	}
}

1633 
	sÆlocdby_buf˘l
 {

1634 
uöçå_t
 
	mabb_addr
;

1635 
hπime_t
 
	mabb_ts
;

1636 } 
	tÆlocdby_buf˘l_t
;

1638 
	sÆlocdby_wÆk
 {

1639 c⁄° *
	mabw_wÆk
;

1640 
uöçå_t
 
	mabw_thªad
;

1641 
size_t
 
	mabw_nbufs
;

1642 
size_t
 
	mabw_size
;

1643 
Ælocdby_buf˘l_t
 *
	mabw_buf
;

1644 
size_t
 
	mabw_ndx
;

1645 } 
	tÆlocdby_wÆk_t
;

1648 
	$Ælocdby_wÆk_buf˘l
(
uöçå_t
 
addr
, c⁄° 
umem_buf˘l_audô_t
 *
b˝
,

1649 
Ælocdby_wÆk_t
 *
abw
)

1651 i‡((
uöçå_t
)
b˝
->
bc_thªad
 !
abw
->
abw_thªad
)

1652  (
WALK_NEXT
);

1654 i‡(
abw
->
abw_nbufs
 =abw->
abw_size
) {

1655 
Ælocdby_buf˘l_t
 *
buf
;

1656 
size_t
 
ﬁdsize
 =  (
Ælocdby_buf˘l_t
Ë* 
abw
->
abw_size
;

1658 
buf
 = 
	`mdb_zÆloc
(
ﬁdsize
 << 1, 
UM_SLEEP
);

1660 
	`bc›y
(
abw
->
abw_buf
, 
buf
, 
ﬁdsize
);

1661 
	`mdb_‰ì
(
abw
->
abw_buf
, 
ﬁdsize
);

1663 
abw
->
abw_size
 <<= 1;

1664 
abw
->
abw_buf
 = 
buf
;

1667 
abw
->
abw_buf
[abw->
abw_nbufs
].
abb_addr
 = 
addr
;

1668 
abw
->
abw_buf
[abw->
abw_nbufs
].
abb_ts
 = 
b˝
->
bc_time°amp
;

1669 
abw
->
abw_nbufs
++;

1671  (
WALK_NEXT
);

1672 
	}
}

1676 
	$Ælocdby_wÆk_ˇche
(
uöçå_t
 
addr
, c⁄° 
umem_ˇche_t
 *
c
, 
Ælocdby_wÆk_t
 *
abw
)

1678 i‡(
	`mdb_pwÆk
(
abw
->
abw_wÆk
, (
mdb_wÆk_cb_t
)
Ælocdby_wÆk_buf˘l
,

1679 
abw
, 
addr
) == -1) {

1680 
	`mdb_w¨n
("couldn'àwÆk buf˘»f‹ cachê%p", 
addr
);

1681  (
WALK_DONE
);

1684  (
WALK_NEXT
);

1685 
	}
}

1688 
	$Ælocdby_cmp
(c⁄° 
Ælocdby_buf˘l_t
 *
lhs
, c⁄°áŒocdby_buf˘l_à*
rhs
)

1690 i‡(
lhs
->
abb_ts
 < 
rhs
->abb_ts)

1692 i‡(
lhs
->
abb_ts
 > 
rhs
->abb_ts)

1695 
	}
}

1698 
	$Ælocdby_wÆk_öô_comm⁄
(
mdb_wÆk_°©e_t
 *
w•
, c⁄° *
wÆk
)

1700 
Ælocdby_wÆk_t
 *
abw
;

1702 i‡(
w•
->
wÆk_addr
 =
NULL
) {

1703 
	`mdb_w¨n
("allocdby walk doesn't support global walks\n");

1704  (
WALK_ERR
);

1707 
abw
 = 
	`mdb_zÆloc
( (
Ælocdby_wÆk_t
), 
UM_SLEEP
);

1709 
abw
->
abw_thªad
 = 
w•
->
wÆk_addr
;

1710 
abw
->
abw_wÆk
 = 
wÆk
;

1711 
abw
->
abw_size
 = 128;

1712 
abw
->
abw_buf
 =

1713 
	`mdb_zÆloc
(
abw
->
abw_size
 *  (
Ælocdby_buf˘l_t
), 
UM_SLEEP
);

1715 
w•
->
wÆk_d©a
 = 
abw
;

1717 i‡(
	`mdb_wÆk
("umem_cache",

1718 (
mdb_wÆk_cb_t
)
Ælocdby_wÆk_ˇche
, 
abw
) == -1) {

1719 
	`mdb_w¨n
("couldn't walk umem_cache");

1720 
	`Ælocdby_wÆk_föi
(
w•
);

1721  (
WALK_ERR
);

1724 
	`qs‹t
(
abw
->
abw_buf
,ábw->
abw_nbufs
,  (
Ælocdby_buf˘l_t
),

1725 ((*)(c⁄° *, c⁄° *))
Ælocdby_cmp
);

1727  (
WALK_NEXT
);

1728 
	}
}

1731 
	$Ælocdby_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

1733  (
	`Ælocdby_wÆk_öô_comm⁄
(
w•
, "bufctl"));

1734 
	}
}

1737 
	$‰ìdby_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

1739  (
	`Ælocdby_wÆk_öô_comm⁄
(
w•
, "freectl"));

1740 
	}
}

1743 
	$Ælocdby_wÆk_°ï
(
mdb_wÆk_°©e_t
 *
w•
)

1745 
Ælocdby_wÆk_t
 *
abw
 = 
w•
->
wÆk_d©a
;

1746 
uöçå_t
 
addr
;

1747 
umem_buf˘l_audô_t
 *
b˝
;

1748 
	`UMEM_LOCAL_BUFCTL_AUDIT
(&
b˝
);

1750 i‡(
abw
->
abw_ndx
 =abw->
abw_nbufs
)

1751  (
WALK_DONE
);

1753 
addr
 = 
abw
->
abw_buf
[abw->
abw_ndx
++].
abb_addr
;

1755 i‡(
	`mdb_vªad
(
b˝
, 
UMEM_BUFCTL_AUDIT_SIZE
, 
addr
) == -1) {

1756 
	`mdb_w¨n
("couldn'àªad buf˘»© %p", 
addr
);

1757  (
WALK_DONE
);

1760  (
w•
->
	`wÆk_ˇŒback
(
addr
, 
b˝
, w•->
wÆk_cbd©a
));

1761 
	}
}

1764 
	$Ælocdby_wÆk_föi
(
mdb_wÆk_°©e_t
 *
w•
)

1766 
Ælocdby_wÆk_t
 *
abw
 = 
w•
->
wÆk_d©a
;

1768 
	`mdb_‰ì
(
abw
->
abw_buf
,  (
Ælocdby_buf˘l_t
Ë*ábw->
abw_size
);

1769 
	`mdb_‰ì
(
abw
,  (
Ælocdby_wÆk_t
));

1770 
	}
}

1774 
	$Ælocdby_wÆk
(
uöçå_t
 
addr
, c⁄° 
umem_buf˘l_audô_t
 *
b˝
, *
ign‹ed
)

1776 
c
[
MDB_SYM_NAMLEN
];

1777 
GElf_Sym
 
sym
;

1778 
i
;

1780 
	`mdb_¥ötf
("%0?∞%12Œx ", 
addr
, 
b˝
->
bc_time°amp
);

1781 
i
 = 0; i < 
b˝
->
bc_dïth
; i++) {

1782 i‡(
	`mdb_lookup_by_addr
(
b˝
->
bc_°ack
[
i
],

1783 
MDB_SYM_FUZZY
, 
c
,  (c), &
sym
) == -1)

1785 i‡(
	`is_umem_sym
(
c
, "umem_"))

1787 
	`mdb_¥ötf
("%s+0x%lx",

1788 
c
, 
b˝
->
bc_°ack
[
i
] - (
uöçå_t
)
sym
.
°_vÆue
);

1791 
	`mdb_¥ötf
("\n");

1793  (
WALK_NEXT
);

1794 
	}
}

1797 
	$Ælocdby_comm⁄
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, c⁄° *
w
)

1799 i‡(!(
Êags
 & 
DCMD_ADDRSPEC
))

1800  (
DCMD_USAGE
);

1802 
	`mdb_¥ötf
("%-?s %12s %s\n", "BUFCTL", "TIMESTAMP", "CALLER");

1804 i‡(
	`mdb_pwÆk
(
w
, (
mdb_wÆk_cb_t
)
Ælocdby_wÆk
, 
NULL
, 
addr
) == -1) {

1805 
	`mdb_w¨n
("ˇn'àwÆk '%s' f‹ %p", 
w
, 
addr
);

1806  (
DCMD_ERR
);

1809  (
DCMD_OK
);

1810 
	}
}

1814 
	$Ælocdby
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
¨gc
, c⁄° 
mdb_¨g_t
 *
¨gv
)

1816  (
	`Ælocdby_comm⁄
(
addr
, 
Êags
, "allocdby"));

1817 
	}
}

1821 
	$‰ìdby
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
¨gc
, c⁄° 
mdb_¨g_t
 *
¨gv
)

1823  (
	`Ælocdby_comm⁄
(
addr
, 
Êags
, "freedby"));

1824 
	}
}

1826 
	swh©is_öfo
 {

1827 
mdb_wh©is_t
 *
	mwi_w
;

1828 c⁄° 
umem_ˇche_t
 *
	mwi_ˇche
;

1829 c⁄° 
vmem_t
 *
	mwi_vmem
;

1830 
vmem_t
 *
	mwi_msb_¨ía
;

1831 
size_t
 
	mwi_¶ab_size
;

1832 
	mwi_¶ab_found
;

1833 
uöt_t
 
	mwi_‰ìmem
;

1834 } 
	twh©is_öfo_t
;

1838 
	$wh©is_ˇŒ_¥öãr
(
mdb_dcmd_f
 *
dcmd
, 
uöçå_t
 
addr
)

1840 
mdb_¨g_t
 
a
;

1841 
a
.
a_ty≥
 = 
MDB_TYPE_STRING
;

1842 
a
.
a_un
.
a_°r
 = "-v";

1844 
	`mdb_¥ötf
(":\n");

1845 (Ë(*
dcmd
)(
addr
, 
DCMD_ADDRSPEC
, 1, &
a
);

1846 
	}
}

1849 
	$wh©is_¥öt_umem
(
wh©is_öfo_t
 *
wi
, 
uöçå_t
 
maddr
, uöçå_à
addr
,

1850 
uöçå_t
 
baddr
)

1852 
mdb_wh©is_t
 *
w
 = 
wi
->
wi_w
;

1853 c⁄° 
umem_ˇche_t
 *
˝
 = 
wi
->
wi_ˇche
;

1854 
quõt
 = (
	`mdb_wh©is_Êags
(
w
Ë& 
WHATIS_QUIET
);

1856 
ˇŒ_¥öãr
 = (!
quõt
 && (
˝
->
ˇche_Êags
 & 
UMF_AUDIT
));

1858 
	`mdb_wh©is_ªp‹t_obje˘
(
w
, 
maddr
, 
addr
, "");

1860 i‡(
baddr
 !0 && !
ˇŒ_¥öãr
)

1861 
	`mdb_¥ötf
("buf˘»%∞", 
baddr
);

1863 
	`mdb_¥ötf
("%s from %s",

1864 (
wi
->
wi_‰ìmem
 =
FALSE
Ë? "Æloˇãd" : "‰ìd", 
˝
->
ˇche_«me
);

1866 i‡(
ˇŒ_¥öãr
 && 
baddr
 != 0) {

1867 
	`wh©is_ˇŒ_¥öãr
(
buf˘l
, 
baddr
);

1870 
	`mdb_¥ötf
("\n");

1871 
	}
}

1875 
	$wh©is_wÆk_umem
(
uöçå_t
 
addr
, *
ign‹ed
, 
wh©is_öfo_t
 *
wi
)

1877 
mdb_wh©is_t
 *
w
 = 
wi
->
wi_w
;

1879 
uöçå_t
 
cur
;

1880 
size_t
 
size
 = 
wi
->
wi_ˇche
->
ˇche_bufsize
;

1882 
	`mdb_wh©is_m©ch
(
w
, 
addr
, 
size
, &
cur
))

1883 
	`wh©is_¥öt_umem
(
wi
, 
cur
, 
addr
, 
NULL
);

1885  (
	`WHATIS_WALKRET
(
w
));

1886 
	}
}

1890 
	$wh©is_wÆk_buf˘l
(
uöçå_t
 
baddr
, c⁄° 
umem_buf˘l_t
 *
b˝
, 
wh©is_öfo_t
 *
wi
)

1892 
mdb_wh©is_t
 *
w
 = 
wi
->
wi_w
;

1894 
uöçå_t
 
cur
;

1895 
uöçå_t
 
addr
 = (uöçå_t)
b˝
->
bc_addr
;

1896 
size_t
 
size
 = 
wi
->
wi_ˇche
->
ˇche_bufsize
;

1898 
	`mdb_wh©is_m©ch
(
w
, 
addr
, 
size
, &
cur
))

1899 
	`wh©is_¥öt_umem
(
wi
, 
cur
, 
addr
, 
baddr
);

1901  (
	`WHATIS_WALKRET
(
w
));

1902 
	}
}

1906 
	$wh©is_wÆk_£g
(
uöçå_t
 
addr
, c⁄° 
vmem_£g_t
 *
vs
, 
wh©is_öfo_t
 *
wi
)

1908 
mdb_wh©is_t
 *
w
 = 
wi
->
wi_w
;

1910 
size_t
 
size
 = 
vs
->
vs_íd
 - vs->
vs_°¨t
;

1911 
uöçå_t
 
cur
;

1914 i‡(
vs
->
vs_ty≥
 !
VMEM_ALLOC
 && vs->vs_ty≥ !
VMEM_FREE
)

1915  (
WALK_NEXT
);

1917 
	`mdb_wh©is_m©ch
(
w
, 
vs
->
vs_°¨t
, 
size
, &
cur
)) {

1918 
	`mdb_wh©is_ªp‹t_obje˘
(
w
, 
cur
, 
vs
->
vs_°¨t
, "");

1924 i‡((
	`mdb_wh©is_Êags
(
w
Ë& 
WHATIS_QUIET
) &&

1925 ((
	`mdb_wh©is_Êags
(
w
Ë& 
WHATIS_BUFCTL
) != 0 ||

1926 (
vs
->
vs_ty≥
 =
VMEM_ALLOC
 && vs->
vs_dïth
 != 0))) {

1927 
	`mdb_¥ötf
("vmem_£g %∞", 
addr
);

1930 
	`mdb_¥ötf
("%s from %s vmemárena",

1931 (
vs
->
vs_ty≥
 =
VMEM_ALLOC
) ? "allocated" : "freed",

1932 
wi
->
wi_vmem
->
vm_«me
);

1934 i‡(!
	`mdb_wh©is_Êags
(
w
Ë& 
WHATIS_QUIET
)

1935 
	`wh©is_ˇŒ_¥öãr
(
vmem_£g
, 
addr
);

1937 
	`mdb_¥ötf
("\n");

1940  (
	`WHATIS_WALKRET
(
w
));

1941 
	}
}

1944 
	$wh©is_wÆk_vmem
(
uöçå_t
 
addr
, c⁄° 
vmem_t
 *
vmem
, 
wh©is_öfo_t
 *
wi
)

1946 
mdb_wh©is_t
 *
w
 = 
wi
->
wi_w
;

1947 c⁄° *
nm
 = 
vmem
->
vm_«me
;

1948 
wi
->
wi_vmem
 = 
vmem
;

1950 i‡(
	`mdb_wh©is_Êags
(
w
Ë& 
WHATIS_VERBOSE
)

1951 
	`mdb_¥ötf
("Sórchög vmemáª« %s...\n", 
nm
);

1953 i‡(
	`mdb_pwÆk
("vmem_seg",

1954 (
mdb_wÆk_cb_t
)
wh©is_wÆk_£g
, 
wi
, 
addr
) == -1) {

1955 
	`mdb_w¨n
("ˇn'àwÆk vmem seg f‹ %p", 
addr
);

1956  (
WALK_NEXT
);

1959  (
	`WHATIS_WALKRET
(
w
));

1960 
	}
}

1964 
	$wh©is_wÆk_¶ab
(
uöçå_t
 
ßddr
, c⁄° 
umem_¶ab_t
 *
•
, 
wh©is_öfo_t
 *
wi
)

1966 
mdb_wh©is_t
 *
w
 = 
wi
->
wi_w
;

1969 i‡(
	`mdb_wh©is_ovîœps
(
w
,

1970 (
uöçå_t
)
•
->
¶ab_ba£
, 
wi
->
wi_¶ab_size
)) {

1971 
wi
->
wi_¶ab_found
++;

1972  (
WALK_DONE
);

1974  (
WALK_NEXT
);

1975 
	}
}

1978 
	$wh©is_wÆk_ˇche
(
uöçå_t
 
addr
, c⁄° 
umem_ˇche_t
 *
c
, 
wh©is_öfo_t
 *
wi
)

1980 
mdb_wh©is_t
 *
w
 = 
wi
->
wi_w
;

1981 *
wÆk
, *
‰ìwÆk
;

1982 
mdb_wÆk_cb_t
 
func
;

1983 
do_buf˘l
;

1986 i‡(!(
c
->
ˇche_Êags
 & 
UMF_HASH
))

1987 
do_buf˘l
 = 
FALSE
;

1988 i‡(
c
->
ˇche_Êags
 & 
UMF_AUDIT
)

1989 
do_buf˘l
 = 
TRUE
;

1991 
do_buf˘l
 = ((
	`mdb_wh©is_Êags
(
w
Ë& 
WHATIS_BUFCTL
) != 0);

1993 i‡(
do_buf˘l
) {

1994 
wÆk
 = "bufctl";

1995 
‰ìwÆk
 = "freectl";

1996 
func
 = (
mdb_wÆk_cb_t
)
wh©is_wÆk_buf˘l
;

1998 
wÆk
 = "umem";

1999 
‰ìwÆk
 = "freemem";

2000 
func
 = (
mdb_wÆk_cb_t
)
wh©is_wÆk_umem
;

2003 
wi
->
wi_ˇche
 = 
c
;

2005 i‡(
	`mdb_wh©is_Êags
(
w
Ë& 
WHATIS_VERBOSE
)

2006 
	`mdb_¥ötf
("Sórchög %s...\n", 
c
->
ˇche_«me
);

2013 
wi
->
wi_¶ab_size
 = 
c
->
ˇche_¶absize
 - c->
ˇche_maxcﬁ‹
;

2014 i‡(!(
c
->
ˇche_Êags
 & 
UMF_HASH
))

2015 
wi
->
wi_¶ab_size
 - (
umem_¶ab_t
);

2017 i‡((
wi
->
wi_¶ab_size
 / 
c
->
ˇche_chunksize
) > 2) {

2018 
wi
->
wi_¶ab_found
 = 0;

2019 i‡(
	`mdb_pwÆk
("umem_¶ab", (
mdb_wÆk_cb_t
)
wh©is_wÆk_¶ab
, 
wi
,

2020 
addr
) == -1) {

2021 
	`mdb_w¨n
("can't find umem_slab walker");

2022  (
WALK_DONE
);

2024 i‡(
wi
->
wi_¶ab_found
 == 0)

2025  (
WALK_NEXT
);

2028 
wi
->
wi_‰ìmem
 = 
FALSE
;

2029 i‡(
	`mdb_pwÆk
(
wÆk
, 
func
, 
wi
, 
addr
) == -1) {

2030 
	`mdb_w¨n
("ˇn'àföd %†wÆkî", 
wÆk
);

2031  (
WALK_DONE
);

2034 i‡(
	`mdb_wh©is_d⁄e
(
w
))

2035  (
WALK_DONE
);

2040 i‡(
	`mdb_wh©is_Êags
(
w
Ë& 
WHATIS_VERBOSE
)

2041 
	`mdb_¥ötf
("Sórchög %†f‹ fªêmem‹y...\n", 
c
->
ˇche_«me
);

2043 
wi
->
wi_‰ìmem
 = 
TRUE
;

2045 i‡(
	`mdb_pwÆk
(
‰ìwÆk
, 
func
, 
wi
, 
addr
) == -1) {

2046 
	`mdb_w¨n
("ˇn'àföd %†wÆkî", 
‰ìwÆk
);

2047  (
WALK_DONE
);

2050  (
	`WHATIS_WALKRET
(
w
));

2051 
	}
}

2054 
	$wh©is_wÆk_touch
(
uöçå_t
 
addr
, c⁄° 
umem_ˇche_t
 *
c
, 
wh©is_öfo_t
 *
wi
)

2056 i‡(
c
->
ˇche_¨ía
 =
wi
->
wi_msb_¨ía
 ||

2057 (
c
->
ˇche_cÊags
 & 
UMC_NOTOUCH
))

2058  (
WALK_NEXT
);

2060  (
	`wh©is_wÆk_ˇche
(
addr
, 
c
, 
wi
));

2061 
	}
}

2064 
	$wh©is_wÆk_mëad©a
(
uöçå_t
 
addr
, c⁄° 
umem_ˇche_t
 *
c
, 
wh©is_öfo_t
 *
wi
)

2066 i‡(
c
->
ˇche_¨ía
 !
wi
->
wi_msb_¨ía
)

2067  (
WALK_NEXT
);

2069  (
	`wh©is_wÆk_ˇche
(
addr
, 
c
, 
wi
));

2070 
	}
}

2073 
	$wh©is_wÆk_nŸouch
(
uöçå_t
 
addr
, c⁄° 
umem_ˇche_t
 *
c
, 
wh©is_öfo_t
 *
wi
)

2075 i‡(
c
->
ˇche_¨ía
 =
wi
->
wi_msb_¨ía
 ||

2076 !(
c
->
ˇche_cÊags
 & 
UMC_NOTOUCH
))

2077  (
WALK_NEXT
);

2079  (
	`wh©is_wÆk_ˇche
(
addr
, 
c
, 
wi
));

2080 
	}
}

2084 
	$wh©is_run_umem
(
mdb_wh©is_t
 *
w
, *
ign‹ed
)

2086 
wh©is_öfo_t
 
wi
;

2088 
	`bzîo
(&
wi
,  (wi));

2089 
wi
.
wi_w
 = 
w
;

2092 i‡(
	`mdb_ªadv¨
(&
wi
.
wi_msb_¨ía
, "umem_internal_arena") == -1)

2093 
	`mdb_w¨n
("unableÅoÑeadvar \"umem_internal_arena\"");

2102 i‡(
	`mdb_wÆk
("umem_ˇche", (
mdb_wÆk_cb_t
)
wh©is_wÆk_touch
,

2103 &
wi
) == -1 ||

2104 
	`mdb_wÆk
("umem_ˇche", (
mdb_wÆk_cb_t
)
wh©is_wÆk_mëad©a
,

2105 &
wi
) == -1 ||

2106 
	`mdb_wÆk
("umem_ˇche", (
mdb_wÆk_cb_t
)
wh©is_wÆk_nŸouch
,

2107 &
wi
) == -1) {

2108 
	`mdb_w¨n
("couldn't find umem_cache walker");

2112 
	}
}

2116 
	$wh©is_run_vmem
(
mdb_wh©is_t
 *
w
, *
ign‹ed
)

2118 
wh©is_öfo_t
 
wi
;

2120 
	`bzîo
(&
wi
,  (wi));

2121 
wi
.
wi_w
 = 
w
;

2123 i‡(
	`mdb_wÆk
("vmem_postfix",

2124 (
mdb_wÆk_cb_t
)
wh©is_wÆk_vmem
, &
wi
) == -1) {

2125 
	`mdb_w¨n
("couldn't find vmem_postfix walker");

2129 
	}
}

2132 
	$umem_öô
()

2134 
mdb_wÆkî_t
 
w
 = {

2135 "umem_ˇche", "wÆkÜi° o‡umem caches", 
umem_ˇche_wÆk_öô
,

2136 
umem_ˇche_wÆk_°ï
, 
umem_ˇche_wÆk_föi


2139 i‡(
	`mdb_add_wÆkî
(&
w
) == -1) {

2140 
	`mdb_w¨n
("failedÅoádd umem_cache walker");

2144 i‡(
	`umem_upd©e_v¨übÀs
() == -1)

2148 (Ë
	`mdb_ˇŒback_add
(
MDB_CALLBACK_STCHG
, 
umem_°©ech™ge_cb
, 
NULL
);

2149 
	`umem_°©ech™ge_cb
(
NULL
);

2154 
	`mdb_wh©is_ªgi°î
("umem", 
wh©is_run_umem
, 
NULL
,

2155 
WHATIS_PRIO_ALLOCATOR
, 
WHATIS_REG_NO_ID
);

2156 
	`mdb_wh©is_ªgi°î
("vmem", 
wh©is_run_vmem
, 
NULL
,

2157 
WHATIS_PRIO_ALLOCATOR
, 
WHATIS_REG_NO_ID
);

2160 
	}
}

2162 
	sumem_log_˝u
 {

2163 
uöçå_t
 
	mumc_low
;

2164 
uöçå_t
 
	mumc_high
;

2165 } 
	tumem_log_˝u_t
;

2168 
	$umem_log_wÆk
(
uöçå_t
 
addr
, c⁄° 
umem_buf˘l_audô_t
 *
b
, 
umem_log_˝u_t
 *
umc
)

2170 
i
;

2172 
i
 = 0; i < 
umem_max_n˝us
; i++) {

2173 i‡(
addr
 >
umc
[
i
].
umc_low
 &&ádd∏< umc[i].
umc_high
)

2177 i‡(
i
 =
umem_max_n˝us
)

2178 
	`mdb_¥ötf
(" ");

2180 
	`mdb_¥ötf
("%3d", 
i
);

2182 
	`mdb_¥ötf
(" %0?∞%0?∞%16Œx %0?p\n", 
addr
, 
b
->
bc_addr
,

2183 
b
->
bc_time°amp
, b->
bc_thªad
);

2185  (
WALK_NEXT
);

2186 
	}
}

2190 
	$umem_log
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
¨gc
, c⁄° 
mdb_¨g_t
 *
¨gv
)

2192 
umem_log_hódî_t
 
lh
;

2193 
umem_˝u_log_hódî_t
 
˛h
;

2194 
uöçå_t
 
lhp
, 
˛hp
;

2195 
umem_log_˝u_t
 *
umc
;

2196 
i
;

2198 i‡(
	`umem_ªadv¨
(&
lhp
, "umem_transaction_log") == -1) {

2199 
	`mdb_w¨n
("failedÅoÑead 'umem_transaction_log'");

2200  (
DCMD_ERR
);

2203 i‡(
lhp
 =
NULL
) {

2204 
	`mdb_w¨n
("no umemÅransactionÜog\n");

2205  (
DCMD_ERR
);

2208 i‡(
	`mdb_vªad
(&
lh
,  (
umem_log_hódî_t
), 
lhp
) == -1) {

2209 
	`mdb_w¨n
("ÁûedÅÿªadÜog hódîáà%p", 
lhp
);

2210  (
DCMD_ERR
);

2213 
˛hp
 = 
lhp
 + ((
uöçå_t
)&
lh
.
lh_˝u
[0] - (uintptr_t)&lh);

2215 
umc
 = 
	`mdb_zÆloc
( (
umem_log_˝u_t
Ë* 
umem_max_n˝us
,

2216 
UM_SLEEP
 | 
UM_GC
);

2218 
i
 = 0; i < 
umem_max_n˝us
; i++) {

2219 i‡(
	`mdb_vªad
(&
˛h
,  (˛h), 
˛hp
) == -1) {

2220 
	`mdb_w¨n
("cannotÑead cpu %d'sÜog headerát %p",

2221 
i
, 
˛hp
);

2222  (
DCMD_ERR
);

2225 
umc
[
i
].
umc_low
 = 
˛h
.
˛h_chunk
 * 
lh
.
lh_chunksize
 +

2226 (
uöçå_t
)
lh
.
lh_ba£
;

2227 
umc
[
i
].
umc_high
 = (
uöçå_t
)
˛h
.
˛h_cuºít
;

2229 
˛hp
 + (
umem_˝u_log_hódî_t
);

2232 i‡(
	`DCMD_HDRSPEC
(
Êags
)) {

2233 
	`mdb_¥ötf
("%3s %-?s %-?s %16s %-?s\n", "CPU", "ADDR",

2241 i‡(
Êags
 & 
DCMD_ADDRSPEC
) {

2242 
umem_buf˘l_audô_t
 *
bp
;

2243 
	`UMEM_LOCAL_BUFCTL_AUDIT
(&
bp
);

2245 i‡(
	`mdb_vªad
(
bp
, 
UMEM_BUFCTL_AUDIT_SIZE
, 
addr
) == -1) {

2246 
	`mdb_w¨n
("ÁûedÅÿªad buf˘»© %p", 
addr
);

2247  (
DCMD_ERR
);

2250 (Ë
	`umem_log_wÆk
(
addr
, 
bp
, 
umc
);

2252  (
DCMD_OK
);

2255 i‡(
	`mdb_wÆk
("umem_log", (
mdb_wÆk_cb_t
)
umem_log_wÆk
, 
umc
) == -1) {

2256 
	`mdb_w¨n
("can't find umemÜog walker");

2257  (
DCMD_ERR
);

2260  (
DCMD_OK
);

2261 
	}
}

2263 
	sbuf˘l_hi°‹y_cb
 {

2264 
	mbhc_Êags
;

2265 
	mbhc_¨gc
;

2266 c⁄° 
mdb_¨g_t
 *
	mbhc_¨gv
;

2267 
	mbhc_ªt
;

2268 } 
	tbuf˘l_hi°‹y_cb_t
;

2272 
	$buf˘l_hi°‹y_ˇŒback
(
uöçå_t
 
addr
, c⁄° *
ign
, *
¨g
)

2274 
buf˘l_hi°‹y_cb_t
 *
bhc
 = 
¨g
;

2276 
bhc
->
bhc_ªt
 =

2277 
	`buf˘l
(
addr
, 
bhc
->
bhc_Êags
, bhc->
bhc_¨gc
, bhc->
bhc_¨gv
);

2279 
bhc
->
bhc_Êags
 &~
DCMD_LOOPFIRST
;

2281  ((
bhc
->
bhc_ªt
 =
DCMD_OK
)? 
WALK_NEXT
 : 
WALK_DONE
);

2282 
	}
}

2285 
	$buf˘l_hñp
()

2287 
	`mdb_¥ötf
("%s\n",

2289 
	`mdb_dec_ödít
(2);

2290 
	`mdb_¥ötf
("%<b>OPTIONS%</b>\n");

2291 
	`mdb_öc_ödít
(2);

2292 
	`mdb_¥ötf
("%s",

2305 
	}
}

2308 
	$buf˘l
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
¨gc
, c⁄° 
mdb_¨g_t
 *
¨gv
)

2310 
uöt_t
 
vîbo£
 = 
FALSE
;

2311 
uöt_t
 
hi°‹y
 = 
FALSE
;

2312 
uöt_t
 
ö_hi°‹y
 = 
FALSE
;

2313 
uöçå_t
 
ˇŒî
 = 
NULL
, 
thªad
 = NULL;

2314 
uöçå_t
 
œddr
, 
haddr
, 
baddr
 = 
NULL
;

2315 
hπime_t
 
óæõ°
 = 0, 
œã°
 = 0;

2316 
i
, 
dïth
;

2317 
c
[
MDB_SYM_NAMLEN
];

2318 
GElf_Sym
 
sym
;

2319 
umem_buf˘l_audô_t
 *
b˝
;

2320 
	`UMEM_LOCAL_BUFCTL_AUDIT
(&
b˝
);

2322 i‡(
	`mdb_gë›ts
(
¨gc
, 
¨gv
,

2323 'v', 
MDB_OPT_SETBITS
, 
TRUE
, &
vîbo£
,

2324 'h', 
MDB_OPT_SETBITS
, 
TRUE
, &
hi°‹y
,

2325 'H', 
MDB_OPT_SETBITS
, 
TRUE
, &
ö_hi°‹y
,

2326 'c', 
MDB_OPT_UINTPTR
, &
ˇŒî
,

2327 't', 
MDB_OPT_UINTPTR
, &
thªad
,

2328 'e', 
MDB_OPT_UINT64
, &
óæõ°
,

2329 'l', 
MDB_OPT_UINT64
, &
œã°
,

2330 'a', 
MDB_OPT_UINTPTR
, &
baddr
, 
NULL
Ë!
¨gc
)

2331  (
DCMD_USAGE
);

2333 i‡(!(
Êags
 & 
DCMD_ADDRSPEC
))

2334  (
DCMD_USAGE
);

2336 i‡(
ö_hi°‹y
 && !
hi°‹y
)

2337  (
DCMD_USAGE
);

2339 i‡(
hi°‹y
 && !
ö_hi°‹y
) {

2340 
mdb_¨g_t
 *
«rgv
 = 
	`mdb_zÆloc
( (*«rgvË* (
¨gc
 + 1),

2341 
UM_SLEEP
 | 
UM_GC
);

2342 
buf˘l_hi°‹y_cb_t
 
bhc
;

2344 
«rgv
[0].
a_ty≥
 = 
MDB_TYPE_STRING
;

2345 
«rgv
[0].
a_un
.
a_°r
 = "-H";

2347 
i
 = 0; i < 
¨gc
; i++)

2348 
«rgv
[
i
 + 1] = 
¨gv
[i];

2355 
bhc
.
bhc_Êags
 = 
Êags
 | 
DCMD_LOOP
 | 
DCMD_LOOPFIRST
;

2356 
bhc
.
bhc_¨gc
 = 
¨gc
 + 1;

2357 
bhc
.
bhc_¨gv
 = 
«rgv
;

2358 
bhc
.
bhc_ªt
 = 
DCMD_OK
;

2360 i‡(
	`mdb_pwÆk
("buf˘l_hi°‹y", 
buf˘l_hi°‹y_ˇŒback
, &
bhc
,

2361 
addr
) == -1) {

2362 
	`mdb_w¨n
("unableÅo walk bufctl_history");

2363  (
DCMD_ERR
);

2366 i‡(
bhc
.
bhc_ªt
 =
DCMD_OK
 && !(
Êags
 & 
DCMD_PIPE_OUT
))

2367 
	`mdb_¥ötf
("\n");

2369  (
bhc
.
bhc_ªt
);

2372 i‡(
	`DCMD_HDRSPEC
(
Êags
Ë&& !(Êag†& 
DCMD_PIPE_OUT
)) {

2373 i‡(
vîbo£
) {

2374 
	`mdb_¥ötf
("%16s %16s %16s %16s\n"

2379 
	`mdb_¥ötf
("%<u>%-?s %-?s %-12s %5s %s%</u>\n",

2384 i‡(
	`mdb_vªad
(
b˝
, 
UMEM_BUFCTL_AUDIT_SIZE
, 
addr
) == -1) {

2385 
	`mdb_w¨n
("couldn'àªad buf˘»© %p", 
addr
);

2386  (
DCMD_ERR
);

2393 
dïth
 = 
	`MIN
(
b˝
->
bc_dïth
, 
umem_°ack_dïth
);

2395 i‡(
ˇŒî
 !
NULL
) {

2396 
œddr
 = 
ˇŒî
;

2397 
haddr
 = 
ˇŒî
 +  (caller);

2399 i‡(
	`mdb_lookup_by_addr
(
ˇŒî
, 
MDB_SYM_FUZZY
, 
c
,  (c),

2400 &
sym
Ë!-1 && 
ˇŒî
 =(
uöçå_t
)sym.
°_vÆue
) {

2405 
œddr
 = (
uöçå_t
)
sym
.
°_vÆue
;

2406 
haddr
 = (
uöçå_t
)
sym
.
°_vÆue
 + sym.
°_size
;

2409 
i
 = 0; i < 
dïth
; i++)

2410 i‡(
b˝
->
bc_°ack
[
i
] >
œddr
 &&

2411 
b˝
->
bc_°ack
[
i
] < 
haddr
)

2414 i‡(
i
 =
dïth
)

2415  (
DCMD_OK
);

2418 i‡(
thªad
 !
NULL
 && (
uöçå_t
)
b˝
->
bc_thªad
 !=Åhread)

2419  (
DCMD_OK
);

2421 i‡(
óæõ°
 !0 && 
b˝
->
bc_time°amp
 <Éarliest)

2422  (
DCMD_OK
);

2424 i‡(
œã°
 !0 && 
b˝
->
bc_time°amp
 >Üatest)

2425  (
DCMD_OK
);

2427 i‡(
baddr
 !0 && (
uöçå_t
)
b˝
->
bc_addr
 != baddr)

2428  (
DCMD_OK
);

2430 i‡(
Êags
 & 
DCMD_PIPE_OUT
) {

2431 
	`mdb_¥ötf
("%#r\n", 
addr
);

2432  (
DCMD_OK
);

2435 i‡(
vîbo£
) {

2436 
	`mdb_¥ötf
(

2439 
addr
, 
b˝
->
bc_addr
, b˝->
bc_time°amp
, b˝->
bc_thªad
,

2440 "", 
b˝
->
bc_ˇche
, b˝->
bc_œ°log
, b˝->
bc_c⁄ã¡s
);

2442 
	`mdb_öc_ödít
(17);

2443 
i
 = 0; i < 
dïth
; i++)

2444 
	`mdb_¥ötf
("%a\n", 
b˝
->
bc_°ack
[
i
]);

2445 
	`mdb_dec_ödít
(17);

2446 
	`mdb_¥ötf
("\n");

2448 
	`mdb_¥ötf
("%0?∞%0?∞%12Œx %5d", 
addr
, 
b˝
->
bc_addr
,

2449 
b˝
->
bc_time°amp
, b˝->
bc_thªad
);

2451 
i
 = 0; i < 
dïth
; i++) {

2452 i‡(
	`mdb_lookup_by_addr
(
b˝
->
bc_°ack
[
i
],

2453 
MDB_SYM_FUZZY
, 
c
,  (c), &
sym
) == -1)

2455 i‡(
	`is_umem_sym
(
c
, "umem_"))

2457 
	`mdb_¥ötf
(" %a\n", 
b˝
->
bc_°ack
[
i
]);

2461 i‡(
i
 >
dïth
)

2462 
	`mdb_¥ötf
("\n");

2465  (
DCMD_OK
);

2466 
	}
}

2470 
	$buf˘l_audô
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
¨gc
, c⁄° 
mdb_¨g_t
 *
¨gv
)

2472 
mdb_¨g_t
 
a
;

2474 i‡(!(
Êags
 & 
DCMD_ADDRSPEC
))

2475  (
DCMD_USAGE
);

2477 i‡(
¨gc
 != 0)

2478  (
DCMD_USAGE
);

2480 
a
.
a_ty≥
 = 
MDB_TYPE_STRING
;

2481 
a
.
a_un
.
a_°r
 = "-v";

2483  (
	`buf˘l
(
addr
, 
Êags
, 1, &
a
));

2484 
	}
}

2486 
	sumem_vîify
 {

2487 
uöt64_t
 *
	mumv_buf
;

2488 
size_t
 
	mumv_size
;

2489 
	mumv_c‹ru±i⁄
;

2490 
	mumv_besûít
;

2491 
umem_ˇche
 
	mumv_ˇche
;

2492 } 
	tumem_vîify_t
;

2498 
öt64_t


2499 
	$vîify_∑âîn
(
uöt64_t
 *
buf_¨g
, 
size_t
 
size
, uöt64_à
∑t
)

2502 
uöt64_t
 *
bu„nd
 = (uöt64_à*)((*)
buf_¨g
 + 
size
);

2503 
uöt64_t
 *
buf
;

2505 
buf
 = 
buf_¨g
; bu‡< 
bu„nd
; buf++)

2506 i‡(*
buf
 !
∑t
)

2507  ((
uöçå_t
)
buf
 - (uöçå_t)
buf_¨g
);

2509 
	}
}

2516 
	$vîify_bu·ag
(
umem_bu·ag_t
 *
bç
, 
uöçå_t
 
∑t
)

2518  (
bç
->
bt_bx°©
 =((
öçå_t
)bç->
bt_buf˘l
 ^ 
∑t
) ? 0 : -1);

2519 
	}
}

2528 
	$vîify_‰ì
(
uöçå_t
 
addr
, c⁄° *
d©a
, *
¥iv©e
)

2530 
umem_vîify_t
 *
umv
 = (umem_vîify_à*)
¥iv©e
;

2531 
uöt64_t
 *
buf
 = 
umv
->
umv_buf
;

2532 
öt64_t
 
c‹ru±
;

2533 
umem_bu·ag_t
 *
bu·agp
;

2534 
umem_ˇche_t
 *
˝
 = &
umv
->
umv_ˇche
;

2535 
besûít
 = 
umv
->
umv_besûít
;

2538 
bu·agp
 = 
	`UMEM_BUFTAG
(
˝
, 
buf
);

2543 i‡(
	`mdb_vªad
(
buf
, 
umv
->
umv_size
, 
addr
) == -1) {

2544 i‡(!
besûít
)

2545 
	`mdb_w¨n
("couldn'àªad %p", 
addr
);

2546  (
WALK_NEXT
);

2549 i‡((
c‹ru±
 = 
	`vîify_∑âîn
(
buf
, 
˝
->
ˇche_vîify
,

2550 
UMEM_FREE_PATTERN
)) >= 0) {

2551 i‡(!
besûít
)

2552 
	`mdb_¥ötf
("buffer %p (free) seems corrupted,át %p\n",

2553 
addr
, (
uöçå_t
Ôdd∏+ 
c‹ru±
);

2554 
c‹ru±
;

2557 i‡((
˝
->
ˇche_Êags
 & 
UMF_HASH
) &&

2558 
bu·agp
->
bt_ªdz⁄e
 !
UMEM_REDZONE_PATTERN
) {

2559 i‡(!
besûít
)

2560 
	`mdb_¥ötf
("buffer %p (free) seemsÅo "

2561 "havê®c‹ru±Ñedz⁄ê∑âîn\n", 
addr
);

2562 
c‹ru±
;

2568 i‡(
	`vîify_bu·ag
(
bu·agp
, 
UMEM_BUFTAG_FREE
) == -1) {

2569 i‡(!
besûít
)

2570 
	`mdb_¥ötf
("buffer %p (free) hasá corrupt "

2571 "bu·ag\n", 
addr
);

2572 
c‹ru±
;

2575  (
WALK_NEXT
);

2576 
c‹ru±
:

2577 
umv
->
umv_c‹ru±i⁄
++;

2578  (
WALK_NEXT
);

2579 
	}
}

2588 
	$vîify_Æloc
(
uöçå_t
 
addr
, c⁄° *
d©a
, *
¥iv©e
)

2590 
umem_vîify_t
 *
umv
 = (umem_vîify_à*)
¥iv©e
;

2591 
umem_ˇche_t
 *
˝
 = &
umv
->
umv_ˇche
;

2592 
uöt64_t
 *
buf
 = 
umv
->
umv_buf
;

2594 
umem_bu·ag_t
 *
bu·agp
 = 
	`UMEM_BUFTAG
(
˝
, 
buf
);

2595 
uöt32_t
 *
ù
 = (uöt32_à*)
bu·agp
;

2596 
uöt8_t
 *
bp
 = (uöt8_à*)
buf
;

2597 
looks_ok
 = 0, 
size_ok
 = 1;

2598 
besûít
 = 
umv
->
umv_besûít
;

2603 i‡(
	`mdb_vªad
(
buf
, 
umv
->
umv_size
, 
addr
) == -1) {

2604 i‡(!
besûít
)

2605 
	`mdb_w¨n
("couldn'àªad %p", 
addr
);

2606  (
WALK_NEXT
);

2624 i‡(
bu·agp
->
bt_ªdz⁄e
 =
UMEM_REDZONE_PATTERN
)

2625 
looks_ok
 = 1;

2626 i‡(!
	`UMEM_SIZE_VALID
(
ù
[1]))

2627 
size_ok
 = 0;

2628 i‡(
bp
[
	`UMEM_SIZE_DECODE
(
ù
[1])] =
UMEM_REDZONE_BYTE
)

2629 
looks_ok
 = 1;

2631 
size_ok
 = 0;

2633 i‡(!
size_ok
) {

2634 i‡(!
besûít
)

2635 
	`mdb_¥ötf
("buffer %p (allocated) hasá corrupt "

2636 "ªdz⁄êsizêícodög\n", 
addr
);

2637 
c‹ru±
;

2640 i‡(!
looks_ok
) {

2641 i‡(!
besûít
)

2642 
	`mdb_¥ötf
("buffer %p (allocated) hasá corrupt "

2643 "ªdz⁄êsig«tuª\n", 
addr
);

2644 
c‹ru±
;

2647 i‡(
	`vîify_bu·ag
(
bu·agp
, 
UMEM_BUFTAG_ALLOC
) == -1) {

2648 i‡(!
besûít
)

2649 
	`mdb_¥ötf
("buffer %p (allocated) hasá "

2650 "c‹ru± bu·ag\n", 
addr
);

2651 
c‹ru±
;

2654  (
WALK_NEXT
);

2655 
c‹ru±
:

2656 
umv
->
umv_c‹ru±i⁄
++;

2657  (
WALK_NEXT
);

2658 
	}
}

2662 
	$umem_vîify
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
¨gc
, c⁄° 
mdb_¨g_t
 *
¨gv
)

2664 i‡(
Êags
 & 
DCMD_ADDRSPEC
) {

2665 
check_Æloc
 = 0, 
check_‰ì
 = 0;

2666 
umem_vîify_t
 
umv
;

2668 i‡(
	`mdb_vªad
(&
umv
.
umv_ˇche
,  (umv.umv_cache),

2669 
addr
) == -1) {

2670 
	`mdb_w¨n
("couldn'àªad umem_ˇchê%p", 
addr
);

2671  (
DCMD_ERR
);

2674 
umv
.
umv_size
 = umv.
umv_ˇche
.
ˇche_bu·ag
 +

2675  (
umem_bu·ag_t
);

2676 
umv
.
umv_buf
 = 
	`mdb_Æloc
(umv.
umv_size
, 
UM_SLEEP
 | 
UM_GC
);

2677 
umv
.
umv_c‹ru±i⁄
 = 0;

2679 i‡((
umv
.
umv_ˇche
.
ˇche_Êags
 & 
UMF_REDZONE
)) {

2680 
check_Æloc
 = 1;

2681 i‡(
umv
.
umv_ˇche
.
ˇche_Êags
 & 
UMF_DEADBEEF
)

2682 
check_‰ì
 = 1;

2684 i‡(!(
Êags
 & 
DCMD_LOOP
)) {

2685 
	`mdb_w¨n
("cache %p (%s) doesÇot have "

2686 "ªdz⁄êcheckögÉ«bÀd\n", 
addr
,

2687 
umv
.
umv_ˇche
.
ˇche_«me
);

2689  (
DCMD_ERR
);

2692 i‡(
Êags
 & 
DCMD_LOOP
) {

2696 
umv
.
umv_besûít
 = 1;

2698 
	`mdb_¥ötf
("Summary for cache '%s'\n",

2699 
umv
.
umv_ˇche
.
ˇche_«me
);

2700 
	`mdb_öc_ödít
(2);

2701 
umv
.
umv_besûít
 = 0;

2704 i‡(
check_Æloc
)

2705 (Ë
	`mdb_pwÆk
("umem", 
vîify_Æloc
, &
umv
, 
addr
);

2706 i‡(
check_‰ì
)

2707 (Ë
	`mdb_pwÆk
("‰ìmem", 
vîify_‰ì
, &
umv
, 
addr
);

2709 i‡(
Êags
 & 
DCMD_LOOP
) {

2710 i‡(
umv
.
umv_c‹ru±i⁄
 == 0) {

2711 
	`mdb_¥ötf
("%-*s %?p clean\n",

2712 
UMEM_CACHE_NAMELEN
,

2713 
umv
.
umv_ˇche
.
ˇche_«me
, 
addr
);

2715 *
s
 = "";

2716 i‡(
umv
.
umv_c‹ru±i⁄
 > 1)

2717 
s
 = "s";

2719 
	`mdb_¥ötf
("%-*s %?p %d corrupt buffer%s\n",

2720 
UMEM_CACHE_NAMELEN
,

2721 
umv
.
umv_ˇche
.
ˇche_«me
, 
addr
,

2722 
umv
.
umv_c‹ru±i⁄
, 
s
);

2730 i‡(
umv
.
umv_c‹ru±i⁄
 == 0)

2731 
	`mdb_¥ötf
("clean\n");

2733 
	`mdb_dec_ödít
(2);

2741 
	`mdb_¥ötf
("%<u>%-*†%-?†%-20s%</b>\n", 
UMEM_CACHE_NAMELEN
,

2743 (Ë(
	`mdb_wÆk_dcmd
("umem_ˇche", "umem_vîify", 0, 
NULL
));

2746  (
DCMD_OK
);

2747 
	}
}

2749 
	svmem_node
 {

2750 
vmem_node
 *
	mvn_√xt
;

2751 
vmem_node
 *
	mvn_∑ª¡
;

2752 
vmem_node
 *
	mvn_siblög
;

2753 
vmem_node
 *
	mvn_chûdªn
;

2754 
uöçå_t
 
	mvn_addr
;

2755 
	mvn_m¨ked
;

2756 
vmem_t
 
	mvn_vmem
;

2757 } 
	tvmem_node_t
;

2759 
	svmem_wÆk
 {

2760 
vmem_node_t
 *
	mvw_roŸ
;

2761 
vmem_node_t
 *
	mvw_cuºít
;

2762 } 
	tvmem_wÆk_t
;

2765 
	$vmem_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

2767 
uöçå_t
 
vaddr
, 
∑ddr
;

2768 
vmem_node_t
 *
hód
 = 
NULL
, *
roŸ
 = NULL, *
cuºít
 = NULL, *
∑ª¡
, *
vp
;

2769 
vmem_wÆk_t
 *
vw
;

2771 i‡(
	`umem_ªadv¨
(&
vaddr
, "vmem_list") == -1) {

2772 
	`mdb_w¨n
("couldn'tÑead 'vmem_list'");

2773  (
WALK_ERR
);

2776 
vaddr
 !
NULL
) {

2777 
vp
 = 
	`mdb_zÆloc
( (
vmem_node_t
), 
UM_SLEEP
);

2778 
vp
->
vn_addr
 = 
vaddr
;

2779 
vp
->
vn_√xt
 = 
hód
;

2780 
hód
 = 
vp
;

2782 i‡(
vaddr
 =
w•
->
wÆk_addr
)

2783 
cuºít
 = 
vp
;

2785 i‡(
	`mdb_vªad
(&
vp
->
vn_vmem
,  (
vmem_t
), 
vaddr
) == -1) {

2786 
	`mdb_w¨n
("couldn'àªad vmem_à© %p", 
vaddr
);

2787 
îr
;

2790 
vaddr
 = (
uöçå_t
)
vp
->
vn_vmem
.
vm_√xt
;

2793 
vp
 = 
hód
; v∞!
NULL
; v∞vp->
vn_√xt
) {

2795 i‡((
∑ddr
 = (
uöçå_t
)
vp
->
vn_vmem
.
vm_sour˚
Ë=
NULL
) {

2796 
vp
->
vn_siblög
 = 
roŸ
;

2797 
roŸ
 = 
vp
;

2801 
∑ª¡
 = 
hód
;Ö¨íà!
NULL
;Ö¨íà∑ª¡->
vn_√xt
) {

2802 i‡(
∑ª¡
->
vn_addr
 !
∑ddr
)

2804 
vp
->
vn_siblög
 = 
∑ª¡
->
vn_chûdªn
;

2805 
∑ª¡
->
vn_chûdªn
 = 
vp
;

2806 
vp
->
vn_∑ª¡
 = 
∑ª¡
;

2810 i‡(
∑ª¡
 =
NULL
) {

2811 
	`mdb_w¨n
("couldn't find %p'sÖarent (%p)\n",

2812 
vp
->
vn_addr
, 
∑ddr
);

2813 
îr
;

2817 
vw
 = 
	`mdb_zÆloc
( (
vmem_wÆk_t
), 
UM_SLEEP
);

2818 
vw
->
vw_roŸ
 = 
roŸ
;

2820 i‡(
cuºít
 !
NULL
)

2821 
vw
->
vw_cuºít
 = 
cuºít
;

2823 
vw
->
vw_cuºít
 = 
roŸ
;

2825 
w•
->
wÆk_d©a
 = 
vw
;

2826  (
WALK_NEXT
);

2827 
îr
:

2828 
vp
 = 
hód
; hód !
NULL
; vp = head) {

2829 
hód
 = 
vp
->
vn_√xt
;

2830 
	`mdb_‰ì
(
vp
,  (
vmem_node_t
));

2833  (
WALK_ERR
);

2834 
	}
}

2837 
	$vmem_wÆk_°ï
(
mdb_wÆk_°©e_t
 *
w•
)

2839 
vmem_wÆk_t
 *
vw
 = 
w•
->
wÆk_d©a
;

2840 
vmem_node_t
 *
vp
;

2841 
rvÆ
;

2843 i‡((
vp
 = 
vw
->
vw_cuºít
Ë=
NULL
)

2844  (
WALK_DONE
);

2846 
rvÆ
 = 
w•
->
	`wÆk_ˇŒback
(
vp
->
vn_addr
, &vp->
vn_vmem
, w•->
wÆk_cbd©a
);

2848 i‡(
vp
->
vn_chûdªn
 !
NULL
) {

2849 
vw
->
vw_cuºít
 = 
vp
->
vn_chûdªn
;

2850  (
rvÆ
);

2854 
vw
->
vw_cuºít
 = 
vp
->
vn_siblög
;

2855 
vp
 = vp->
vn_∑ª¡
;

2856 } 
vw
->
vw_cuºít
 =
NULL
 && 
vp
 != NULL);

2858  (
rvÆ
);

2859 
	}
}

2868 
	$vmem_po°fix_wÆk_°ï
(
mdb_wÆk_°©e_t
 *
w•
)

2870 
vmem_wÆk_t
 *
vw
 = 
w•
->
wÆk_d©a
;

2871 
vmem_node_t
 *
vp
 = 
vw
->
vw_cuºít
;

2872 
rvÆ
;

2881 i‡(
vp
->
vn_m¨ked
) {

2882 i‡(
vp
->
vn_siblög
 !
NULL
)

2883 
vp
 = vp->
vn_siblög
;

2884 i‡(
vp
->
vn_∑ª¡
 !
NULL
)

2885 
vp
 = vp->
vn_∑ª¡
;

2891  (
WALK_DONE
);

2898 
vp
->
vn_chûdªn
 !
NULL
 && !vp->vn_chûdªn->
vn_m¨ked
)

2899 
vp
 = vp->
vn_chûdªn
;

2901 
vp
->
vn_m¨ked
 = 1;

2902 
vw
->
vw_cuºít
 = 
vp
;

2903 
rvÆ
 = 
w•
->
	`wÆk_ˇŒback
(
vp
->
vn_addr
, &vp->
vn_vmem
, w•->
wÆk_cbd©a
);

2905  (
rvÆ
);

2906 
	}
}

2909 
	$vmem_wÆk_föi
(
mdb_wÆk_°©e_t
 *
w•
)

2911 
vmem_wÆk_t
 *
vw
 = 
w•
->
wÆk_d©a
;

2912 
vmem_node_t
 *
roŸ
 = 
vw
->
vw_roŸ
;

2913 
d⁄e
;

2915 i‡(
roŸ
 =
NULL
)

2918 i‡((
vw
->
vw_roŸ
 = 
roŸ
->
vn_chûdªn
Ë!
NULL
)

2919 
	`vmem_wÆk_föi
(
w•
);

2921 
vw
->
vw_roŸ
 = 
roŸ
->
vn_siblög
;

2922 
d⁄e
 = (
roŸ
->
vn_siblög
 =
NULL
 &&ÑoŸ->
vn_∑ª¡
 == NULL);

2923 
	`mdb_‰ì
(
roŸ
,  (
vmem_node_t
));

2925 i‡(
d⁄e
) {

2926 
	`mdb_‰ì
(
vw
,  (
vmem_wÆk_t
));

2928 
	`vmem_wÆk_föi
(
w•
);

2930 
	}
}

2932 
	svmem_£g_wÆk
 {

2933 
uöt8_t
 
	mvsw_ty≥
;

2934 
uöçå_t
 
	mvsw_°¨t
;

2935 
uöçå_t
 
	mvsw_cuºít
;

2936 } 
	tvmem_£g_wÆk_t
;

2940 
	$vmem_£g_wÆk_comm⁄_öô
(
mdb_wÆk_°©e_t
 *
w•
, 
uöt8_t
 
ty≥
, *
«me
)

2942 
vmem_£g_wÆk_t
 *
vsw
;

2944 i‡(
w•
->
wÆk_addr
 =
NULL
) {

2945 
	`mdb_w¨n
("vmem_%†d€†nŸ suµ‹àglobÆ wÆks\n", 
«me
);

2946  (
WALK_ERR
);

2949 
w•
->
wÆk_d©a
 = 
vsw
 = 
	`mdb_Æloc
( (
vmem_£g_wÆk_t
), 
UM_SLEEP
);

2951 
vsw
->
vsw_ty≥
 = 
ty≥
;

2952 
vsw
->
vsw_°¨t
 = 
w•
->
wÆk_addr
 + 
	`OFFSETOF
(
vmem_t
, 
vm_£g0
);

2953 
vsw
->
vsw_cuºít
 = vsw->
vsw_°¨t
;

2955  (
WALK_NEXT
);

2956 
	}
}

2961 
	#VMEM_NONE
 0

	)

2964 
	$vmem_Æloc_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

2966  (
	`vmem_£g_wÆk_comm⁄_öô
(
w•
, 
VMEM_ALLOC
, "alloc"));

2967 
	}
}

2970 
	$vmem_‰ì_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

2972  (
	`vmem_£g_wÆk_comm⁄_öô
(
w•
, 
VMEM_FREE
, "free"));

2973 
	}
}

2976 
	$vmem_•™_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

2978  (
	`vmem_£g_wÆk_comm⁄_öô
(
w•
, 
VMEM_SPAN
, "span"));

2979 
	}
}

2982 
	$vmem_£g_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
)

2984  (
	`vmem_£g_wÆk_comm⁄_öô
(
w•
, 
VMEM_NONE
, "seg"));

2985 
	}
}

2988 
	$vmem_£g_wÆk_°ï
(
mdb_wÆk_°©e_t
 *
w•
)

2990 
vmem_£g_t
 
£g
;

2991 
vmem_£g_wÆk_t
 *
vsw
 = 
w•
->
wÆk_d©a
;

2992 
uöçå_t
 
addr
 = 
vsw
->
vsw_cuºít
;

2993 
size_t
 
£g_size
 = 0;

2994 
rvÆ
;

2996 i‡(!
£g_size
) {

2997 i‡(
	`umem_ªadv¨
(&
£g_size
, "vmem_seg_size") == -1) {

2998 
	`mdb_w¨n
("failedÅoÑead 'vmem_seg_size'");

2999 
£g_size
 =  (
vmem_£g_t
);

3003 i‡(
£g_size
 <  (
£g
))

3004 
	`bzîo
((
ˇddr_t
)&
£g
 + 
£g_size
,  (seg) - seg_size);

3006 i‡(
	`mdb_vªad
(&
£g
, 
£g_size
, 
addr
) == -1) {

3007 
	`mdb_w¨n
("couldn'àªad vmem_£gáà%p", 
addr
);

3008  (
WALK_ERR
);

3011 
vsw
->
vsw_cuºít
 = (
uöçå_t
)
£g
.
vs_™ext
;

3012 i‡(
vsw
->
vsw_ty≥
 !
VMEM_NONE
 && 
£g
.
vs_ty≥
 != vsw->vsw_type) {

3013 
rvÆ
 = 
WALK_NEXT
;

3015 
rvÆ
 = 
w•
->
	`wÆk_ˇŒback
(
addr
, &
£g
, w•->
wÆk_cbd©a
);

3018 i‡(
vsw
->
vsw_cuºít
 =vsw->
vsw_°¨t
)

3019  (
WALK_DONE
);

3021  (
rvÆ
);

3022 
	}
}

3025 
	$vmem_£g_wÆk_föi
(
mdb_wÆk_°©e_t
 *
w•
)

3027 
vmem_£g_wÆk_t
 *
vsw
 = 
w•
->
wÆk_d©a
;

3029 
	`mdb_‰ì
(
vsw
,  (
vmem_£g_wÆk_t
));

3030 
	}
}

3032 
	#VMEM_NAMEWIDTH
 22

	)

3035 
	$vmem
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
¨gc
, c⁄° 
mdb_¨g_t
 *
¨gv
)

3037 
vmem_t
 
v
, 
∑ª¡
;

3038 
uöçå_t
 
∑ddr
;

3039 
idít
 = 0;

3040 
c
[
VMEM_NAMEWIDTH
];

3042 i‡(!(
Êags
 & 
DCMD_ADDRSPEC
)) {

3043 i‡(
	`mdb_wÆk_dcmd
("vmem", "vmem", 
¨gc
, 
¨gv
) == -1) {

3044 
	`mdb_w¨n
("can't walk vmem");

3045  (
DCMD_ERR
);

3047  (
DCMD_OK
);

3050 i‡(
	`DCMD_HDRSPEC
(
Êags
))

3051 
	`mdb_¥ötf
("%-?s %-*s %10s %12s %9s %5s\n",

3052 "ADDR", 
VMEM_NAMEWIDTH
, "NAME", "INUSE",

3055 i‡(
	`mdb_vªad
(&
v
,  (v), 
addr
) == -1) {

3056 
	`mdb_w¨n
("couldn'àªad vmemáà%p", 
addr
);

3057  (
DCMD_ERR
);

3060 
∑ddr
 = (
uöçå_t
)
v
.
vm_sour˚
;Öadd∏!
NULL
; 
idít
 += 2) {

3061 i‡(
	`mdb_vªad
(&
∑ª¡
,  (∑ª¡), 
∑ddr
) == -1) {

3062 
	`mdb_w¨n
("couldn'àåa˚ %p'†™˚°ry", 
addr
);

3063 
idít
 = 0;

3066 
∑ddr
 = (
uöçå_t
)
∑ª¡
.
vm_sour˚
;

3069 (Ë
	`mdb_¢¥ötf
(
c
, 
VMEM_NAMEWIDTH
, "%*s%s", 
idít
, "", 
v
.
vm_«me
);

3071 
	`mdb_¥ötf
("%0?p %-*s %10llu %12llu %9llu %5llu\n",

3072 
addr
, 
VMEM_NAMEWIDTH
, 
c
,

3073 
v
.
vm_k°©
.
vk_mem_öu£
, v.vm_k°©.
vk_mem_tŸÆ
,

3074 
v
.
vm_k°©
.
vk_Æloc
, v.vm_k°©.
vk_Áû
);

3076  (
DCMD_OK
);

3077 
	}
}

3080 
	$vmem_£g_hñp
()

3082 
	`mdb_¥ötf
("%s\n",

3088 
	`mdb_dec_ödít
(2);

3089 
	`mdb_¥ötf
("%<b>OPTIONS%</b>\n");

3090 
	`mdb_öc_ödít
(2);

3091 
	`mdb_¥ötf
("%s",

3109 
	}
}

3114 
	$vmem_£g
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
¨gc
, c⁄° 
mdb_¨g_t
 *
¨gv
)

3116 
vmem_£g_t
 
vs
;

3117 
uöçå_t
 *
°k
 = 
vs
.
vs_°ack
;

3118 
uöçå_t
 
sz
;

3119 
uöt8_t
 
t
;

3120 c⁄° *
ty≥
 = 
NULL
;

3121 
GElf_Sym
 
sym
;

3122 
c
[
MDB_SYM_NAMLEN
];

3123 
no_debug
;

3124 
i
;

3125 
dïth
;

3126 
uöçå_t
 
œddr
, 
haddr
;

3128 
uöçå_t
 
ˇŒî
 = 
NULL
, 
thªad
 = NULL;

3129 
uöçå_t
 
mösize
 = 0, 
maxsize
 = 0;

3131 
hπime_t
 
óæõ°
 = 0, 
œã°
 = 0;

3133 
uöt_t
 
size
 = 0;

3134 
uöt_t
 
vîbo£
 = 0;

3136 i‡(!(
Êags
 & 
DCMD_ADDRSPEC
))

3137  (
DCMD_USAGE
);

3139 i‡(
	`mdb_gë›ts
(
¨gc
, 
¨gv
,

3140 'c', 
MDB_OPT_UINTPTR
, &
ˇŒî
,

3141 'e', 
MDB_OPT_UINT64
, &
óæõ°
,

3142 'l', 
MDB_OPT_UINT64
, &
œã°
,

3143 's', 
MDB_OPT_SETBITS
, 
TRUE
, &
size
,

3144 'm', 
MDB_OPT_UINTPTR
, &
mösize
,

3145 'M', 
MDB_OPT_UINTPTR
, &
maxsize
,

3146 't', 
MDB_OPT_UINTPTR
, &
thªad
,

3147 'T', 
MDB_OPT_STR
, &
ty≥
,

3148 'v', 
MDB_OPT_SETBITS
, 
TRUE
, &
vîbo£
,

3149 
NULL
Ë!
¨gc
)

3150  (
DCMD_USAGE
);

3152 i‡(
	`DCMD_HDRSPEC
(
Êags
Ë&& !(Êag†& 
DCMD_PIPE_OUT
)) {

3153 i‡(
vîbo£
) {

3154 
	`mdb_¥ötf
("%16s %4s %16s %16s %16s\n"

3159 
	`mdb_¥ötf
("%?s %4s %?s %?s %s\n", "ADDR", "TYPE",

3160 "START", 
size
? "SIZE" : "END", "WHO");

3164 i‡(
	`mdb_vªad
(&
vs
,  (vs), 
addr
) == -1) {

3165 
	`mdb_w¨n
("couldn'àªad vmem_£gáà%p", 
addr
);

3166  (
DCMD_ERR
);

3169 i‡(
ty≥
 !
NULL
) {

3170 i‡(
	`°rcmp
(
ty≥
, "ALLC") == 0 || strcmp(type, "ALLOC") == 0)

3171 
t
 = 
VMEM_ALLOC
;

3172 i‡(
	`°rcmp
(
ty≥
, "FREE") == 0)

3173 
t
 = 
VMEM_FREE
;

3174 i‡(
	`°rcmp
(
ty≥
, "SPAN") == 0)

3175 
t
 = 
VMEM_SPAN
;

3176 i‡(
	`°rcmp
(
ty≥
, "ROTR") == 0 ||

3177 
	`°rcmp
(
ty≥
, "ROTOR") == 0)

3178 
t
 = 
VMEM_ROTOR
;

3179 i‡(
	`°rcmp
(
ty≥
, "WLKR") == 0 ||

3180 
	`°rcmp
(
ty≥
, "WALKER") == 0)

3181 
t
 = 
VMEM_WALKER
;

3183 
	`mdb_w¨n
("\"%s\" isÇotáÑecognized vmem_segÅype\n",

3184 
ty≥
);

3185  (
DCMD_ERR
);

3188 i‡(
vs
.
vs_ty≥
 !
t
)

3189  (
DCMD_OK
);

3192 
sz
 = 
vs
.
vs_íd
 - vs.
vs_°¨t
;

3194 i‡(
mösize
 !0 && 
sz
 < minsize)

3195  (
DCMD_OK
);

3197 i‡(
maxsize
 !0 && 
sz
 > maxsize)

3198  (
DCMD_OK
);

3200 
t
 = 
vs
.
vs_ty≥
;

3201 
dïth
 = 
vs
.
vs_dïth
;

3206 
no_debug
 = (
t
 !
VMEM_ALLOC
) ||

3207 (
dïth
 =0 || dïth > 
VMEM_STACK_DEPTH
);

3209 i‡(
no_debug
) {

3210 i‡(
ˇŒî
 !
NULL
 || 
thªad
 !NULL || 
óæõ°
 != 0 ||

3211 
œã°
 != 0)

3212  (
DCMD_OK
);

3214 i‡(
ˇŒî
 !
NULL
) {

3215 
œddr
 = 
ˇŒî
;

3216 
haddr
 = 
ˇŒî
 +  (caller);

3218 i‡(
	`mdb_lookup_by_addr
(
ˇŒî
, 
MDB_SYM_FUZZY
, 
c
,

3219  (
c
), &
sym
) != -1 &&

3220 
ˇŒî
 =(
uöçå_t
)
sym
.
°_vÆue
) {

3225 
œddr
 = (
uöçå_t
)
sym
.
°_vÆue
;

3226 
haddr
 = (
uöçå_t
)
sym
.
°_vÆue
 + sym.
°_size
;

3229 
i
 = 0; i < 
dïth
; i++)

3230 i‡(
vs
.
vs_°ack
[
i
] >
œddr
 &&

3231 
vs
.
vs_°ack
[
i
] < 
haddr
)

3234 i‡(
i
 =
dïth
)

3235  (
DCMD_OK
);

3238 i‡(
thªad
 !
NULL
 && (
uöçå_t
)
vs
.
vs_thªad
 !=Åhread)

3239  (
DCMD_OK
);

3241 i‡(
óæõ°
 !0 && 
vs
.
vs_time°amp
 <Éarliest)

3242  (
DCMD_OK
);

3244 i‡(
œã°
 !0 && 
vs
.
vs_time°amp
 >Üatest)

3245  (
DCMD_OK
);

3248 
ty≥
 = (
t
 =
VMEM_ALLOC
 ? "ALLC" :

3249 
t
 =
VMEM_FREE
 ? "FREE" :

3250 
t
 =
VMEM_SPAN
 ? "SPAN" :

3251 
t
 =
VMEM_ROTOR
 ? "ROTR" :

3252 
t
 =
VMEM_WALKER
 ? "WLKR" :

3255 i‡(
Êags
 & 
DCMD_PIPE_OUT
) {

3256 
	`mdb_¥ötf
("%#r\n", 
addr
);

3257  (
DCMD_OK
);

3260 i‡(
vîbo£
) {

3261 
	`mdb_¥ötf
("%<b>%16p%</b> %4s %16p %16p %16d\n",

3262 
addr
, 
ty≥
, 
vs
.
vs_°¨t
, vs.
vs_íd
, 
sz
);

3264 i‡(
no_debug
)

3265  (
DCMD_OK
);

3267 
	`mdb_¥ötf
("%16s %4s %16d %16llx\n",

3268 "", "", 
vs
.
vs_thªad
, vs.
vs_time°amp
);

3270 
	`mdb_öc_ödít
(17);

3271 
i
 = 0; i < 
dïth
; i++) {

3272 
	`mdb_¥ötf
("%a\n", 
°k
[
i
]);

3274 
	`mdb_dec_ödít
(17);

3275 
	`mdb_¥ötf
("\n");

3277 
	`mdb_¥ötf
("%0?∞%4†%0?∞%0?p", 
addr
, 
ty≥
,

3278 
vs
.
vs_°¨t
, 
size
? 
sz
 : vs.
vs_íd
);

3280 i‡(
no_debug
) {

3281 
	`mdb_¥ötf
("\n");

3282  (
DCMD_OK
);

3285 
i
 = 0; i < 
dïth
; i++) {

3286 i‡(
	`mdb_lookup_by_addr
(
°k
[
i
], 
MDB_SYM_FUZZY
,

3287 
c
,  (c), &
sym
) == -1)

3289 i‡(
	`is_umem_sym
(
c
, "vmem_"))

3293 
	`mdb_¥ötf
(" %a\n", 
°k
[
i
]);

3295  (
DCMD_OK
);

3296 
	}
}

3300 
	$showbc
(
uöçå_t
 
addr
, c⁄° 
umem_buf˘l_audô_t
 *
b˝
, 
hπime_t
 *
√we°
)

3302 
«me
[
UMEM_CACHE_NAMELEN
 + 1];

3303 
hπime_t
 
dñè
;

3304 
i
, 
dïth
;

3306 i‡(
b˝
->
bc_time°amp
 == 0)

3307  (
WALK_DONE
);

3309 i‡(*
√we°
 == 0)

3310 *
√we°
 = 
b˝
->
bc_time°amp
;

3312 
dñè
 = *
√we°
 - 
b˝
->
bc_time°amp
;

3313 
dïth
 = 
	`MIN
(
b˝
->
bc_dïth
, 
umem_°ack_dïth
);

3315 i‡(
	`mdb_ªad°r
(
«me
,  («me), (
uöçå_t
)

3316 &
b˝
->
bc_ˇche
->
ˇche_«me
) <= 0)

3317 (Ë
	`mdb_¢¥ötf
(
«me
,  («me), "%a", 
b˝
->
bc_ˇche
);

3319 
	`mdb_¥ötf
("\nT-%lld.%09lldáddr=%p %s\n",

3320 
dñè
 / 
NANOSEC
, dñè % NANOSEC, 
b˝
->
bc_addr
, 
«me
);

3322 
i
 = 0; i < 
dïth
; i++)

3323 
	`mdb_¥ötf
("\à%a\n", 
b˝
->
bc_°ack
[
i
]);

3325  (
WALK_NEXT
);

3326 
	}
}

3329 
	$umÆog
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
¨gc
, c⁄° 
mdb_¨g_t
 *
¨gv
)

3331 c⁄° *
log«me
 = "umem_transaction_log";

3332 
hπime_t
 
√we°
 = 0;

3334 i‡((
Êags
 & 
DCMD_ADDRSPEC
Ë|| 
¨gc
 > 1)

3335  (
DCMD_USAGE
);

3337 i‡(
¨gc
 > 0) {

3338 i‡(
¨gv
->
a_ty≥
 !
MDB_TYPE_STRING
)

3339  (
DCMD_USAGE
);

3340 i‡(
	`°rcmp
(
¨gv
->
a_un
.
a_°r
, "fail") == 0)

3341 
log«me
 = "umem_failure_log";

3342 i‡(
	`°rcmp
(
¨gv
->
a_un
.
a_°r
, "slab") == 0)

3343 
log«me
 = "umem_slab_log";

3345  (
DCMD_USAGE
);

3348 i‡(
	`umem_ªadv¨
(&
addr
, 
log«me
) == -1) {

3349 
	`mdb_w¨n
("failedÅoÑead %sÜog headerÖointer");

3350  (
DCMD_ERR
);

3353 i‡(
	`mdb_pwÆk
("umem_log", (
mdb_wÆk_cb_t
)
showbc
, &
√we°
, 
addr
) == -1) {

3354 
	`mdb_w¨n
("failedÅo walk umemÜog");

3355  (
DCMD_ERR
);

3358  (
DCMD_OK
);

3359 
	}
}

3368 
	sum˛i°
 {

3369 c⁄° *
	mumc_«me
;

3370 
uöçå_t
 *
	mumc_ˇches
;

3371 
	mumc_√Àms
;

3372 
	mumc_size
;

3373 } 
	tum˛i°_t
;

3376 
	$umc_add
(
uöçå_t
 
addr
, c⁄° 
umem_ˇche_t
 *
˝
, 
um˛i°_t
 *
umc
)

3378 *
p
;

3379 
s
;

3381 i‡(
umc
->
umc_«me
 =
NULL
 ||

3382 
	`°rcmp
(
˝
->
ˇche_«me
, 
umc
->
umc_«me
) == 0) {

3387 i‡(
umc
->
umc_√Àms
 >umc->
umc_size
) {

3388 
s
 = 
umc
->
umc_size
 ? umc->umc_size * 2 : 256;

3389 
p
 = 
	`mdb_Æloc
( (
uöçå_t
Ë* 
s
, 
UM_SLEEP
 | 
UM_GC
);

3391 
	`bc›y
(
umc
->
umc_ˇches
, 
p
,

3392  (
uöçå_t
Ë* 
umc
->
umc_size
);

3394 
umc
->
umc_ˇches
 = 
p
;

3395 
umc
->
umc_size
 = 
s
;

3398 
umc
->
umc_ˇches
[umc->
umc_√Àms
++] = 
addr
;

3399  (
umc
->
umc_«me
 ? 
WALK_DONE
 : 
WALK_NEXT
);

3402  (
WALK_NEXT
);

3403 
	}
}

3413 
	sumow√r
 {

3414 
umow√r
 *
	mumo_hód
;

3415 
umow√r
 *
	mumo_√xt
;

3416 
size_t
 
	mumo_sig«tuª
;

3417 
uöt_t
 
	mumo_num
;

3418 
size_t
 
	mumo_d©a_size
;

3419 
size_t
 
	mumo_tŸÆ_size
;

3420 
	mumo_dïth
;

3421 
uöçå_t
 *
	mumo_°ack
;

3422 } 
	tumow√r_t
;

3424 
	sumu£rs
 {

3425 c⁄° 
umem_ˇche_t
 *
	mumu_ˇche
;

3426 
umow√r_t
 *
	mumu_hash
;

3427 
uöçå_t
 *
	mumu_°acks
;

3428 
	mumu_√Àms
;

3429 
	mumu_size
;

3430 } 
	tumu£rs_t
;

3433 
	$umu_add
(
umu£rs_t
 *
umu
, c⁄° 
umem_buf˘l_audô_t
 *
b˝
,

3434 
size_t
 
size
, size_à
d©a_size
)

3436 
i
, 
dïth
 = 
	`MIN
(
b˝
->
bc_dïth
, 
umem_°ack_dïth
);

3437 
size_t
 
buckë
, 
sig«tuª
 = 
d©a_size
;

3438 
umow√r_t
 *
umo
, *
um€nd
;

3443 i‡(
umu
->
umu_√Àms
 >umu->
umu_size
) {

3444 
s
 = 
umu
->
umu_size
 ? umu->umu_size * 2 : 1024;

3445 
size_t
 
umow√r_size
 =  (
umow√r_t
);

3446 
size_t
 
åa˚_size
 = 
umem_°ack_dïth
 *  (
uöçå_t
);

3447 
uöçå_t
 *
√w_°acks
;

3449 
umo
 = 
	`mdb_Æloc
(
umow√r_size
 * 
s
, 
UM_SLEEP
 | 
UM_GC
);

3450 
√w_°acks
 = 
	`mdb_Æloc
(
åa˚_size
 * 
s
, 
UM_SLEEP
 | 
UM_GC
);

3452 
	`bc›y
(
umu
->
umu_hash
, 
umo
, 
umow√r_size
 * umu->
umu_size
);

3453 
	`bc›y
(
umu
->
umu_°acks
, 
√w_°acks
, 
åa˚_size
 * umu->
umu_size
);

3454 
umu
->
umu_hash
 = 
umo
;

3455 
umu
->
umu_°acks
 = 
√w_°acks
;

3456 
umu
->
umu_size
 = 
s
;

3458 
um€nd
 = 
umu
->
umu_hash
 + umu->
umu_size
;

3459 
umo
 = 
umu
->
umu_hash
; umÿ< 
um€nd
; umo++) {

3460 
umo
->
umo_hód
 = 
NULL
;

3461 
umo
->
umo_°ack
 = &
umu
->
umu_°acks
[

3462 
umem_°ack_dïth
 * (
umo
 - 
umu
->
umu_hash
)];

3465 
um€nd
 = 
umu
->
umu_hash
 + umu->
umu_√Àms
;

3466 
umo
 = 
umu
->
umu_hash
; umÿ< 
um€nd
; umo++) {

3467 
buckë
 = 
umo
->
umo_sig«tuª
 & (
umu
->
umu_size
 - 1);

3468 
umo
->
umo_√xt
 = 
umu
->
umu_hash
[
buckë
].
umo_hód
;

3469 
umu
->
umu_hash
[
buckë
].
umo_hód
 = 
umo
;

3477 
i
 = 0; i < 
dïth
; i++)

3478 
sig«tuª
 +
b˝
->
bc_°ack
[
i
];

3480 
buckë
 = 
sig«tuª
 & (
umu
->
umu_size
 - 1);

3482 
umo
 = 
umu
->
umu_hash
[
buckë
].
umo_hód
; umo; umÿumo->
umo_√xt
) {

3483 i‡(
umo
->
umo_sig«tuª
 =
sig«tuª
) {

3484 
size_t
 
dif„ªn˚
 = 0;

3486 
dif„ªn˚
 |
umo
->
umo_d©a_size
 - 
d©a_size
;

3487 
dif„ªn˚
 |
umo
->
umo_dïth
 - 
dïth
;

3489 
i
 = 0; i < 
dïth
; i++) {

3490 
dif„ªn˚
 |
umo
->
umo_°ack
[
i
] -

3491 
b˝
->
bc_°ack
[
i
];

3494 i‡(
dif„ªn˚
 == 0) {

3495 
umo
->
umo_tŸÆ_size
 +
size
;

3496 
umo
->
umo_num
++;

3506 
umo
 = &
umu
->
umu_hash
[umu->
umu_√Àms
++];

3507 
umo
->
umo_√xt
 = 
umu
->
umu_hash
[
buckë
].
umo_hód
;

3508 
umu
->
umu_hash
[
buckë
].
umo_hód
 = 
umo
;

3510 
umo
->
umo_sig«tuª
 = 
sig«tuª
;

3511 
umo
->
umo_num
 = 1;

3512 
umo
->
umo_d©a_size
 = 
d©a_size
;

3513 
umo
->
umo_tŸÆ_size
 = 
size
;

3514 
umo
->
umo_dïth
 = 
dïth
;

3516 
i
 = 0; i < 
dïth
; i++)

3517 
umo
->
umo_°ack
[
i
] = 
b˝
->
bc_°ack
[i];

3518 
	}
}

3526 
	$umau£1
(
uöçå_t
 
addr
, c⁄° 
umem_buf˘l_audô_t
 *
b˝
, 
umu£rs_t
 *
umu
)

3528 c⁄° 
umem_ˇche_t
 *
˝
 = 
umu
->
umu_ˇche
;

3530 
	`umu_add
(
umu
, 
b˝
, 
˝
->
ˇche_bufsize
, cp->cache_bufsize);

3531  (
WALK_NEXT
);

3532 
	}
}

3539 
	$umau£2
(
uöçå_t
 
addr
, c⁄° 
umem_buf˘l_audô_t
 *
b˝
, 
umu£rs_t
 *
umu
)

3541 
i
, 
dïth
 = 
	`MIN
(
b˝
->
bc_dïth
, 
umem_°ack_dïth
);

3542 c⁄° 
umem_ˇche_t
 *
˝
 = 
umu
->
umu_ˇche
;

3544 
	`mdb_¥ötf
("size %d,áddr %p,Åhread %p, cache %s\n",

3545 
˝
->
ˇche_bufsize
, 
addr
, 
b˝
->
bc_thªad
, cp->
ˇche_«me
);

3547 
i
 = 0; i < 
dïth
; i++)

3548 
	`mdb_¥ötf
("\à%a\n", 
b˝
->
bc_°ack
[
i
]);

3550 
	`umu_add
(
umu
, 
b˝
, 
˝
->
ˇche_bufsize
, cp->cache_bufsize);

3551  (
WALK_NEXT
);

3552 
	}
}

3558 
	$umow√rcmp
(c⁄° *
Õ
, c⁄° *
Ω
)

3560 c⁄° 
umow√r_t
 *
lhs
 = 
Õ
;

3561 c⁄° 
umow√r_t
 *
rhs
 = 
Ω
;

3563  (
rhs
->
umo_tŸÆ_size
 - 
lhs
->umo_total_size);

3564 
	}
}

3574 
	$umau£rs
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
¨gc
, c⁄° 
mdb_¨g_t
 *
¨gv
)

3576 
mem_thªshﬁd
 = 8192;

3577 
˙t_thªshﬁd
 = 100;

3578 
audôed_ˇches
 = 0;

3579 
do_Æl_ˇches
 = 1;

3580 
›t_e
 = 
FALSE
;

3581 
›t_f
 = 
FALSE
;

3583 
mdb_wÆk_cb_t
 
ˇŒback
 = (mdb_wÆk_cb_t)
umau£1
;

3584 
umow√r_t
 *
umo
, *
um€nd
;

3585 
i
, 
€Àms
;

3587 
um˛i°_t
 
umc
;

3588 
umu£rs_t
 
umu
;

3590 i‡(
Êags
 & 
DCMD_ADDRSPEC
)

3591  (
DCMD_USAGE
);

3593 
	`bzîo
(&
umc
,  (umc));

3594 
	`bzîo
(&
umu
,  (umu));

3596 (
i
 = 
	`mdb_gë›ts
(
¨gc
, 
¨gv
,

3597 'e', 
MDB_OPT_SETBITS
, 
TRUE
, &
›t_e
,

3598 'f', 
MDB_OPT_SETBITS
, 
TRUE
, &
›t_f
, 
NULL
)Ë!
¨gc
) {

3600 
¨gv
 +
i
;

3601 
¨gc
 -
i
;

3603 i‡(
¨gv
->
a_ty≥
 !
MDB_TYPE_STRING
 || *¨gv->
a_un
.
a_°r
 == '-')

3604  (
DCMD_USAGE
);

3606 
€Àms
 = 
umc
.
umc_√Àms
;

3607 
umc
.
umc_«me
 = 
¨gv
->
a_un
.
a_°r
;

3608 (Ë
	`mdb_wÆk
("umem_ˇche", (
mdb_wÆk_cb_t
)
umc_add
, &
umc
);

3610 i‡(
umc
.
umc_√Àms
 =
€Àms
) {

3611 
	`mdb_w¨n
("unknow¿umem cache: %s\n", 
umc
.
umc_«me
);

3612  (
DCMD_ERR
);

3615 
do_Æl_ˇches
 = 0;

3616 
¨gv
++;

3617 
¨gc
--;

3620 i‡(
›t_e
)

3621 
mem_thªshﬁd
 = 
˙t_thªshﬁd
 = 0;

3623 i‡(
›t_f
)

3624 
ˇŒback
 = (
mdb_wÆk_cb_t
)
umau£2
;

3626 i‡(
do_Æl_ˇches
) {

3627 
umc
.
umc_«me
 = 
NULL
;

3628 (Ë
	`mdb_wÆk
("umem_ˇche", (
mdb_wÆk_cb_t
)
umc_add
, &
umc
);

3631 
i
 = 0; i < 
umc
.
umc_√Àms
; i++) {

3632 
uöçå_t
 
˝
 = 
umc
.
umc_ˇches
[
i
];

3633 
umem_ˇche_t
 
c
;

3635 i‡(
	`mdb_vªad
(&
c
,  (c), 
˝
) == -1) {

3636 
	`mdb_w¨n
("ÁûedÅÿªad cachê© %p", 
˝
);

3640 i‡(!(
c
.
ˇche_Êags
 & 
UMF_AUDIT
)) {

3641 i‡(!
do_Æl_ˇches
) {

3642 
	`mdb_w¨n
("UMF_AUDIT isÇotÉnabled for %s\n",

3643 
c
.
ˇche_«me
);

3648 
umu
.
umu_ˇche
 = &
c
;

3649 (Ë
	`mdb_pwÆk
("buf˘l", 
ˇŒback
, &
umu
, 
˝
);

3650 
audôed_ˇches
++;

3653 i‡(
audôed_ˇches
 =0 && 
do_Æl_ˇches
) {

3654 
	`mdb_w¨n
("UMF_AUDIT isÇotÉnabled forány caches\n");

3655  (
DCMD_ERR
);

3658 
	`qs‹t
(
umu
.
umu_hash
, umu.
umu_√Àms
,  (
umow√r_t
), 
umow√rcmp
);

3659 
um€nd
 = 
umu
.
umu_hash
 + umu.
umu_√Àms
;

3661 
umo
 = 
umu
.
umu_hash
; umÿ< 
um€nd
; umo++) {

3662 i‡(
umo
->
umo_tŸÆ_size
 < 
mem_thªshﬁd
 &&

3663 
umo
->
umo_num
 < 
˙t_thªshﬁd
)

3665 
	`mdb_¥ötf
("%lu bytes for %uállocations with data size %lu:\n",

3666 
umo
->
umo_tŸÆ_size
, umo->
umo_num
, umo->
umo_d©a_size
);

3667 
i
 = 0; i < 
umo
->
umo_dïth
; i++)

3668 
	`mdb_¥ötf
("\à%a\n", 
umo
->
umo_°ack
[
i
]);

3671  (
DCMD_OK
);

3672 
	}
}

3674 
	smÆloc_d©a
 {

3675 
uöt32_t
 
	mmÆloc_size
;

3676 
uöt32_t
 
	mmÆloc_°©
;

3679 #ifde‡
_LP64


3680 
	#UMI_MAX_BUCKET
 (
UMEM_MAXBUF
 - 2* (
mÆloc_d©a
))

	)

3682 
	#UMI_MAX_BUCKET
 (
UMEM_MAXBUF
 -  (
mÆloc_d©a
))

	)

3685 
	sumem_mÆloc_öfo
 {

3686 
size_t
 
	mum_tŸÆ
;

3687 
size_t
 
	mum_mÆloc
;

3688 
size_t
 
	mum_mÆloc_size
;

3689 
size_t
 
	mum_mÆloc_ovîhód
;

3691 
umem_ˇche_t
 *
	mum_˝
;

3693 
uöt_t
 *
	mum_buckë
;

3694 } 
	tumem_mÆloc_öfo_t
;

3697 
	$umem_mÆloc_¥öt_di°
(
uöt_t
 *
um_buckë
, 
size_t
 
mömÆloc
, size_à
maxmÆloc
,

3698 
size_t
 
maxbuckës
, size_à
möbuckësize
, 
geomëric
)

3700 
uöt64_t
 
um_mÆloc
;

3701 
möb
 = -1;

3702 
maxb
 = -1;

3703 
buckës
;

3704 
nbucks
;

3705 
i
;

3706 
b
;

3707 c⁄° *
di°¨øy
;

3709 
möb
 = ()
mömÆloc
;

3710 
maxb
 = ()
maxmÆloc
;

3712 
nbucks
 = 
buckës
 = 
maxb
 - 
möb
 + 1;

3714 
um_mÆloc
 = 0;

3715 
b
 = 
möb
; b <
maxb
; b++)

3716 
um_mÆloc
 +
um_buckë
[
b
];

3718 i‡(
maxbuckës
 != 0)

3719 
buckës
 = 
	`MIN
(buckës, 
maxbuckës
);

3721 i‡(
möbuckësize
 > 1) {

3722 
buckës
 = 
	`MIN
(buckës, 
nbucks
/
möbuckësize
);

3723 i‡(
buckës
 == 0) {

3724 
buckës
 = 1;

3725 
möbuckësize
 = 
nbucks
;

3729 i‡(
geomëric
)

3730 
di°¨øy
 = 
	`di°_geomëric
(
buckës
, 
möb
, 
maxb
, 
möbuckësize
);

3732 
di°¨øy
 = 
	`di°_löór
(
buckës
, 
möb
, 
maxb
);

3734 
	`di°_¥öt_hódî
("malloc size", 11, "count");

3735 
i
 = 0; i < 
buckës
; i++) {

3736 
	`di°_¥öt_buckë
(
di°¨øy
, 
i
, 
um_buckë
, 
um_mÆloc
, 11);

3738 
	`mdb_¥ötf
("\n");

3739 
	}
}

3783 
	$um_umem_buf„r_cb
(
uöçå_t
 
addr
, *
buf
, 
umem_mÆloc_öfo_t
 *
ump
)

3785 
mÆloc_d©a
 
md
;

3786 
size_t
 
m_addr
 = 
addr
;

3787 
size_t
 
ovîhód
 =  (
md
);

3788 
size_t
 
mÆlocsz
;

3790 
ump
->
um_tŸÆ
++;

3792 #ifde‡
_LP64


3793 i‡(
ump
->
um_˝
->
ˇche_bufsize
 > 
UMEM_SECOND_ALIGN
) {

3794 
m_addr
 +
ovîhód
;

3795 
ovîhód
 + (
md
);

3799 i‡(
	`mdb_vªad
(&
md
,  (md), 
m_addr
) == -1) {

3800 
	`mdb_w¨n
("u«bÀÅÿªad mÆlo¯hódîáà%p", 
m_addr
);

3801  (
WALK_NEXT
);

3804 
	`UMEM_MALLOC_DECODE
(
md
.
mÆloc_°©
, md.
mÆloc_size
)) {

3805 
MALLOC_MAGIC
:

3806 #ifde‡
_LP64


3807 
MALLOC_SECOND_MAGIC
:

3809 
mÆlocsz
 = 
md
.
mÆloc_size
 - 
ovîhód
;

3811 
ump
->
um_mÆloc
++;

3812 
ump
->
um_mÆloc_size
 +
mÆlocsz
;

3813 
ump
->
um_mÆloc_ovîhód
 +
ovîhód
;

3816 
ump
->
um_mÆloc_ovîhód
 +=

3817 
ump
->
um_˝
->
ˇche_chunksize
 - 
md
.
mÆloc_size
;

3819 i‡(
ump
->
um_buckë
 !
NULL
 && 
mÆlocsz
 <
UMI_MAX_BUCKET
)

3820 
ump
->
um_buckë
[
mÆlocsz
]++;

3827  (
WALK_NEXT
);

3828 
	}
}

3831 
	$gë_umem_Æloc_sizes
(**
out
, 
size_t
 *
out_num
)

3833 
GElf_Sym
 
sym
;

3835 i‡(
	`umem_lookup_by_«me
("umem_Æloc_sizes", &
sym
) == -1) {

3836 
	`mdb_w¨n
("unableÅoÜook up umem_alloc_sizes");

3840 *
out
 = 
	`mdb_Æloc
(
sym
.
°_size
, 
UM_SLEEP
 | 
UM_GC
);

3841 *
out_num
 = 
sym
.
°_size
 /  ();

3843 i‡(
	`mdb_vªad
(*
out
, 
sym
.
°_size
, sym.
°_vÆue
) == -1) {

3844 
	`mdb_w¨n
("u«bÀÅÿªad umem_Æloc_size†(%p)", 
sym
.
°_vÆue
);

3845 *
out
 = 
NULL
;

3850 
	}
}

3854 
	$um_umem_ˇche_cb
(
uöçå_t
 
addr
, 
umem_ˇche_t
 *
˝
, 
umem_mÆloc_öfo_t
 *
ump
)

3856 i‡(
	`°∫cmp
(
˝
->
ˇche_«me
, "umem_Æloc_", 
	`°æí
("umem_alloc_")) != 0)

3857  (
WALK_NEXT
);

3859 
ump
->
um_˝
 = 
˝
;

3861 i‡(
	`mdb_pwÆk
("umem", (
mdb_wÆk_cb_t
)
um_umem_buf„r_cb
, 
ump
, 
addr
) ==

3863 
	`mdb_w¨n
("ˇn'àwÆk 'umem' f‹ cachê%p", 
addr
);

3864  (
WALK_ERR
);

3867  (
WALK_NEXT
);

3868 
	}
}

3871 
	$umem_mÆloc_di°_hñp
()

3873 
	`mdb_¥ötf
("%s\n",

3875 
	`mdb_dec_ödít
(2);

3876 
	`mdb_¥ötf
("%<b>OPTIONS%</b>\n");

3877 
	`mdb_öc_ödít
(2);

3878 
	`mdb_¥ötf
("%s",

3885 
	}
}

3889 
	$umem_mÆloc_di°
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
¨gc
, c⁄° 
mdb_¨g_t
 *
¨gv
)

3891 
umem_mÆloc_öfo_t
 
mi
;

3892 
uöt_t
 
geomëric
 = 0;

3893 
uöt_t
 
dump
 = 0;

3894 
size_t
 
maxbuckës
 = 0;

3895 
size_t
 
möbuckësize
 = 0;

3897 
size_t
 
möÆloc
 = 0;

3898 
size_t
 
maxÆloc
 = 
UMI_MAX_BUCKET
;

3900 i‡(
Êags
 & 
DCMD_ADDRSPEC
)

3901  (
DCMD_USAGE
);

3903 i‡(
	`mdb_gë›ts
(
¨gc
, 
¨gv
,

3904 'd', 
MDB_OPT_SETBITS
, 
TRUE
, &
dump
,

3905 'g', 
MDB_OPT_SETBITS
, 
TRUE
, &
geomëric
,

3906 'b', 
MDB_OPT_UINTPTR
, &
maxbuckës
,

3907 'B', 
MDB_OPT_UINTPTR
, &
möbuckësize
,

3908 0Ë!
¨gc
)

3909  (
DCMD_USAGE
);

3911 
	`bzîo
(&
mi
,  (mi));

3912 
mi
.
um_buckë
 = 
	`mdb_zÆloc
((
UMI_MAX_BUCKET
 + 1) *  (*mi.um_bucket),

3913 
UM_SLEEP
 | 
UM_GC
);

3915 i‡(
	`mdb_wÆk
("umem_ˇche", (
mdb_wÆk_cb_t
)
um_umem_ˇche_cb
,

3916 &
mi
) == -1) {

3917 
	`mdb_w¨n
("unableÅo walk 'umem_cache'");

3918  (
DCMD_ERR
);

3921 i‡(
dump
) {

3922 
i
;

3923 
i
 = 
möÆloc
; i <
maxÆloc
; i++)

3924 
	`mdb_¥ötf
("%d\t%d\n", 
i
, 
mi
.
um_buckë
[i]);

3926  (
DCMD_OK
);

3929 
	`umem_mÆloc_¥öt_di°
(
mi
.
um_buckë
, 
möÆloc
, 
maxÆloc
,

3930 
maxbuckës
, 
möbuckësize
, 
geomëric
);

3932  (
DCMD_OK
);

3933 
	}
}

3936 
	$umem_mÆloc_öfo_hñp
()

3938 
	`mdb_¥ötf
("%s\n",

3940 
	`mdb_dec_ödít
(2);

3941 
	`mdb_¥ötf
("%<b>OPTIONS%</b>\n");

3942 
	`mdb_öc_ödít
(2);

3943 
	`mdb_¥ötf
("%s",

3949 #i‚de‡
_KMDB


3953 
	}
}

3955 
	$umem_mÆloc_öfo
(
uöçå_t
 
addr
, 
uöt_t
 
Êags
, 
¨gc
, c⁄° 
mdb_¨g_t
 *
¨gv
)

3957 
umem_ˇche_t
 
c
;

3958 
umem_mÆloc_öfo_t
 
mi
;

3960 
skù
 = 0;

3962 
size_t
 
maxmÆloc
;

3963 
size_t
 
ovîhód
;

3964 
size_t
 
Æloˇãd
;

3965 
size_t
 
avg_mÆloc
;

3966 
size_t
 
ovîhód_p˘
;

3968 
uöt_t
 
vîbo£
 = 0;

3969 
uöt_t
 
dump
 = 0;

3970 
uöt_t
 
geomëric
 = 0;

3971 
size_t
 
maxbuckës
 = 0;

3972 
size_t
 
möbuckësize
 = 0;

3974 *
Æloc_sizes
;

3975 
idx
;

3976 
size_t
 
num
;

3977 
size_t
 
mömÆloc
;

3979 i‡(
	`mdb_gë›ts
(
¨gc
, 
¨gv
,

3980 'd', 
MDB_OPT_SETBITS
, 
TRUE
, &
dump
,

3981 'g', 
MDB_OPT_SETBITS
, 
TRUE
, &
geomëric
,

3982 'b', 
MDB_OPT_UINTPTR
, &
maxbuckës
,

3983 'B', 
MDB_OPT_UINTPTR
, &
möbuckësize
,

3984 0Ë!
¨gc
)

3985  (
DCMD_USAGE
);

3987 i‡(
dump
 || 
geomëric
 || (
maxbuckës
 !0Ë|| (
möbuckësize
 != 0))

3988 
vîbo£
 = 1;

3990 i‡(!(
Êags
 & 
DCMD_ADDRSPEC
)) {

3991 i‡(
	`mdb_wÆk_dcmd
("umem_cache", "umem_malloc_info",

3992 
¨gc
, 
¨gv
) == -1) {

3993 
	`mdb_w¨n
("can't walk umem_cache");

3994  (
DCMD_ERR
);

3996  (
DCMD_OK
);

3999 i‡(!
	`mdb_vªad
(&
c
,  (c), 
addr
)) {

4000 
	`mdb_w¨n
("u«bÀÅÿªad cachê© %p", 
addr
);

4001  (
DCMD_ERR
);

4004 i‡(
	`°∫cmp
(
c
.
ˇche_«me
, "umem_Æloc_", 
	`°æí
("umem_alloc_")) != 0) {

4005 i‡(!(
Êags
 & 
DCMD_LOOP
))

4006 
	`mdb_w¨n
("umem_malloc_info: cache \"%s\" isÇot used "

4007 "by mÆloc()\n", 
c
.
ˇche_«me
);

4008 
skù
 = 1;

4015 i‡((!
vîbo£
 && 
	`DCMD_HDRSPEC
(
Êags
)Ë|| (vîbo£ && !
skù
))

4016 
	`mdb_¥ötf
("%<ul>%-?s %6s %6s %8s %8s %10s %10s %6s%</ul>\n",

4020 i‡(
skù
)

4021  (
DCMD_OK
);

4023 
maxmÆloc
 = 
c
.
ˇche_bufsize
 -  (
mÆloc_d©a
);

4024 #ifde‡
_LP64


4025 i‡(
c
.
ˇche_bufsize
 > 
UMEM_SECOND_ALIGN
)

4026 
maxmÆloc
 - (
mÆloc_d©a
);

4029 
	`bzîo
(&
mi
,  (mi));

4030 
mi
.
um_˝
 = &
c
;

4031 i‡(
vîbo£
)

4032 
mi
.
um_buckë
 =

4033 
	`mdb_zÆloc
((
UMI_MAX_BUCKET
 + 1Ë*  (*
mi
.
um_buckë
),

4034 
UM_SLEEP
 | 
UM_GC
);

4036 i‡(
	`mdb_pwÆk
("umem", (
mdb_wÆk_cb_t
)
um_umem_buf„r_cb
, &
mi
, 
addr
) ==

4038 
	`mdb_w¨n
("can't walk 'umem'");

4039  (
DCMD_ERR
);

4042 
ovîhód
 = 
mi
.
um_mÆloc_ovîhód
;

4043 
Æloˇãd
 = 
mi
.
um_mÆloc_size
;

4046 i‡(
mi
.
um_mÆloc
 != 0)

4047 
avg_mÆloc
 = (
Æloˇãd
 + (
mi
.
um_mÆloc
 - 1)/2) / mi.um_malloc;

4049 
avg_mÆloc
 = 0;

4081 i‡(
mi
.
um_mÆloc
 != 0) {

4082 
umem_¶ab_t
 
¶ab
;

4083 
uöçå_t
 
ßddr
 = (uöçå_t)
c
.
ˇche_nuŒ¶ab
.
¶ab_√xt
;

4085 i‡(
	`mdb_vªad
(&
¶ab
,  (¶ab), 
ßddr
) == -1) {

4086 
	`mdb_w¨n
("u«bÀÅÿªad sœbáà%p\n", 
ßddr
);

4088 
chunks
 = 
¶ab
.
¶ab_chunks
;

4089 i‡(
chunks
 !0 && 
c
.
ˇche_chunksize
 != 0 &&

4090 
chunks
 <
c
.
ˇche_¶absize
 / c.
ˇche_chunksize
) {

4091 
uötmax_t
 
≥r¶ab
 =

4092 
c
.
ˇche_¶absize
 -

4093 (
c
.
ˇche_chunksize
 * 
chunks
);

4095 i‡(
c
.
ˇche_Êags
 & 
UMF_HASH
) {

4096 
≥r¶ab
 + (
umem_¶ab_t
) +

4097 
chunks
 *

4098 ((
c
.
ˇche_Êags
 & 
UMF_AUDIT
) ?

4099  (
umem_buf˘l_audô_t
) :

4100  (
umem_buf˘l_t
));

4102 
ovîhód
 +=

4103 (
≥r¶ab
 * (
uötmax_t
)
mi
.
um_mÆloc
)/
chunks
;

4105 
	`mdb_w¨n
("invalid #chunks (%d) in slab %p\n",

4106 
chunks
, 
ßddr
);

4111 i‡(
Æloˇãd
 != 0)

4112 
ovîhód_p˘
 = (1000ULL * 
ovîhód
Ë/ 
Æloˇãd
;

4114 
ovîhód_p˘
 = 0;

4116 
	`mdb_¥ötf
("%0?p %6ld %6ld %8ld %8ld %10ld %10ld %3ld.%01ld%%\n",

4117 
addr
, 
c
.
ˇche_bufsize
, 
maxmÆloc
,

4118 
mi
.
um_mÆloc
, 
avg_mÆloc
, 
Æloˇãd
, 
ovîhód
,

4119 
ovîhód_p˘
 / 10, overhead_pct % 10);

4121 i‡(!
vîbo£
)

4122  (
DCMD_OK
);

4124 i‡(!
dump
)

4125 
	`mdb_¥ötf
("\n");

4127 i‡(
	`gë_umem_Æloc_sizes
(&
Æloc_sizes
, &
num
) == -1)

4128  (
DCMD_ERR
);

4130 
idx
 = 0; idx < 
num
; idx++) {

4131 i‡(
Æloc_sizes
[
idx
] =
c
.
ˇche_bufsize
)

4133 i‡(
Æloc_sizes
[
idx
] == 0) {

4134 
idx
 = 
num
;

4138 i‡(
idx
 =
num
) {

4139 
	`mdb_w¨n
(

4141 
addr
, 
c
.
ˇche_bufsize
);

4142  (
DCMD_ERR
);

4145 
mömÆloc
 = (
idx
 =0)? 0 : 
Æloc_sizes
[idx - 1];

4146 i‡(
mömÆloc
 > 0) {

4147 #ifde‡
_LP64


4148 i‡(
mömÆloc
 > 
UMEM_SECOND_ALIGN
)

4149 
mömÆloc
 - (
mÆloc_d©a
);

4151 
mömÆloc
 - (
mÆloc_d©a
);

4152 
mömÆloc
 += 1;

4155 i‡(
dump
) {

4156 
idx
 = 
mömÆloc
; idx <
maxmÆloc
; idx++)

4157 
	`mdb_¥ötf
("%d\t%d\n", 
idx
, 
mi
.
um_buckë
[idx]);

4158 
	`mdb_¥ötf
("\n");

4160 
	`umem_mÆloc_¥öt_di°
(
mi
.
um_buckë
, 
mömÆloc
, 
maxmÆloc
,

4161 
maxbuckës
, 
möbuckësize
, 
geomëric
);

4164  (
DCMD_OK
);

4165 
	}
}

	@tools/umem.h

26 #i‚def 
_MDBMOD_UMEM_H


27 
	#_MDBMOD_UMEM_H


	)

29 #¥agm®
idít
 "%Z%%M% %I% %E% SMI"

31 
	~<mdb/mdb_mod≠i.h
>

32 
	~<umem_im∂.h
>

34 #ifde‡
__˝lu•lus


38 
umem_ªady
;

39 
uöt32_t
 
umem_°ack_dïth
;

41 
umem_ˇche_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

42 
umem_ˇche_wÆk_°ï
(
mdb_wÆk_°©e_t
 *);

43 
umem_ˇche_wÆk_föi
(
mdb_wÆk_°©e_t
 *);

45 
umem_˝u_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

46 
umem_˝u_wÆk_°ï
(
mdb_wÆk_°©e_t
 *);

47 
umem_˝u_wÆk_föi
(
mdb_wÆk_°©e_t
 *);

49 
umem_˝u_ˇche_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

50 
umem_˝u_ˇche_wÆk_°ï
(
mdb_wÆk_°©e_t
 *);

52 
umem_¶ab_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

53 
umem_¶ab_wÆk_∑πül_öô
(
mdb_wÆk_°©e_t
 *);

54 
umem_¶ab_wÆk_°ï
(
mdb_wÆk_°©e_t
 *);

56 
umem_hash_wÆk_öô
(
mdb_wÆk_°©e_t
 *
w•
);

57 
umem_hash_wÆk_°ï
(
mdb_wÆk_°©e_t
 *
w•
);

58 
umem_hash_wÆk_föi
(
mdb_wÆk_°©e_t
 *
w•
);

60 
umem_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

61 
buf˘l_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

62 
‰ìmem_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

63 
‰ì˘l_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

65 
umem_wÆk_°ï
(
mdb_wÆk_°©e_t
 *);

66 
umem_wÆk_föi
(
mdb_wÆk_°©e_t
 *);

68 
buf˘l_hi°‹y_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

69 
buf˘l_hi°‹y_wÆk_°ï
(
mdb_wÆk_°©e_t
 *);

70 
buf˘l_hi°‹y_wÆk_föi
(
mdb_wÆk_°©e_t
 *);

72 
Ælocdby_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

73 
Ælocdby_wÆk_°ï
(
mdb_wÆk_°©e_t
 *);

74 
Ælocdby_wÆk_föi
(
mdb_wÆk_°©e_t
 *);

76 
‰ìdby_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

77 
‰ìdby_wÆk_°ï
(
mdb_wÆk_°©e_t
 *);

78 
‰ìdby_wÆk_föi
(
mdb_wÆk_°©e_t
 *);

80 
umem_log_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

81 
umem_log_wÆk_°ï
(
mdb_wÆk_°©e_t
 *);

82 
umem_log_wÆk_föi
(
mdb_wÆk_°©e_t
 *);

84 
Ælocdby_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

85 
Ælocdby_wÆk_°ï
(
mdb_wÆk_°©e_t
 *);

86 
Ælocdby_wÆk_föi
(
mdb_wÆk_°©e_t
 *);

88 
‰ìdby_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

89 
‰ìdby_wÆk_°ï
(
mdb_wÆk_°©e_t
 *);

90 
‰ìdby_wÆk_föi
(
mdb_wÆk_°©e_t
 *);

92 
vmem_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

93 
vmem_wÆk_°ï
(
mdb_wÆk_°©e_t
 *);

94 
vmem_wÆk_föi
(
mdb_wÆk_°©e_t
 *);

96 
vmem_po°fix_wÆk_°ï
(
mdb_wÆk_°©e_t
 *);

98 
vmem_£g_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

99 
vmem_£g_wÆk_°ï
(
mdb_wÆk_°©e_t
 *);

100 
vmem_£g_wÆk_föi
(
mdb_wÆk_°©e_t
 *);

102 
vmem_•™_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

103 
vmem_Æloc_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

104 
vmem_‰ì_wÆk_öô
(
mdb_wÆk_°©e_t
 *);

106 
Ælocdby
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

107 
buf˘l
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

108 
buf˘l_audô
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

109 
‰ìdby
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

110 
umÆog
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

111 
umau£rs
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

112 
umem_ˇche
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

113 
umem_log
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

114 
umem_mÆloc_di°
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

115 
umem_mÆloc_öfo
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

116 
umem_°©us
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

117 
umem_vîify
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

118 
umem_vîify_Æloc
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

119 
umem_vîify_‰ì
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

120 
vmem
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

121 
vmem_£g
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

122 
wh©is
(
uöçå_t
, 
uöt_t
, , c⁄° 
mdb_¨g_t
 *);

124 
buf˘l_hñp
();

125 
umem_mÆloc_di°_hñp
();

126 
umem_mÆloc_öfo_hñp
();

127 
vmem_£g_hñp
();

132 
umem_öô
();

133 
umem_gë_magsize
(c⁄° 
umem_ˇche_t
 *);

134 
size_t
 
umem_e°im©e_Æloˇãd
(
uöçå_t
, c⁄° 
umem_ˇche_t
 *);

136 #ifde‡
__˝lu•lus


	@tools/umem_pagesize.h

27 #i‚def 
_UMEM_PAGESIZE_H


28 
	#_UMEM_PAGESIZE_H


	)

30 #¥agm®
idít
 "%Z%%M% %I% %E% SMI"

32 #ifdef 
__˝lu•lus


36 
size_t
 
umem_∑gesize
;

37 #unde‡
PAGESIZE


38 
	#PAGESIZE
 (
umem_∑gesize
)

	)

40 #ifdef 
__˝lu•lus


	@umem.c

368 
	~"c⁄fig.h
"

370 
	~<umem_im∂.h
>

371 
	~<sys/vmem_im∂_u£r.h
>

372 
	~"umem_ba£.h
"

373 
	~"vmem_ba£.h
"

375 #i‡
HAVE_SYS_PROCESSOR_H


376 
	~<sys/¥o˚ss‹.h
>

378 #i‡
HAVE_SYS_SYSMACROS_H


379 
	~<sys/sysma¸os.h
>

382 #i‡
HAVE_ALLOCA_H


383 
	~<Æloˇ.h
>

385 
	~<î∫o.h
>

386 
	~<limôs.h
>

387 
	~<°dio.h
>

388 
	~<°dlib.h
>

389 
	~<°rög.h
>

390 #i‡
HAVE_STRINGS_H


391 
	~<°rögs.h
>

393 
	~<sig«l.h
>

394 #i‡
HAVE_UNISTD_H


395 
	~<uni°d.h
>

397 #i‡
HAVE_ATOMIC_H


398 
	~<©omic.h
>

401 
	~"misc.h
"

403 
	#UMEM_VMFLAGS
(
umÊag
Ë(
VM_NOSLEEP
)

	)

405 
size_t
 
	g∑gesize
;

417 c⁄° 
	gumem_Æloc_sizes
[] = {

418 #ifde‡
_LP64


433 
P2ALIGN
(8192 / 7, 64),

434 
P2ALIGN
(8192 / 6, 64),

435 
P2ALIGN
(8192 / 5, 64),

436 
P2ALIGN
(8192 / 4, 64),

437 
P2ALIGN
(8192 / 3, 64),

438 
P2ALIGN
(8192 / 2, 64),

439 
P2ALIGN
(8192 / 1, 64),

443 
	#NUM_ALLOC_SIZES
 ( (
umem_Æloc_sizes
Ë/  (*umem_Æloc_sizes))

	)

445 
	#UMEM_MAXBUF
 16384

	)

447 
umem_magty≥_t
 
	gumem_magty≥
[] = {

462 
uöt32_t
 
	gumem_max_n˝us
;

464 
uöt32_t
 
	gumem_°ack_dïth
 = 15;

465 
uöt32_t
 
	gumem_ª≠_öãrvÆ
 = 10;

466 
uöt_t
 
	gumem_dïŸ_c⁄ã¡i⁄
 = 2;

467 
uöt_t
 
	gumem_ab‹t
 = 1;

468 
uöt_t
 
	gumem_ouçut
 = 0;

469 
uöt_t
 
	gumem_loggög
 = 0;

470 
uöt32_t
 
	gumem_mtbf
 = 0;

471 
size_t
 
	gumem_å™ß˘i⁄_log_size
;

472 
size_t
 
	gumem_c⁄ã¡_log_size
;

473 
size_t
 
	gumem_Áûuª_log_size
;

474 
size_t
 
	gumem_¶ab_log_size
;

475 
size_t
 
	gumem_c⁄ã¡_maxßve
 = 256;

476 
size_t
 
	gumem_lôe_mösize
 = 0;

477 
size_t
 
	gumem_lôe_maxÆign
 = 1024;

478 
size_t
 
	gumem_maxvîify
;

479 
size_t
 
	gumem_möfúewÆl
;

481 
uöt_t
 
	gumem_Êags
 = 0;

483 
muãx_t
 
	gumem_öô_lock
 = 
DEFAULTMUTEX
;

484 
c⁄d_t
 
	gumem_öô_cv
 = 
DEFAULTCV
;

485 
thªad_t
 
	gumem_öô_thr
;

486 
	gumem_öô_ív_ªady
;

487 
	gumem_ªady
 = 
UMEM_READY_STARTUP
;

489 
umem_noÁû_ˇŒback_t
 *
	gnoÁû_ˇŒback
;

490 
muãx_t
 
	gumem_noÁû_exô_lock
 = 
DEFAULTMUTEX
;

491 
thªad_t
 
	gumem_noÁû_exô_thr
;

493 
umem_ˇche_t
 *
	gumem_¶ab_ˇche
;

494 
umem_ˇche_t
 *
	gumem_buf˘l_ˇche
;

495 
umem_ˇche_t
 *
	gumem_buf˘l_audô_ˇche
;

497 
muãx_t
 
	gumem_Êags_lock
 = 
DEFAULTMUTEX
;

499 
vmem_t
 *
	ghóp_¨ía
;

500 
vmem_Æloc_t
 *
	ghóp_Æloc
;

501 
vmem_‰ì_t
 *
	ghóp_‰ì
;

503 
vmem_t
 *
	gumem_öã∫Æ_¨ía
;

504 
vmem_t
 *
	gumem_ˇche_¨ía
;

505 
vmem_t
 *
	gumem_hash_¨ía
;

506 
vmem_t
 *
	gumem_log_¨ía
;

507 
vmem_t
 *
	gumem_ovîsize_¨ía
;

508 
vmem_t
 *
	gumem_va_¨ía
;

509 
vmem_t
 *
	gumem_deÁu…_¨ía
;

510 
vmem_t
 *
	gumem_fúewÆl_va_¨ía
;

511 
vmem_t
 *
	gumem_fúewÆl_¨ía
;

513 
vmem_t
 *
	gumem_memÆign_¨ía
;

515 
umem_log_hódî_t
 *
	gumem_å™ß˘i⁄_log
;

516 
umem_log_hódî_t
 *
	gumem_c⁄ã¡_log
;

517 
umem_log_hódî_t
 *
	gumem_Áûuª_log
;

518 
umem_log_hódî_t
 *
	gumem_¶ab_log
;

520 
thªad_t
 
_thr_£lf
();

521 #i‡
deföed
(
__MACH__
Ë|| deföed(
__FªeBSD__
)

522 
	#CPUHINT
(Ë(()(
	`_thr_£lf
()))

	)

525 #i‚de‡
CPUHINT


526 
	#CPUHINT
(Ë(
	`_thr_£lf
())

	)

529 
	#CPUHINT_MAX
(Ë
INT_MAX


	)

531 
	#CPU
(
mask
Ë(
umem_˝us
 + (
	`CPUHINT
(Ë& (mask)))

	)

532 
umem_˝u_t
 
	gumem_°¨tup_˝u
 = {

533 
UMEM_CACHE_SIZE
(0),

537 
uöt32_t
 
	gumem_˝u_mask
 = 0;

538 
umem_˝u_t
 *
	gumem_˝us
 = &
umem_°¨tup_˝u
;

540 vﬁ©ûê
uöt32_t
 
	gumem_ª≠ög
;

542 
thªad_t
 
	gumem_upd©e_thr
;

543 
timevÆ
 
	gumem_upd©e_√xt
;

544 vﬁ©ûê
thªad_t
 
	gumem_°_upd©e_thr
;

546 
	#IN_UPDATE
(Ë(
	`thr_£lf
(Ë=
umem_upd©e_thr
 || \

547 
	`thr_£lf
(Ë=
umem_°_upd©e_thr
)

	)

548 
	#IN_REAP
(Ë
	`IN_UPDATE
()

	)

550 
muãx_t
 
	gumem_upd©e_lock
 = 
DEFAULTMUTEX
;

551 
c⁄d_t
 
	gumem_upd©e_cv
 = 
DEFAULTCV
;

553 vﬁ©ûê
hπime_t
 
	gumem_ª≠_√xt
;

555 
muãx_t
 
	gumem_ˇche_lock
 = 
DEFAULTMUTEX
;

557 #ifde‡
UMEM_STANDALONE


558 
umem_ˇche_t
 
	gumem_nuŒ_ˇche
;

559 c⁄° 
umem_ˇche_t
 
	gumem_nuŒ_ˇche_ãm∂©e
 = {

561 
umem_ˇche_t
 
umem_nuŒ_ˇche
 = {

569 
NULL
, NULL, NULL, NULL,

570 
NULL
,

572 &
umem_nuŒ_ˇche
, &umem_null_cache,

573 &
umem_nuŒ_ˇche
, &umem_null_cache,

575 
DEFAULTMUTEX
,

577 &
umem_nuŒ_ˇche
.
ˇche_nuŒ¶ab
,

579 &
umem_nuŒ_ˇche
,

580 
NULL
,

581 &
umem_nuŒ_ˇche
.
ˇche_nuŒ¶ab
,

582 &
umem_nuŒ_ˇche
.
ˇche_nuŒ¶ab
,

583 
NULL
,

587 
NULL
,

588 
NULL
,

589 
DEFAULTMUTEX
,

590 
NULL
, {

591 
NULL
, 0, 0, 0, 0

593 
NULL
, 0, 0, 0, 0

596 
DEFAULTMUTEX
,

597 0, 0, 
NULL
, NULL, -1, -1, 0

602 
	#ALLOC_TABLE_4
 \

603 &
umem_nuŒ_ˇche
, &umem_nuŒ_ˇche, &umem_nuŒ_ˇche, &
	)
umem_null_cache

605 
	#ALLOC_TABLE_64
 \

606 
ALLOC_TABLE_4
, ALLOC_TABLE_4, ALLOC_TABLE_4, ALLOC_TABLE_4, \

607 
ALLOC_TABLE_4
, ALLOC_TABLE_4, ALLOC_TABLE_4, ALLOC_TABLE_4, \

608 
ALLOC_TABLE_4
, ALLOC_TABLE_4, ALLOC_TABLE_4, ALLOC_TABLE_4, \

609 
ALLOC_TABLE_4
, ALLOC_TABLE_4, ALLOC_TABLE_4, 
	)
ALLOC_TABLE_4

611 
	#ALLOC_TABLE_1024
 \

612 
ALLOC_TABLE_64
, ALLOC_TABLE_64, ALLOC_TABLE_64, ALLOC_TABLE_64, \

613 
ALLOC_TABLE_64
, ALLOC_TABLE_64, ALLOC_TABLE_64, ALLOC_TABLE_64, \

614 
ALLOC_TABLE_64
, ALLOC_TABLE_64, ALLOC_TABLE_64, ALLOC_TABLE_64, \

615 
ALLOC_TABLE_64
, ALLOC_TABLE_64, ALLOC_TABLE_64, 
	)
ALLOC_TABLE_64

617 
umem_ˇche_t
 *
	gumem_Æloc_èbÀ
[
UMEM_MAXBUF
 >> 
UMEM_ALIGN_SHIFT
] = {

618 
ALLOC_TABLE_1024
,

619 
ALLOC_TABLE_1024


624 
ˇddr_t
 
	gumem_mö_°ack
;

625 
ˇddr_t
 
	gumem_max_°ack
;

632 
_c⁄d_waô
(
c⁄d_t
 *
cv
, 
muãx_t
 *
muãx
);

634 
	#UMERR_MODIFIED
 0

	)

635 
	#UMERR_REDZONE
 1

	)

636 
	#UMERR_DUPFREE
 2

	)

637 
	#UMERR_BADADDR
 3

	)

638 
	#UMERR_BADBUFTAG
 4

	)

639 
	#UMERR_BADBUFCTL
 5

	)

640 
	#UMERR_BADCACHE
 6

	)

641 
	#UMERR_BADSIZE
 7

	)

642 
	#UMERR_BADBASE
 8

	)

645 
hπime_t
 
	mump_time°amp
;

646 
	mump_îr‹
;

647 *
	mump_buf„r
;

648 *
	mump_ªÆbuf
;

649 
umem_ˇche_t
 *
	mump_ˇche
;

650 
umem_ˇche_t
 *
	mump_ªÆˇche
;

651 
umem_¶ab_t
 *
	mump_¶ab
;

652 
umem_buf˘l_t
 *
	mump_buf˘l
;

653 } 
	gumem_ab‹t_öfo
;

656 
	$c›y_∑âîn
(
uöt64_t
 
∑âîn
, *
buf_¨g
, 
size_t
 
size
)

658 
uöt64_t
 *
bu„nd
 = (uöt64_à*)((*)
buf_¨g
 + 
size
);

659 
uöt64_t
 *
buf
 = 
buf_¨g
;

661 
buf
 < 
bu„nd
)

662 *
buf
++ = 
∑âîn
;

663 
	}
}

666 
	$vîify_∑âîn
(
uöt64_t
 
∑âîn
, *
buf_¨g
, 
size_t
 
size
)

668 
uöt64_t
 *
bu„nd
 = (uöt64_à*)((*)
buf_¨g
 + 
size
);

669 
uöt64_t
 *
buf
;

671 
buf
 = 
buf_¨g
; bu‡< 
bu„nd
; buf++)

672 i‡(*
buf
 !
∑âîn
)

673  (
buf
);

674  (
NULL
);

675 
	}
}

678 
	$vîify_™d_c›y_∑âîn
(
uöt64_t
 
ﬁd
, uöt64_à
√w
, *
buf_¨g
, 
size_t
 
size
)

680 
uöt64_t
 *
bu„nd
 = (uöt64_à*)((*)
buf_¨g
 + 
size
);

681 
uöt64_t
 *
buf
;

683 
buf
 = 
buf_¨g
; bu‡< 
bu„nd
; buf++) {

684 i‡(*
buf
 !
ﬁd
) {

685 
	`c›y_∑âîn
(
ﬁd
, 
buf_¨g
,

686 (*)
buf
 - (*)
buf_¨g
);

687  (
buf
);

689 *
buf
 = 
√w
;

692  (
NULL
);

693 
	}
}

696 
umem_ˇche_≠∂yÆl
((*
func
)(
umem_ˇche_t
 *))

698 
umem_ˇche_t
 *
˝
;

700 (Ë
	`muãx_lock
(&
umem_ˇche_lock
);

701 
˝
 = 
umem_nuŒ_ˇche
.
ˇche_√xt
; cp != &umem_null_cache;

702 
˝
 = cp->
ˇche_√xt
)

703 
	`func
(
˝
);

704 (Ë
	`muãx_u∆ock
(&
umem_ˇche_lock
);

705 
	}
}

708 
	$umem_add_upd©e_u∆ocked
(
umem_ˇche_t
 *
˝
, 
Êags
)

710 
umem_ˇche_t
 *
˙ext
, *
˝ªv
;

712 
Êags
 &~
UMU_ACTIVE
;

714 i‡(!
Êags
)

717 i‡(
˝
->
ˇche_uÊags
 & 
UMU_ACTIVE
) {

718 
˝
->
ˇche_uÊags
 |
Êags
;

720 i‡(
˝
->
ˇche_u√xt
 !
NULL
) {

721 
	`ASSERT
(
˝
->
ˇche_uÊags
 != 0);

722 
˝
->
ˇche_uÊags
 |
Êags
;

724 
	`ASSERT
(
˝
->
ˇche_uÊags
 == 0);

725 
˝
->
ˇche_uÊags
 = 
Êags
;

726 
˝
->
ˇche_u√xt
 = 
˙ext
 = &
umem_nuŒ_ˇche
;

727 
˝
->
ˇche_u¥ev
 = 
˝ªv
 = 
umem_nuŒ_ˇche
.cache_uprev;

728 
˙ext
->
ˇche_u¥ev
 = 
˝
;

729 
˝ªv
->
ˇche_u√xt
 = 
˝
;

732 
	}
}

735 
	$umem_add_upd©e
(
umem_ˇche_t
 *
˝
, 
Êags
)

737 (Ë
	`muãx_lock
(&
umem_upd©e_lock
);

739 
	`umem_add_upd©e_u∆ocked
(
˝
, 
Êags
);

741 i‡(!
	`IN_UPDATE
())

742 (Ë
	`c⁄d_brﬂdˇ°
(&
umem_upd©e_cv
);

744 (Ë
	`muãx_u∆ock
(&
umem_upd©e_lock
);

745 
	}
}

752 
	$umem_ªmove_upd©es
(
umem_ˇche_t
 *
˝
)

754 (Ë
	`muãx_lock
(&
umem_upd©e_lock
);

759 
˝
->
ˇche_uÊags
 & 
UMU_ACTIVE
) {

760 
	`ASSERT
(
˝
->
ˇche_u√xt
 =
NULL
);

762 
˝
->
ˇche_uÊags
 |
UMU_NOTIFY
;

767 
	`ASSERT
(
umem_upd©e_thr
 !0 || 
umem_°_upd©e_thr
 != 0);

768 
	`ASSERT
(
umem_upd©e_thr
 !
	`thr_£lf
() &&

769 
umem_°_upd©e_thr
 !
	`thr_£lf
());

771 (Ë
	`_c⁄d_waô
(&
umem_upd©e_cv
, &
umem_upd©e_lock
);

776 i‡(
˝
->
ˇche_u√xt
 !
NULL
) {

777 
˝
->
ˇche_u¥ev
->
ˇche_u√xt
 = cp->cache_unext;

778 
˝
->
ˇche_u√xt
->
ˇche_u¥ev
 = cp->cache_uprev;

779 
˝
->
ˇche_u¥ev
 = cp->
ˇche_u√xt
 = 
NULL
;

780 
˝
->
ˇche_uÊags
 = 0;

785 
	`ASSERT
(
˝
->
ˇche_u√xt
 =
NULL
 && cp->
ˇche_uÊags
 == 0);

786 (Ë
	`muãx_u∆ock
(&
umem_upd©e_lock
);

787 
	}
}

790 
	$umem_upd©óŒ
(
Êags
)

792 
umem_ˇche_t
 *
˝
;

799 (Ë
	`muãx_lock
(&
umem_ˇche_lock
);

800 (Ë
	`muãx_lock
(&
umem_upd©e_lock
);

802 
˝
 = 
umem_nuŒ_ˇche
.
ˇche_√xt
; cp != &umem_null_cache;

803 
˝
 = cp->
ˇche_√xt
)

804 
	`umem_add_upd©e_u∆ocked
(
˝
, 
Êags
);

806 i‡(!
	`IN_UPDATE
())

807 (Ë
	`c⁄d_brﬂdˇ°
(&
umem_upd©e_cv
);

809 (Ë
	`muãx_u∆ock
(&
umem_upd©e_lock
);

810 (Ë
	`muãx_u∆ock
(&
umem_ˇche_lock
);

811 
	}
}

816 
umem_¶ab_t
 *

817 
	$umem_föd¶ab
(
umem_ˇche_t
 *
˝
, *
buf
)

819 
umem_¶ab_t
 *
•
;

821 (Ë
	`muãx_lock
(&
˝
->
ˇche_lock
);

822 
•
 = 
˝
->
ˇche_nuŒ¶ab
.
¶ab_√xt
;

823 
•
 !&
˝
->
ˇche_nuŒ¶ab
; s∞•->
¶ab_√xt
) {

824 i‡(
	`UMEM_SLAB_MEMBER
(
•
, 
buf
)) {

825 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_lock
);

826  (
•
);

829 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_lock
);

831  (
NULL
);

832 
	}
}

835 
	$umem_îr‹
(
îr‹
, 
umem_ˇche_t
 *
˝¨g
, *
buÁrg
)

837 
umem_bu·ag_t
 *
bç
 = 
NULL
;

838 
umem_buf˘l_t
 *
b˝
 = 
NULL
;

839 
umem_ˇche_t
 *
˝
 = 
˝¨g
;

840 
umem_¶ab_t
 *
•
;

841 
uöt64_t
 *
off
;

842 *
buf
 = 
buÁrg
;

844 
ﬁd_loggög
 = 
umem_loggög
;

846 
umem_loggög
 = 0;

848 
umem_ab‹t_öfo
.
ump_time°amp
 = 
	`gëhπime
();

850 
•
 = 
	`umem_föd¶ab
(
˝
, 
buf
);

851 i‡(
•
 =
NULL
) {

852 
˝
 = 
umem_nuŒ_ˇche
.
ˇche_¥ev
; cp != &umem_null_cache;

853 
˝
 = cp->
ˇche_¥ev
) {

854 i‡((
•
 = 
	`umem_föd¶ab
(
˝
, 
buf
)Ë!
NULL
)

859 i‡(
•
 =
NULL
) {

860 
˝
 = 
NULL
;

861 
îr‹
 = 
UMERR_BADADDR
;

863 i‡(
˝
 !
˝¨g
)

864 
îr‹
 = 
UMERR_BADCACHE
;

866 
buf
 = (*)
buÁrg
 - ((
uöçå_t
)bufarg -

867 (
uöçå_t
)
•
->
¶ab_ba£
Ë% 
˝
->
ˇche_chunksize
;

868 i‡(
buf
 !
buÁrg
)

869 
îr‹
 = 
UMERR_BADBASE
;

870 i‡(
˝
->
ˇche_Êags
 & 
UMF_BUFTAG
)

871 
bç
 = 
	`UMEM_BUFTAG
(
˝
, 
buf
);

872 i‡(
˝
->
ˇche_Êags
 & 
UMF_HASH
) {

873 (Ë
	`muãx_lock
(&
˝
->
ˇche_lock
);

874 
b˝
 = *
	`UMEM_HASH
(
˝
, 
buf
); b˝; b˝ = b˝->
bc_√xt
)

875 i‡(
b˝
->
bc_addr
 =
buf
)

877 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_lock
);

878 i‡(
b˝
 =
NULL
 && 
bç
 != NULL)

879 
b˝
 = 
bç
->
bt_buf˘l
;

880 i‡(
	`umem_föd¶ab
(
˝
->
ˇche_buf˘l_ˇche
, 
b˝
) ==

881 
NULL
 || 
	`P2PHASE
((
uöçå_t
)
b˝
, 
UMEM_ALIGN
) ||

882 
b˝
->
bc_addr
 !
buf
) {

883 
îr‹
 = 
UMERR_BADBUFCTL
;

884 
b˝
 = 
NULL
;

889 
umem_ab‹t_öfo
.
ump_îr‹
 = 
îr‹
;

890 
umem_ab‹t_öfo
.
ump_buf„r
 = 
buÁrg
;

891 
umem_ab‹t_öfo
.
ump_ªÆbuf
 = 
buf
;

892 
umem_ab‹t_öfo
.
ump_ˇche
 = 
˝¨g
;

893 
umem_ab‹t_öfo
.
ump_ªÆˇche
 = 
˝
;

894 
umem_ab‹t_öfo
.
ump_¶ab
 = 
•
;

895 
umem_ab‹t_öfo
.
ump_buf˘l
 = 
b˝
;

897 
	`umem_¥ötf
("umemállocator: ");

899 
îr‹
) {

901 
UMERR_MODIFIED
:

902 
	`umem_¥ötf
("buffer modifiedáfter being freed\n");

903 
off
 = 
	`vîify_∑âîn
(
UMEM_FREE_PATTERN
, 
buf
, 
˝
->
ˇche_vîify
);

904 i‡(
off
 =
NULL
)

905 
off
 = 
buf
;

906 
	`umem_¥ötf
("modification occurredát offset 0x%lx "

908 (
uöçå_t
)
off
 - (uöçå_t)
buf
,

909 (
l⁄gl⁄g_t
)
UMEM_FREE_PATTERN
, (l⁄gl⁄g_t)*
off
);

912 
UMERR_REDZONE
:

913 
	`umem_¥ötf
("redzone violation: writeÖastÉnd of buffer\n");

916 
UMERR_BADADDR
:

917 
	`umem_¥ötf
("invalid free: bufferÇot in cache\n");

920 
UMERR_DUPFREE
:

921 
	`umem_¥ötf
("duplicate free: buffer freedÅwice\n");

924 
UMERR_BADBUFTAG
:

925 
	`umem_¥ötf
("boundaryÅag corrupted\n");

926 
	`umem_¥ötf
("bcp ^ bxstat = %lx, should be %lx\n",

927 (
öçå_t
)
bç
->
bt_buf˘l
 ^ bç->
bt_bx°©
,

928 
UMEM_BUFTAG_FREE
);

931 
UMERR_BADBUFCTL
:

932 
	`umem_¥ötf
("bufctl corrupted\n");

935 
UMERR_BADCACHE
:

936 
	`umem_¥ötf
("buffer freedÅo wrong cache\n");

937 
	`umem_¥ötf
("buf„∏wa†Æloˇãd from %s,\n", 
˝
->
ˇche_«me
);

938 
	`umem_¥ötf
("calleráttempting freeÅo %s.\n",

939 
˝¨g
->
ˇche_«me
);

942 
UMERR_BADSIZE
:

943 
	`umem_¥ötf
("bad free: free size (%u) !=álloc size (%u)\n",

944 
	`UMEM_SIZE_DECODE
(((
uöt32_t
 *)
bç
)[0]),

945 
	`UMEM_SIZE_DECODE
(((
uöt32_t
 *)
bç
)[1]));

948 
UMERR_BADBASE
:

949 
	`umem_¥ötf
("bad free: freeáddress (%p) !=állocáddress "

950 "(%p)\n", 
buÁrg
, 
buf
);

954 
	`umem_¥ötf
("buffer=%p bufctl=%p cache: %s\n",

955 
buÁrg
, (*)
b˝
, 
˝¨g
->
ˇche_«me
);

957 i‡(
b˝
 !
NULL
 && (
˝
->
ˇche_Êags
 & 
UMF_AUDIT
) &&

958 
îr‹
 !
UMERR_BADBUFCTL
) {

959 
d
;

960 
time•ec_t
 
ts
;

961 
hπime_t
 
diff
;

962 
umem_buf˘l_audô_t
 *
bˇp
 = (umem_buf˘l_audô_à*)
b˝
;

964 
diff
 = 
umem_ab‹t_öfo
.
ump_time°amp
 - 
bˇp
->
bc_time°amp
;

965 
ts
.
tv_£c
 = 
diff
 / 
NANOSEC
;

966 
ts
.
tv_n£c
 = 
diff
 % 
NANOSEC
;

968 
	`umem_¥ötf
("¥eviou†å™ß˘i⁄ o¿buf„∏%p:\n", 
buf
);

969 
	`umem_¥ötf
("thread=%pÅime=T-%ld.%09ld slab=%p cache: %s\n",

970 (*)(
öçå_t
)
bˇp
->
bc_thªad
, 
ts
.
tv_£c
,Ås.
tv_n£c
,

971 (*)
•
, 
˝
->
ˇche_«me
);

972 
d
 = 0; d < 
	`MIN
(
bˇp
->
bc_dïth
, 
umem_°ack_dïth
); d++) {

973 (Ë
	`¥öt_sym
((*)
bˇp
->
bc_°ack
[
d
]);

974 
	`umem_¥ötf
("\n");

978 
	`umem_îr_ªcovîabÀ
("umem: heap corruption detected");

980 
umem_loggög
 = 
ﬁd_loggög
;

981 
	}
}

984 
	$umem_noÁû_ˇŒback
(
umem_noÁû_ˇŒback_t
 *
cb
)

986 
noÁû_ˇŒback
 = 
cb
;

987 
	}
}

990 
	$umem_Æloc_ªåy
(
umem_ˇche_t
 *
˝
, 
umÊag
)

992 i‡(
˝
 =&
umem_nuŒ_ˇche
) {

993 i‡(
	`umem_öô
())

999 i‡(
umÊag
 & 
UMEM_NOFAIL
) {

1000 
def_ªsu…
 = 
	`UMEM_CALLBACK_EXIT
(255);

1001 
ªsu…
 = 
def_ªsu…
;

1002 
umem_noÁû_ˇŒback_t
 *
ˇŒback
 = 
noÁû_ˇŒback
;

1004 i‡(
ˇŒback
 !
NULL
)

1005 
ªsu…
 = 
	`ˇŒback
();

1007 i‡(
ªsu…
 =
UMEM_CALLBACK_RETRY
)

1010 i‡((
ªsu…
 & ~0xFFË!
	`UMEM_CALLBACK_EXIT
(0)) {

1011 
	`log_mesßge
("noÁû cÆlbackÑëu∫ed %x\n", 
ªsu…
);

1012 
ªsu…
 = 
def_ªsu…
;

1018 i‡(
umem_noÁû_exô_thr
 =
	`thr_£lf
())

1019 
	`umem_∑nic
("recursive UMEM_CALLBACK_EXIT()\n");

1021 (Ë
	`muãx_lock
(&
umem_noÁû_exô_lock
);

1022 
umem_noÁû_exô_thr
 = 
	`thr_£lf
();

1023 
	`exô
(
ªsu…
 & 0xFF);

1027 
	}
}

1029 
umem_log_hódî_t
 *

1030 
	$umem_log_öô
(
size_t
 
logsize
)

1032 
umem_log_hódî_t
 *
lhp
;

1033 
nchunks
 = 4 * 
umem_max_n˝us
;

1034 
size_t
 
lhsize
 = 
	`off£tof
(
umem_log_hódî_t
, 
lh_˝u
[
umem_max_n˝us
]);

1035 
i
;

1037 i‡(
logsize
 == 0)

1038  (
NULL
);

1044 
lhsize
 = 
	`P2ROUNDUP
÷hsize, 
UMEM_ALIGN
);

1045 
lhp
 = 
	`vmem_xÆloc
(
umem_log_¨ía
, 
lhsize
, 64, 
	`P2NPHASE
(lhsize, 64), 0,

1046 
NULL
, NULL, 
VM_NOSLEEP
);

1047 i‡(
lhp
 =
NULL
)

1048 
Áû
;

1050 
	`bzîo
(
lhp
, 
lhsize
);

1052 (Ë
	`muãx_öô
(&
lhp
->
lh_lock
, 
USYNC_THREAD
, 
NULL
);

1053 
lhp
->
lh_nchunks
 = 
nchunks
;

1054 
lhp
->
lh_chunksize
 = 
	`P2ROUNDUP
(
logsize
 / 
nchunks
, 
PAGESIZE
);

1055 i‡(
lhp
->
lh_chunksize
 == 0)

1056 
lhp
->
lh_chunksize
 = 
PAGESIZE
;

1058 
lhp
->
lh_ba£
 = 
	`vmem_Æloc
(
umem_log_¨ía
,

1059 
lhp
->
lh_chunksize
 * 
nchunks
, 
VM_NOSLEEP
);

1060 i‡(
lhp
->
lh_ba£
 =
NULL
)

1061 
Áû
;

1063 
lhp
->
lh_‰ì
 = 
	`vmem_Æloc
(
umem_log_¨ía
,

1064 
nchunks
 *  (), 
VM_NOSLEEP
);

1065 i‡(
lhp
->
lh_‰ì
 =
NULL
)

1066 
Áû
;

1068 
	`bzîo
(
lhp
->
lh_ba£
,Ühp->
lh_chunksize
 * 
nchunks
);

1070 
i
 = 0; i < 
umem_max_n˝us
; i++) {

1071 
umem_˝u_log_hódî_t
 *
˛hp
 = &
lhp
->
lh_˝u
[
i
];

1072 (Ë
	`muãx_öô
(&
˛hp
->
˛h_lock
, 
USYNC_THREAD
, 
NULL
);

1073 
˛hp
->
˛h_chunk
 = 
i
;

1076 
i
 = 
umem_max_n˝us
; i < 
nchunks
; i++)

1077 
lhp
->
lh_‰ì
[
i
] = i;

1079 
lhp
->
lh_hód
 = 
umem_max_n˝us
;

1080 
lhp
->
lh_èû
 = 0;

1082  (
lhp
);

1084 
Áû
:

1085 i‡(
lhp
 !
NULL
) {

1086 i‡(
lhp
->
lh_ba£
 !
NULL
)

1087 
	`vmem_‰ì
(
umem_log_¨ía
, 
lhp
->
lh_ba£
,

1088 
lhp
->
lh_chunksize
 * 
nchunks
);

1090 
	`vmem_x‰ì
(
umem_log_¨ía
, 
lhp
, 
lhsize
);

1092  (
NULL
);

1093 
	}
}

1096 
	$umem_log_íãr
(
umem_log_hódî_t
 *
lhp
, *
d©a
, 
size_t
 
size
)

1098 *
log•a˚
;

1099 
umem_˝u_log_hódî_t
 *
˛hp
 =

1100 &(
lhp
->
lh_˝u
[
	`CPU
(
umem_˝u_mask
)->
˝u_numbî
]);

1102 i‡(
lhp
 =
NULL
 || 
umem_loggög
 == 0)

1103  (
NULL
);

1105 (Ë
	`muãx_lock
(&
˛hp
->
˛h_lock
);

1106 
˛hp
->
˛h_hôs
++;

1107 i‡(
size
 > 
˛hp
->
˛h_avaû
) {

1108 (Ë
	`muãx_lock
(&
lhp
->
lh_lock
);

1109 
lhp
->
lh_hôs
++;

1110 
lhp
->
lh_‰ì
[lhp->
lh_èû
] = 
˛hp
->
˛h_chunk
;

1111 
lhp
->
lh_èû
 = (lhp->lh_èû + 1Ë%Ühp->
lh_nchunks
;

1112 
˛hp
->
˛h_chunk
 = 
lhp
->
lh_‰ì
[lhp->
lh_hód
];

1113 
lhp
->
lh_hód
 = (lhp->lh_hód + 1Ë%Ühp->
lh_nchunks
;

1114 
˛hp
->
˛h_cuºít
 = 
lhp
->
lh_ba£
 +

1115 
˛hp
->
˛h_chunk
 * 
lhp
->
lh_chunksize
;

1116 
˛hp
->
˛h_avaû
 = 
lhp
->
lh_chunksize
;

1117 i‡(
size
 > 
lhp
->
lh_chunksize
)

1118 
size
 = 
lhp
->
lh_chunksize
;

1119 (Ë
	`muãx_u∆ock
(&
lhp
->
lh_lock
);

1121 
log•a˚
 = 
˛hp
->
˛h_cuºít
;

1122 
˛hp
->
˛h_cuºít
 +
size
;

1123 
˛hp
->
˛h_avaû
 -
size
;

1124 
	`bc›y
(
d©a
, 
log•a˚
, 
size
);

1125 (Ë
	`muãx_u∆ock
(&
˛hp
->
˛h_lock
);

1126  (
log•a˚
);

1127 
	}
}

1129 
	#UMEM_AUDIT
(
Õ
, 
˝
, 
b˝
) \

1131 
umem_buf˘l_audô_t
 *
_b˝
 = (umem_buf˘l_audô_à*)(
b˝
); \

1132 
_b˝
->
bc_time°amp
 = 
	`gëhπime
(); \

1133 
_b˝
->
bc_thªad
 = 
	`thr_£lf
(); \

1134 
_b˝
->
bc_dïth
 = 
	`gëpc°ack
(_b˝->
bc_°ack
, 
umem_°ack_dïth
, \

1135 (
˝
 !
NULL
Ë&& (˝->
ˇche_Êags
 & 
UMF_CHECKSIGNAL
)); \

1136 
_b˝
->
bc_œ°log
 = 
	`umem_log_íãr
((
Õ
), _bcp, \

1137 
UMEM_BUFCTL_AUDIT_SIZE
); \

1138 }

	)

1141 
	$umem_log_evít
(
umem_log_hódî_t
 *
Õ
, 
umem_ˇche_t
 *
˝
,

1142 
umem_¶ab_t
 *
•
, *
addr
)

1144 
umem_buf˘l_audô_t
 *
b˝
;

1145 
	`UMEM_LOCAL_BUFCTL_AUDIT
(&
b˝
);

1147 
	`bzîo
(
b˝
, 
UMEM_BUFCTL_AUDIT_SIZE
);

1148 
b˝
->
bc_addr
 = 
addr
;

1149 
b˝
->
bc_¶ab
 = 
•
;

1150 
b˝
->
bc_ˇche
 = 
˝
;

1151 
	`UMEM_AUDIT
(
Õ
, 
˝
, 
b˝
);

1152 
	}
}

1157 
umem_¶ab_t
 *

1158 
	$umem_¶ab_¸óã
(
umem_ˇche_t
 *
˝
, 
umÊag
)

1160 
size_t
 
¶absize
 = 
˝
->
ˇche_¶absize
;

1161 
size_t
 
chunksize
 = 
˝
->
ˇche_chunksize
;

1162 
ˇche_Êags
 = 
˝
->cache_flags;

1163 
size_t
 
cﬁ‹
, 
chunks
;

1164 *
buf
, *
¶ab
;

1165 
umem_¶ab_t
 *
•
;

1166 
umem_buf˘l_t
 *
b˝
;

1167 
vmem_t
 *
vmp
 = 
˝
->
ˇche_¨ía
;

1169 
cﬁ‹
 = 
˝
->
ˇche_cﬁ‹
 + cp->
ˇche_Æign
;

1170 i‡(
cﬁ‹
 > 
˝
->
ˇche_maxcﬁ‹
)

1171 
cﬁ‹
 = 
˝
->
ˇche_möcﬁ‹
;

1172 
˝
->
ˇche_cﬁ‹
 = 
cﬁ‹
;

1174 
¶ab
 = 
	`vmem_Æloc
(
vmp
, 
¶absize
, 
	`UMEM_VMFLAGS
(
umÊag
));

1176 i‡(
¶ab
 =
NULL
)

1177 
vmem_Æloc_Áûuª
;

1179 
	`ASSERT
(
	`P2PHASE
((
uöçå_t
)
¶ab
, 
vmp
->
vm_qu™tum
) == 0);

1181 i‡(!(
˝
->
ˇche_cÊags
 & 
UMC_NOTOUCH
) &&

1182 (
˝
->
ˇche_Êags
 & 
UMF_DEADBEEF
))

1183 
	`c›y_∑âîn
(
UMEM_UNINITIALIZED_PATTERN
, 
¶ab
, 
¶absize
);

1185 i‡(
ˇche_Êags
 & 
UMF_HASH
) {

1186 i‡((
•
 = 
	`_umem_ˇche_Æloc
(
umem_¶ab_ˇche
, 
umÊag
)Ë=
NULL
)

1187 
¶ab_Æloc_Áûuª
;

1188 
chunks
 = (
¶absize
 - 
cﬁ‹
Ë/ 
chunksize
;

1190 
•
 = 
	`UMEM_SLAB
(
˝
, 
¶ab
);

1191 
chunks
 = (
¶absize
 -  (
umem_¶ab_t
Ë- 
cﬁ‹
Ë/ 
chunksize
;

1194 
•
->
¶ab_ˇche
 = 
˝
;

1195 
•
->
¶ab_hód
 = 
NULL
;

1196 
•
->
¶ab_ªf˙t
 = 0;

1197 
•
->
¶ab_ba£
 = 
buf
 = 
¶ab
 + 
cﬁ‹
;

1198 
•
->
¶ab_chunks
 = 
chunks
;

1200 
	`ASSERT
(
chunks
 > 0);

1201 
chunks
-- != 0) {

1202 i‡(
ˇche_Êags
 & 
UMF_HASH
) {

1203 
b˝
 = 
	`_umem_ˇche_Æloc
(
˝
->
ˇche_buf˘l_ˇche
, 
umÊag
);

1204 i‡(
b˝
 =
NULL
)

1205 
buf˘l_Æloc_Áûuª
;

1206 i‡(
ˇche_Êags
 & 
UMF_AUDIT
) {

1207 
umem_buf˘l_audô_t
 *
bˇp
 =

1208 (
umem_buf˘l_audô_t
 *)
b˝
;

1209 
	`bzîo
(
bˇp
, 
UMEM_BUFCTL_AUDIT_SIZE
);

1210 
bˇp
->
bc_ˇche
 = 
˝
;

1212 
b˝
->
bc_addr
 = 
buf
;

1213 
b˝
->
bc_¶ab
 = 
•
;

1215 
b˝
 = 
	`UMEM_BUFCTL
(
˝
, 
buf
);

1217 i‡(
ˇche_Êags
 & 
UMF_BUFTAG
) {

1218 
umem_bu·ag_t
 *
bç
 = 
	`UMEM_BUFTAG
(
˝
, 
buf
);

1219 
bç
->
bt_ªdz⁄e
 = 
UMEM_REDZONE_PATTERN
;

1220 
bç
->
bt_buf˘l
 = 
b˝
;

1221 
bç
->
bt_bx°©
 = (
öçå_t
)
b˝
 ^ 
UMEM_BUFTAG_FREE
;

1222 i‡(
ˇche_Êags
 & 
UMF_DEADBEEF
) {

1223 
	`c›y_∑âîn
(
UMEM_FREE_PATTERN
, 
buf
,

1224 
˝
->
ˇche_vîify
);

1227 
b˝
->
bc_√xt
 = 
•
->
¶ab_hód
;

1228 
•
->
¶ab_hód
 = 
b˝
;

1229 
buf
 +
chunksize
;

1232 
	`umem_log_evít
(
umem_¶ab_log
, 
˝
, 
•
, 
¶ab
);

1234  (
•
);

1236 
buf˘l_Æloc_Áûuª
:

1238 (
b˝
 = 
•
->
¶ab_hód
Ë!
NULL
) {

1239 
•
->
¶ab_hód
 = 
b˝
->
bc_√xt
;

1240 
	`_umem_ˇche_‰ì
(
˝
->
ˇche_buf˘l_ˇche
, 
b˝
);

1242 
	`_umem_ˇche_‰ì
(
umem_¶ab_ˇche
, 
•
);

1244 
¶ab_Æloc_Áûuª
:

1246 
	`vmem_‰ì
(
vmp
, 
¶ab
, 
¶absize
);

1248 
vmem_Æloc_Áûuª
:

1250 
	`umem_log_evít
(
umem_Áûuª_log
, 
˝
, 
NULL
, NULL);

1251 
	`©omic_add_64
(&
˝
->
ˇche_Æloc_Áû
, 1);

1253  (
NULL
);

1254 
	}
}

1260 
	$umem_¶ab_de°roy
(
umem_ˇche_t
 *
˝
, 
umem_¶ab_t
 *
•
)

1262 
vmem_t
 *
vmp
 = 
˝
->
ˇche_¨ía
;

1263 *
¶ab
 = (*)
	`P2ALIGN
((
uöçå_t
)
•
->
¶ab_ba£
, 
vmp
->
vm_qu™tum
);

1265 i‡(
˝
->
ˇche_Êags
 & 
UMF_HASH
) {

1266 
umem_buf˘l_t
 *
b˝
;

1267 (
b˝
 = 
•
->
¶ab_hód
Ë!
NULL
) {

1268 
•
->
¶ab_hód
 = 
b˝
->
bc_√xt
;

1269 
	`_umem_ˇche_‰ì
(
˝
->
ˇche_buf˘l_ˇche
, 
b˝
);

1271 
	`_umem_ˇche_‰ì
(
umem_¶ab_ˇche
, 
•
);

1273 
	`vmem_‰ì
(
vmp
, 
¶ab
, 
˝
->
ˇche_¶absize
);

1274 
	}
}

1280 
	$umem_¶ab_Æloc
(
umem_ˇche_t
 *
˝
, 
umÊag
)

1282 
umem_buf˘l_t
 *
b˝
, **
hash_buckë
;

1283 
umem_¶ab_t
 *
•
;

1284 *
buf
;

1286 (Ë
	`muãx_lock
(&
˝
->
ˇche_lock
);

1287 
˝
->
ˇche_¶ab_Æloc
++;

1288 
•
 = 
˝
->
ˇche_‰ìli°
;

1289 
	`ASSERT
(
•
->
¶ab_ˇche
 =
˝
);

1290 i‡(
•
->
¶ab_hód
 =
NULL
) {

1294 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_lock
);

1295 i‡(
˝
 =&
umem_nuŒ_ˇche
)

1296  (
NULL
);

1297 i‡((
•
 = 
	`umem_¶ab_¸óã
(
˝
, 
umÊag
)Ë=
NULL
)

1298  (
NULL
);

1299 (Ë
	`muãx_lock
(&
˝
->
ˇche_lock
);

1300 
˝
->
ˇche_¶ab_¸óã
++;

1301 i‡((
˝
->
ˇche_bu·ŸÆ
 +
•
->
¶ab_chunks
Ë> cp->
ˇche_bufmax
)

1302 
˝
->
ˇche_bufmax
 = cp->
ˇche_bu·ŸÆ
;

1303 
•
->
¶ab_√xt
 = 
˝
->
ˇche_‰ìli°
;

1304 
•
->
¶ab_¥ev
 = 
˝
->
ˇche_‰ìli°
->slab_prev;

1305 
•
->
¶ab_√xt
->
¶ab_¥ev
 = sp;

1306 
•
->
¶ab_¥ev
->
¶ab_√xt
 = sp;

1307 
˝
->
ˇche_‰ìli°
 = 
•
;

1310 
•
->
¶ab_ªf˙t
++;

1311 
	`ASSERT
(
•
->
¶ab_ªf˙t
 <•->
¶ab_chunks
);

1317 
b˝
 = 
•
->
¶ab_hód
;

1318 i‡((
•
->
¶ab_hód
 = 
b˝
->
bc_√xt
Ë=
NULL
) {

1319 
˝
->
ˇche_‰ìli°
 = 
•
->
¶ab_√xt
;

1320 
	`ASSERT
(
•
->
¶ab_ªf˙t
 =•->
¶ab_chunks
);

1323 i‡(
˝
->
ˇche_Êags
 & 
UMF_HASH
) {

1327 
buf
 = 
b˝
->
bc_addr
;

1328 
hash_buckë
 = 
	`UMEM_HASH
(
˝
, 
buf
);

1329 
b˝
->
bc_√xt
 = *
hash_buckë
;

1330 *
hash_buckë
 = 
b˝
;

1331 i‡((
˝
->
ˇche_Êags
 & (
UMF_AUDIT
 | 
UMF_BUFTAG
)) == UMF_AUDIT) {

1332 
	`UMEM_AUDIT
(
umem_å™ß˘i⁄_log
, 
˝
, 
b˝
);

1335 
buf
 = 
	`UMEM_BUF
(
˝
, 
b˝
);

1338 
	`ASSERT
(
	`UMEM_SLAB_MEMBER
(
•
, 
buf
));

1340 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_lock
);

1342  (
buf
);

1343 
	}
}

1349 
	$umem_¶ab_‰ì
(
umem_ˇche_t
 *
˝
, *
buf
)

1351 
umem_¶ab_t
 *
•
;

1352 
umem_buf˘l_t
 *
b˝
, **
¥ev_b˝p
;

1354 
	`ASSERT
(
buf
 !
NULL
);

1356 (Ë
	`muãx_lock
(&
˝
->
ˇche_lock
);

1357 
˝
->
ˇche_¶ab_‰ì
++;

1359 i‡(
˝
->
ˇche_Êags
 & 
UMF_HASH
) {

1363 
¥ev_b˝p
 = 
	`UMEM_HASH
(
˝
, 
buf
);

1364 (
b˝
 = *
¥ev_b˝p
Ë!
NULL
) {

1365 i‡(
b˝
->
bc_addr
 =
buf
) {

1366 *
¥ev_b˝p
 = 
b˝
->
bc_√xt
;

1367 
•
 = 
b˝
->
bc_¶ab
;

1370 
˝
->
ˇche_lookup_dïth
++;

1371 
¥ev_b˝p
 = &
b˝
->
bc_√xt
;

1374 
b˝
 = 
	`UMEM_BUFCTL
(
˝
, 
buf
);

1375 
•
 = 
	`UMEM_SLAB
(
˝
, 
buf
);

1378 i‡(
b˝
 =
NULL
 || 
•
->
¶ab_ˇche
 !
˝
 || !
	`UMEM_SLAB_MEMBER
(•, 
buf
)) {

1379 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_lock
);

1380 
	`umem_îr‹
(
UMERR_BADADDR
, 
˝
, 
buf
);

1384 i‡((
˝
->
ˇche_Êags
 & (
UMF_AUDIT
 | 
UMF_BUFTAG
)) == UMF_AUDIT) {

1385 i‡(
˝
->
ˇche_Êags
 & 
UMF_CONTENTS
)

1386 ((
umem_buf˘l_audô_t
 *)
b˝
)->
bc_c⁄ã¡s
 =

1387 
	`umem_log_íãr
(
umem_c⁄ã¡_log
, 
buf
,

1388 
˝
->
ˇche_c⁄ã¡s
);

1389 
	`UMEM_AUDIT
(
umem_å™ß˘i⁄_log
, 
˝
, 
b˝
);

1395 i‡(
•
->
¶ab_hód
 =
NULL
) {

1396 
	`ASSERT
(
•
->
¶ab_ªf˙t
 =•->
¶ab_chunks
);

1397 
	`ASSERT
(
˝
->
ˇche_‰ìli°
 !
•
);

1398 
•
->
¶ab_√xt
->
¶ab_¥ev
 = sp->slab_prev;

1399 
•
->
¶ab_¥ev
->
¶ab_√xt
 = sp->slab_next;

1400 
•
->
¶ab_√xt
 = 
˝
->
ˇche_‰ìli°
;

1401 
•
->
¶ab_¥ev
 = 
˝
->
ˇche_‰ìli°
->slab_prev;

1402 
•
->
¶ab_√xt
->
¶ab_¥ev
 = sp;

1403 
•
->
¶ab_¥ev
->
¶ab_√xt
 = sp;

1404 
˝
->
ˇche_‰ìli°
 = 
•
;

1407 
b˝
->
bc_√xt
 = 
•
->
¶ab_hód
;

1408 
•
->
¶ab_hód
 = 
b˝
;

1410 
	`ASSERT
(
•
->
¶ab_ªf˙t
 >= 1);

1411 i‡(--
•
->
¶ab_ªf˙t
 == 0) {

1416 
•
->
¶ab_√xt
->
¶ab_¥ev
 = sp->slab_prev;

1417 
•
->
¶ab_¥ev
->
¶ab_√xt
 = sp->slab_next;

1418 i‡(
•
 =
˝
->
ˇche_‰ìli°
)

1419 
˝
->
ˇche_‰ìli°
 = 
•
->
¶ab_√xt
;

1420 
˝
->
ˇche_¶ab_de°roy
++;

1421 
˝
->
ˇche_bu·ŸÆ
 -
•
->
¶ab_chunks
;

1422 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_lock
);

1423 
	`umem_¶ab_de°roy
(
˝
, 
•
);

1426 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_lock
);

1427 
	}
}

1430 
	$umem_ˇche_Æloc_debug
(
umem_ˇche_t
 *
˝
, *
buf
, 
umÊag
)

1432 
umem_bu·ag_t
 *
bç
 = 
	`UMEM_BUFTAG
(
˝
, 
buf
);

1433 
umem_buf˘l_audô_t
 *
b˝
 = (umem_buf˘l_audô_à*)
bç
->
bt_buf˘l
;

1434 
uöt32_t
 
mtbf
;

1435 
Êags_nÁèl
;

1437 i‡(
bç
->
bt_bx°©
 !((
öçå_t
)
b˝
 ^ 
UMEM_BUFTAG_FREE
)) {

1438 
	`umem_îr‹
(
UMERR_BADBUFTAG
, 
˝
, 
buf
);

1442 
bç
->
bt_bx°©
 = (
öçå_t
)
b˝
 ^ 
UMEM_BUFTAG_ALLOC
;

1444 i‡((
˝
->
ˇche_Êags
 & 
UMF_HASH
Ë&& 
b˝
->
bc_addr
 !
buf
) {

1445 
	`umem_îr‹
(
UMERR_BADBUFCTL
, 
˝
, 
buf
);

1449 
bç
->
bt_ªdz⁄e
 = 
UMEM_REDZONE_PATTERN
;

1451 i‡(
˝
->
ˇche_Êags
 & 
UMF_DEADBEEF
) {

1452 i‡(
	`vîify_™d_c›y_∑âîn
(
UMEM_FREE_PATTERN
,

1453 
UMEM_UNINITIALIZED_PATTERN
, 
buf
, 
˝
->
ˇche_vîify
)) {

1454 
	`umem_îr‹
(
UMERR_MODIFIED
, 
˝
, 
buf
);

1459 i‡((
mtbf
 = 
umem_mtbf
 | 
˝
->
ˇche_mtbf
) != 0 &&

1460 
	`gëhπime
(Ë% 
mtbf
 == 0 &&

1461 (
umÊag
 & (
UMEM_FATAL_FLAGS
)) == 0) {

1462 
	`umem_log_evít
(
umem_Áûuª_log
, 
˝
, 
NULL
, NULL);

1464 
mtbf
 = 0;

1471 
Êags_nÁèl
 = 
UMEM_DEFAULT
;

1472 i‡(
mtbf
 || (
˝
->
ˇche_c⁄°ru˘‹
 !
NULL
 &&

1473 
˝
->
	`ˇche_c⁄°ru˘‹
(
buf
, cp->
ˇche_¥iv©e
, 
Êags_nÁèl
) != 0)) {

1474 
	`©omic_add_64
(&
˝
->
ˇche_Æloc_Áû
, 1);

1475 
bç
->
bt_bx°©
 = (
öçå_t
)
b˝
 ^ 
UMEM_BUFTAG_FREE
;

1476 
	`c›y_∑âîn
(
UMEM_FREE_PATTERN
, 
buf
, 
˝
->
ˇche_vîify
);

1477 
	`umem_¶ab_‰ì
(
˝
, 
buf
);

1481 i‡(
˝
->
ˇche_Êags
 & 
UMF_AUDIT
) {

1482 
	`UMEM_AUDIT
(
umem_å™ß˘i⁄_log
, 
˝
, 
b˝
);

1486 
	}
}

1489 
	$umem_ˇche_‰ì_debug
(
umem_ˇche_t
 *
˝
, *
buf
)

1491 
umem_bu·ag_t
 *
bç
 = 
	`UMEM_BUFTAG
(
˝
, 
buf
);

1492 
umem_buf˘l_audô_t
 *
b˝
 = (umem_buf˘l_audô_à*)
bç
->
bt_buf˘l
;

1493 
umem_¶ab_t
 *
•
;

1495 i‡(
bç
->
bt_bx°©
 !((
öçå_t
)
b˝
 ^ 
UMEM_BUFTAG_ALLOC
)) {

1496 i‡(
bç
->
bt_bx°©
 =((
öçå_t
)
b˝
 ^ 
UMEM_BUFTAG_FREE
)) {

1497 
	`umem_îr‹
(
UMERR_DUPFREE
, 
˝
, 
buf
);

1500 
•
 = 
	`umem_föd¶ab
(
˝
, 
buf
);

1501 i‡(
•
 =
NULL
 || sp->
¶ab_ˇche
 !
˝
)

1502 
	`umem_îr‹
(
UMERR_BADADDR
, 
˝
, 
buf
);

1504 
	`umem_îr‹
(
UMERR_REDZONE
, 
˝
, 
buf
);

1508 
bç
->
bt_bx°©
 = (
öçå_t
)
b˝
 ^ 
UMEM_BUFTAG_FREE
;

1510 i‡((
˝
->
ˇche_Êags
 & 
UMF_HASH
Ë&& 
b˝
->
bc_addr
 !
buf
) {

1511 
	`umem_îr‹
(
UMERR_BADBUFCTL
, 
˝
, 
buf
);

1515 i‡(
bç
->
bt_ªdz⁄e
 !
UMEM_REDZONE_PATTERN
) {

1516 
	`umem_îr‹
(
UMERR_REDZONE
, 
˝
, 
buf
);

1520 i‡(
˝
->
ˇche_Êags
 & 
UMF_AUDIT
) {

1521 i‡(
˝
->
ˇche_Êags
 & 
UMF_CONTENTS
)

1522 
b˝
->
bc_c⁄ã¡s
 = 
	`umem_log_íãr
(
umem_c⁄ã¡_log
,

1523 
buf
, 
˝
->
ˇche_c⁄ã¡s
);

1524 
	`UMEM_AUDIT
(
umem_å™ß˘i⁄_log
, 
˝
, 
b˝
);

1527 i‡(
˝
->
ˇche_de°ru˘‹
 !
NULL
)

1528 
˝
->
	`ˇche_de°ru˘‹
(
buf
, cp->
ˇche_¥iv©e
);

1530 i‡(
˝
->
ˇche_Êags
 & 
UMF_DEADBEEF
)

1531 
	`c›y_∑âîn
(
UMEM_FREE_PATTERN
, 
buf
, 
˝
->
ˇche_vîify
);

1534 
	}
}

1540 
	$umem_magazöe_de°roy
(
umem_ˇche_t
 *
˝
, 
umem_magazöe_t
 *
mp
, 
ƒounds
)

1542 
round
;

1544 
	`ASSERT
(
˝
->
ˇche_√xt
 =
NULL
 || 
	`IN_UPDATE
());

1546 
round
 = 0;Ñound < 
ƒounds
;Ñound++) {

1547 *
buf
 = 
mp
->
mag_round
[
round
];

1549 i‡((
˝
->
ˇche_Êags
 & 
UMF_DEADBEEF
) &&

1550 
	`vîify_∑âîn
(
UMEM_FREE_PATTERN
, 
buf
,

1551 
˝
->
ˇche_vîify
Ë!
NULL
) {

1552 
	`umem_îr‹
(
UMERR_MODIFIED
, 
˝
, 
buf
);

1556 i‡(!(
˝
->
ˇche_Êags
 & 
UMF_BUFTAG
) &&

1557 
˝
->
ˇche_de°ru˘‹
 !
NULL
)

1558 
˝
->
	`ˇche_de°ru˘‹
(
buf
, cp->
ˇche_¥iv©e
);

1560 
	`umem_¶ab_‰ì
(
˝
, 
buf
);

1562 
	`ASSERT
(
	`UMEM_MAGAZINE_VALID
(
˝
, 
mp
));

1563 
	`_umem_ˇche_‰ì
(
˝
->
ˇche_magty≥
->
mt_ˇche
, 
mp
);

1564 
	}
}

1569 
umem_magazöe_t
 *

1570 
	$umem_dïŸ_Æloc
(
umem_ˇche_t
 *
˝
, 
umem_magli°_t
 *
mÕ
)

1572 
umem_magazöe_t
 *
mp
;

1580 i‡(
	`muãx_åylock
(&
˝
->
ˇche_dïŸ_lock
) != 0) {

1581 (Ë
	`muãx_lock
(&
˝
->
ˇche_dïŸ_lock
);

1582 
˝
->
ˇche_dïŸ_c⁄ã¡i⁄
++;

1585 i‡((
mp
 = 
mÕ
->
ml_li°
Ë!
NULL
) {

1586 
	`ASSERT
(
	`UMEM_MAGAZINE_VALID
(
˝
, 
mp
));

1587 
mÕ
->
ml_li°
 = 
mp
->
mag_√xt
;

1588 i‡(--
mÕ
->
ml_tŸÆ
 < mÕ->
ml_mö
)

1589 
mÕ
->
ml_mö
 = mÕ->
ml_tŸÆ
;

1590 
mÕ
->
ml_Æloc
++;

1593 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_dïŸ_lock
);

1595  (
mp
);

1596 
	}
}

1602 
	$umem_dïŸ_‰ì
(
umem_ˇche_t
 *
˝
, 
umem_magli°_t
 *
mÕ
, 
umem_magazöe_t
 *
mp
)

1604 (Ë
	`muãx_lock
(&
˝
->
ˇche_dïŸ_lock
);

1605 
	`ASSERT
(
	`UMEM_MAGAZINE_VALID
(
˝
, 
mp
));

1606 
mp
->
mag_√xt
 = 
mÕ
->
ml_li°
;

1607 
mÕ
->
ml_li°
 = 
mp
;

1608 
mÕ
->
ml_tŸÆ
++;

1609 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_dïŸ_lock
);

1610 
	}
}

1616 
	$umem_dïŸ_ws_upd©e
(
umem_ˇche_t
 *
˝
)

1618 (Ë
	`muãx_lock
(&
˝
->
ˇche_dïŸ_lock
);

1619 
˝
->
ˇche_fuŒ
.
ml_ª≠limô
 = cp->ˇche_fuŒ.
ml_mö
;

1620 
˝
->
ˇche_fuŒ
.
ml_mö
 = cp->ˇche_fuŒ.
ml_tŸÆ
;

1621 
˝
->
ˇche_em±y
.
ml_ª≠limô
 = cp->ˇche_em±y.
ml_mö
;

1622 
˝
->
ˇche_em±y
.
ml_mö
 = cp->ˇche_em±y.
ml_tŸÆ
;

1623 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_dïŸ_lock
);

1624 
	}
}

1630 
	$umem_dïŸ_ws_ª≠
(
umem_ˇche_t
 *
˝
)

1632 
ª≠
;

1633 
umem_magazöe_t
 *
mp
;

1635 
	`ASSERT
(
˝
->
ˇche_√xt
 =
NULL
 || 
	`IN_REAP
());

1637 
ª≠
 = 
	`MIN
(
˝
->
ˇche_fuŒ
.
ml_ª≠limô
, cp->ˇche_fuŒ.
ml_mö
);

1638 
ª≠
-- && (
mp
 = 
	`umem_dïŸ_Æloc
(
˝
, &˝->
ˇche_fuŒ
)Ë!
NULL
)

1639 
	`umem_magazöe_de°roy
(
˝
, 
mp
, cp->
ˇche_magty≥
->
mt_magsize
);

1641 
ª≠
 = 
	`MIN
(
˝
->
ˇche_em±y
.
ml_ª≠limô
, cp->ˇche_em±y.
ml_mö
);

1642 
ª≠
-- && (
mp
 = 
	`umem_dïŸ_Æloc
(
˝
, &˝->
ˇche_em±y
)Ë!
NULL
)

1643 
	`umem_magazöe_de°roy
(
˝
, 
mp
, 0);

1644 
	}
}

1647 
	$umem_˝u_ªlﬂd
(
umem_˝u_ˇche_t
 *
c˝
, 
umem_magazöe_t
 *
mp
, 
rounds
)

1649 
	`ASSERT
((
c˝
->
cc_lﬂded
 =
NULL
 && c˝->
cc_rounds
 == -1) ||

1650 (
c˝
->
cc_lﬂded
 && c˝->
cc_rounds
 + 
rounds
 =c˝->
cc_magsize
));

1651 
	`ASSERT
(
c˝
->
cc_magsize
 > 0);

1653 
c˝
->
cc_∂ﬂded
 = c˝->
cc_lﬂded
;

1654 
c˝
->
cc_¥ounds
 = c˝->
cc_rounds
;

1655 
c˝
->
cc_lﬂded
 = 
mp
;

1656 
c˝
->
cc_rounds
 = 
rounds
;

1657 
	}
}

1662 #i‚de‡
NO_WEAK_SYMBOLS


1663 #¥agm®
wók
 
umem_ˇche_Æloc
 = 
_umem_ˇche_Æloc


1666 
	$_umem_ˇche_Æloc
(
umem_ˇche_t
 *
˝
, 
umÊag
)

1668 
umem_˝u_ˇche_t
 *
c˝
;

1669 
umem_magazöe_t
 *
fmp
;

1670 *
buf
;

1671 
Êags_nÁèl
;

1673 
ªåy
:

1674 
c˝
 = 
	`UMEM_CPU_CACHE
(
˝
, 
	`CPU
(˝->
ˇche_˝u_mask
));

1675 (Ë
	`muãx_lock
(&
c˝
->
cc_lock
);

1681 i‡(
c˝
->
cc_rounds
 > 0) {

1682 
buf
 = 
c˝
->
cc_lﬂded
->
mag_round
[--c˝->
cc_rounds
];

1683 
c˝
->
cc_Æloc
++;

1684 (Ë
	`muãx_u∆ock
(&
c˝
->
cc_lock
);

1685 i‡((
c˝
->
cc_Êags
 & 
UMF_BUFTAG
) &&

1686 
	`umem_ˇche_Æloc_debug
(
˝
, 
buf
, 
umÊag
) == -1) {

1687 i‡(
	`umem_Æloc_ªåy
(
˝
, 
umÊag
)) {

1688 
ªåy
;

1691  (
NULL
);

1693  (
buf
);

1700 i‡(
c˝
->
cc_¥ounds
 > 0) {

1701 
	`umem_˝u_ªlﬂd
(
c˝
, c˝->
cc_∂ﬂded
, c˝->
cc_¥ounds
);

1708 i‡(
c˝
->
cc_magsize
 == 0)

1714 
fmp
 = 
	`umem_dïŸ_Æloc
(
˝
, &˝->
ˇche_fuŒ
);

1715 i‡(
fmp
 !
NULL
) {

1716 i‡(
c˝
->
cc_∂ﬂded
 !
NULL
)

1717 
	`umem_dïŸ_‰ì
(
˝
, &˝->
ˇche_em±y
,

1718 
c˝
->
cc_∂ﬂded
);

1719 
	`umem_˝u_ªlﬂd
(
c˝
, 
fmp
, c˝->
cc_magsize
);

1729 (Ë
	`muãx_u∆ock
(&
c˝
->
cc_lock
);

1735 
buf
 = 
	`umem_¶ab_Æloc
(
˝
, 
umÊag
);

1737 i‡(
buf
 =
NULL
) {

1738 i‡(
˝
 =&
umem_nuŒ_ˇche
)

1739  (
NULL
);

1740 i‡(
	`umem_Æloc_ªåy
(
˝
, 
umÊag
)) {

1741 
ªåy
;

1744  (
NULL
);

1747 i‡(
˝
->
ˇche_Êags
 & 
UMF_BUFTAG
) {

1751 i‡(
	`umem_ˇche_Æloc_debug
(
˝
, 
buf
, 
umÊag
) == -1) {

1752 i‡(
	`umem_Æloc_ªåy
(
˝
, 
umÊag
)) {

1753 
ªåy
;

1755  (
NULL
);

1757  (
buf
);

1764 
Êags_nÁèl
 = 
UMEM_DEFAULT
;

1765 i‡(
˝
->
ˇche_c⁄°ru˘‹
 !
NULL
 &&

1766 
˝
->
	`ˇche_c⁄°ru˘‹
(
buf
, cp->
ˇche_¥iv©e
, 
Êags_nÁèl
) != 0) {

1767 
	`©omic_add_64
(&
˝
->
ˇche_Æloc_Áû
, 1);

1768 
	`umem_¶ab_‰ì
(
˝
, 
buf
);

1770 i‡(
	`umem_Æloc_ªåy
(
˝
, 
umÊag
)) {

1771 
ªåy
;

1773  (
NULL
);

1776  (
buf
);

1777 
	}
}

1782 #i‚de‡
NO_WEAK_SYMBOLS


1783 #¥agm®
wók
 
umem_ˇche_‰ì
 = 
_umem_ˇche_‰ì


1786 
	$_umem_ˇche_‰ì
(
umem_ˇche_t
 *
˝
, *
buf
)

1788 
umem_˝u_ˇche_t
 *
c˝
 = 
	`UMEM_CPU_CACHE
(
˝
, 
	`CPU
(˝->
ˇche_˝u_mask
));

1789 
umem_magazöe_t
 *
emp
;

1790 
umem_magty≥_t
 *
mç
;

1792 i‡(
c˝
->
cc_Êags
 & 
UMF_BUFTAG
)

1793 i‡(
	`umem_ˇche_‰ì_debug
(
˝
, 
buf
) == -1)

1796 (Ë
	`muãx_lock
(&
c˝
->
cc_lock
);

1802 i‡((
uöt_t
)
c˝
->
cc_rounds
 < c˝->
cc_magsize
) {

1803 
c˝
->
cc_lﬂded
->
mag_round
[c˝->
cc_rounds
++] = 
buf
;

1804 
c˝
->
cc_‰ì
++;

1805 (Ë
	`muãx_u∆ock
(&
c˝
->
cc_lock
);

1813 i‡(
c˝
->
cc_¥ounds
 == 0) {

1814 
	`umem_˝u_ªlﬂd
(
c˝
, c˝->
cc_∂ﬂded
, c˝->
cc_¥ounds
);

1821 i‡(
c˝
->
cc_magsize
 == 0)

1827 
emp
 = 
	`umem_dïŸ_Æloc
(
˝
, &˝->
ˇche_em±y
);

1828 i‡(
emp
 !
NULL
) {

1829 i‡(
c˝
->
cc_∂ﬂded
 !
NULL
)

1830 
	`umem_dïŸ_‰ì
(
˝
, &˝->
ˇche_fuŒ
,

1831 
c˝
->
cc_∂ﬂded
);

1832 
	`umem_˝u_ªlﬂd
(
c˝
, 
emp
, 0);

1842 
mç
 = 
˝
->
ˇche_magty≥
;

1843 (Ë
	`muãx_u∆ock
(&
c˝
->
cc_lock
);

1844 
emp
 = 
	`_umem_ˇche_Æloc
(
mç
->
mt_ˇche
, 
UMEM_DEFAULT
);

1845 (Ë
	`muãx_lock
(&
c˝
->
cc_lock
);

1847 i‡(
emp
 !
NULL
) {

1854 i‡(
c˝
->
cc_magsize
 !
mç
->
mt_magsize
) {

1855 (Ë
	`muãx_u∆ock
(&
c˝
->
cc_lock
);

1856 
	`_umem_ˇche_‰ì
(
mç
->
mt_ˇche
, 
emp
);

1857 (Ë
	`muãx_lock
(&
c˝
->
cc_lock
);

1865 
	`umem_dïŸ_‰ì
(
˝
, &˝->
ˇche_em±y
, 
emp
);

1875 (Ë
	`muãx_u∆ock
(&
c˝
->
cc_lock
);

1883 i‡(!(
˝
->
ˇche_Êags
 & 
UMF_BUFTAG
Ë&& cp->
ˇche_de°ru˘‹
 !
NULL
)

1884 
˝
->
	`ˇche_de°ru˘‹
(
buf
, cp->
ˇche_¥iv©e
);

1886 
	`umem_¶ab_‰ì
(
˝
, 
buf
);

1887 
	}
}

1889 #i‚de‡
NO_WEAK_SYMBOLS


1890 #¥agm®
wók
 
umem_zÆloc
 = 
_umem_zÆloc


1893 
	$_umem_zÆloc
(
size_t
 
size
, 
umÊag
)

1895 
size_t
 
ödex
 = (
size
 - 1Ë>> 
UMEM_ALIGN_SHIFT
;

1896 *
buf
;

1898 
ªåy
:

1899 i‡(
ödex
 < 
UMEM_MAXBUF
 >> 
UMEM_ALIGN_SHIFT
) {

1900 
umem_ˇche_t
 *
˝
 = 
umem_Æloc_èbÀ
[
ödex
];

1901 
buf
 = 
	`_umem_ˇche_Æloc
(
˝
, 
umÊag
);

1902 i‡(
buf
 !
NULL
) {

1903 i‡(
˝
->
ˇche_Êags
 & 
UMF_BUFTAG
) {

1904 
umem_bu·ag_t
 *
bç
 = 
	`UMEM_BUFTAG
(
˝
, 
buf
);

1905 ((
uöt8_t
 *)
buf
)[
size
] = 
UMEM_REDZONE_BYTE
;

1906 ((
uöt32_t
 *)
bç
)[1] = 
	`UMEM_SIZE_ENCODE
(
size
);

1908 
	`bzîo
(
buf
, 
size
);

1909 } i‡(
	`umem_Æloc_ªåy
(
˝
, 
umÊag
))

1910 
ªåy
;

1912 
buf
 = 
	`_umem_Æloc
(
size
, 
umÊag
);

1913 i‡(
buf
 !
NULL
)

1914 
	`bzîo
(
buf
, 
size
);

1916  (
buf
);

1917 
	}
}

1919 #i‚de‡
NO_WEAK_SYMBOLS


1920 #¥agm®
wók
 
umem_Æloc
 = 
_umem_Æloc


1923 
	$_umem_Æloc
(
size_t
 
size
, 
umÊag
)

1925 
size_t
 
ödex
 = (
size
 - 1Ë>> 
UMEM_ALIGN_SHIFT
;

1926 *
buf
;

1927 
umem_Æloc_ªåy
:

1928 i‡(
ödex
 < 
UMEM_MAXBUF
 >> 
UMEM_ALIGN_SHIFT
) {

1929 
umem_ˇche_t
 *
˝
 = 
umem_Æloc_èbÀ
[
ödex
];

1930 
buf
 = 
	`_umem_ˇche_Æloc
(
˝
, 
umÊag
);

1931 i‡((
˝
->
ˇche_Êags
 & 
UMF_BUFTAG
Ë&& 
buf
 !
NULL
) {

1932 
umem_bu·ag_t
 *
bç
 = 
	`UMEM_BUFTAG
(
˝
, 
buf
);

1933 ((
uöt8_t
 *)
buf
)[
size
] = 
UMEM_REDZONE_BYTE
;

1934 ((
uöt32_t
 *)
bç
)[1] = 
	`UMEM_SIZE_ENCODE
(
size
);

1936 i‡(
buf
 =
NULL
 && 
	`umem_Æloc_ªåy
(
˝
, 
umÊag
))

1937 
umem_Æloc_ªåy
;

1938  (
buf
);

1940 i‡(
size
 == 0)

1941  (
NULL
);

1942 i‡(
umem_ovîsize_¨ía
 =
NULL
) {

1943 i‡(
	`umem_öô
())

1944 
	`ASSERT
(
umem_ovîsize_¨ía
 !
NULL
);

1946  (
NULL
);

1948 
buf
 = 
	`vmem_Æloc
(
umem_ovîsize_¨ía
, 
size
, 
	`UMEM_VMFLAGS
(
umÊag
));

1949 i‡(
buf
 =
NULL
) {

1950 
	`umem_log_evít
(
umem_Áûuª_log
, 
NULL
, NULL, (*)
size
);

1951 i‡(
	`umem_Æloc_ªåy
(
NULL
, 
umÊag
))

1952 
umem_Æloc_ªåy
;

1954  (
buf
);

1955 
	}
}

1957 #i‚de‡
NO_WEAK_SYMBOLS


1958 #¥agm®
wók
 
umem_Æloc_Æign
 = 
_umem_Æloc_Æign


1961 
	$_umem_Æloc_Æign
(
size_t
 
size
, size_à
Æign
, 
umÊag
)

1963 *
buf
;

1965 i‡(
size
 == 0)

1966  (
NULL
);

1967 i‡((
Æign
 & (align - 1)) != 0)

1968  (
NULL
);

1969 i‡(
Æign
 < 
UMEM_ALIGN
)

1970 
Æign
 = 
UMEM_ALIGN
;

1972 
umem_Æloc_Æign_ªåy
:

1973 i‡(
umem_memÆign_¨ía
 =
NULL
) {

1974 i‡(
	`umem_öô
())

1975 
	`ASSERT
(
umem_ovîsize_¨ía
 !
NULL
);

1977  (
NULL
);

1979 
buf
 = 
	`vmem_xÆloc
(
umem_memÆign_¨ía
, 
size
, 
Æign
, 0, 0, 
NULL
, NULL,

1980 
	`UMEM_VMFLAGS
(
umÊag
));

1981 i‡(
buf
 =
NULL
) {

1982 
	`umem_log_evít
(
umem_Áûuª_log
, 
NULL
, NULL, (*)
size
);

1983 i‡(
	`umem_Æloc_ªåy
(
NULL
, 
umÊag
))

1984 
umem_Æloc_Æign_ªåy
;

1986  (
buf
);

1987 
	}
}

1989 #i‚de‡
NO_WEAK_SYMBOLS


1990 #¥agm®
wók
 
umem_‰ì
 = 
_umem_‰ì


1993 
	$_umem_‰ì
(*
buf
, 
size_t
 
size
)

1995 
size_t
 
ödex
 = (
size
 - 1Ë>> 
UMEM_ALIGN_SHIFT
;

1997 i‡(
ödex
 < 
UMEM_MAXBUF
 >> 
UMEM_ALIGN_SHIFT
) {

1998 
umem_ˇche_t
 *
˝
 = 
umem_Æloc_èbÀ
[
ödex
];

1999 i‡(
˝
->
ˇche_Êags
 & 
UMF_BUFTAG
) {

2000 
umem_bu·ag_t
 *
bç
 = 
	`UMEM_BUFTAG
(
˝
, 
buf
);

2001 
uöt32_t
 *
ù
 = (uöt32_à*)
bç
;

2002 i‡(
ù
[1] !
	`UMEM_SIZE_ENCODE
(
size
)) {

2003 i‡(*(
uöt64_t
 *)
buf
 =
UMEM_FREE_PATTERN
) {

2004 
	`umem_îr‹
(
UMERR_DUPFREE
, 
˝
, 
buf
);

2007 i‡(
	`UMEM_SIZE_VALID
(
ù
[1])) {

2008 
ù
[0] = 
	`UMEM_SIZE_ENCODE
(
size
);

2009 
	`umem_îr‹
(
UMERR_BADSIZE
, 
˝
, 
buf
);

2011 
	`umem_îr‹
(
UMERR_REDZONE
, 
˝
, 
buf
);

2015 i‡(((
uöt8_t
 *)
buf
)[
size
] !
UMEM_REDZONE_BYTE
) {

2016 
	`umem_îr‹
(
UMERR_REDZONE
, 
˝
, 
buf
);

2019 
bç
->
bt_ªdz⁄e
 = 
UMEM_REDZONE_PATTERN
;

2021 
	`_umem_ˇche_‰ì
(
˝
, 
buf
);

2023 i‡(
buf
 =
NULL
 && 
size
 == 0)

2025 
	`vmem_‰ì
(
umem_ovîsize_¨ía
, 
buf
, 
size
);

2027 
	}
}

2029 #i‚de‡
NO_WEAK_SYMBOLS


2030 #¥agm®
wók
 
umem_‰ì_Æign
 = 
_umem_‰ì_Æign


2033 
	$_umem_‰ì_Æign
(*
buf
, 
size_t
 
size
)

2035 i‡(
buf
 =
NULL
 && 
size
 == 0)

2037 
	`vmem_x‰ì
(
umem_memÆign_¨ía
, 
buf
, 
size
);

2038 
	}
}

2041 
	$umem_fúewÆl_va_Æloc
(
vmem_t
 *
vmp
, 
size_t
 
size
, 
vmÊag
)

2043 
size_t
 
ªÆsize
 = 
size
 + 
vmp
->
vm_qu™tum
;

2054 i‡(
ªÆsize
 < 
size
)

2055 
ªÆsize
 = 
size
;

2057  (
	`vmem_Æloc
(
vmp
, 
ªÆsize
, 
vmÊag
 | 
VM_NEXTFIT
));

2058 
	}
}

2061 
	$umem_fúewÆl_va_‰ì
(
vmem_t
 *
vmp
, *
addr
, 
size_t
 
size
)

2063 
	`vmem_‰ì
(
vmp
, 
addr
, 
size
 + vmp->
vm_qu™tum
);

2064 
	}
}

2070 
	$umem_ˇche_ª≠
(
umem_ˇche_t
 *
˝
)

2079 i‡(
˝
->
ˇche_ª˛aim
 !
NULL
)

2080 
˝
->
	`ˇche_ª˛aim
(˝->
ˇche_¥iv©e
);

2082 
	`umem_dïŸ_ws_ª≠
(
˝
);

2083 
	}
}

2091 
	$umem_ˇche_magazöe_purge
(
umem_ˇche_t
 *
˝
)

2093 
umem_˝u_ˇche_t
 *
c˝
;

2094 
umem_magazöe_t
 *
mp
, *
pmp
;

2095 
rounds
, 
¥ounds
, 
˝u_£qid
;

2097 
	`ASSERT
(
˝
->
ˇche_√xt
 =
NULL
 || 
	`IN_UPDATE
());

2099 
˝u_£qid
 = 0; cpu_£qid < 
umem_max_n˝us
; cpu_seqid++) {

2100 
c˝
 = &
˝
->
ˇche_˝u
[
˝u_£qid
];

2102 (Ë
	`muãx_lock
(&
c˝
->
cc_lock
);

2103 
mp
 = 
c˝
->
cc_lﬂded
;

2104 
pmp
 = 
c˝
->
cc_∂ﬂded
;

2105 
rounds
 = 
c˝
->
cc_rounds
;

2106 
¥ounds
 = 
c˝
->
cc_¥ounds
;

2107 
c˝
->
cc_lﬂded
 = 
NULL
;

2108 
c˝
->
cc_∂ﬂded
 = 
NULL
;

2109 
c˝
->
cc_rounds
 = -1;

2110 
c˝
->
cc_¥ounds
 = -1;

2111 
c˝
->
cc_magsize
 = 0;

2112 (Ë
	`muãx_u∆ock
(&
c˝
->
cc_lock
);

2114 i‡(
mp
)

2115 
	`umem_magazöe_de°roy
(
˝
, 
mp
, 
rounds
);

2116 i‡(
pmp
)

2117 
	`umem_magazöe_de°roy
(
˝
, 
pmp
, 
¥ounds
);

2125 
	`umem_dïŸ_ws_upd©e
(
˝
);

2126 
	`umem_dïŸ_ws_upd©e
(
˝
);

2128 
	`umem_dïŸ_ws_ª≠
(
˝
);

2129 
	}
}

2135 
	$umem_ˇche_magazöe_íabÀ
(
umem_ˇche_t
 *
˝
)

2137 
˝u_£qid
;

2139 i‡(
˝
->
ˇche_Êags
 & 
UMF_NOMAGAZINE
)

2142 
˝u_£qid
 = 0; cpu_£qid < 
umem_max_n˝us
; cpu_seqid++) {

2143 
umem_˝u_ˇche_t
 *
c˝
 = &
˝
->
ˇche_˝u
[
˝u_£qid
];

2144 (Ë
	`muãx_lock
(&
c˝
->
cc_lock
);

2145 
c˝
->
cc_magsize
 = 
˝
->
ˇche_magty≥
->
mt_magsize
;

2146 (Ë
	`muãx_u∆ock
(&
c˝
->
cc_lock
);

2149 
	}
}

2164 
	$umem_ˇche_magazöe_ªsize
(
umem_ˇche_t
 *
˝
)

2166 
umem_magty≥_t
 *
mç
 = 
˝
->
ˇche_magty≥
;

2168 
	`ASSERT
(
	`IN_UPDATE
());

2170 i‡(
˝
->
ˇche_chunksize
 < 
mç
->
mt_maxbuf
) {

2171 
	`umem_ˇche_magazöe_purge
(
˝
);

2172 (Ë
	`muãx_lock
(&
˝
->
ˇche_dïŸ_lock
);

2173 
˝
->
ˇche_magty≥
 = ++
mç
;

2174 
˝
->
ˇche_dïŸ_c⁄ã¡i⁄_¥ev
 =

2175 
˝
->
ˇche_dïŸ_c⁄ã¡i⁄
 + 
INT_MAX
;

2176 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_dïŸ_lock
);

2177 
	`umem_ˇche_magazöe_íabÀ
(
˝
);

2179 
	}
}

2186 
	$umem_hash_ªsˇÀ
(
umem_ˇche_t
 *
˝
)

2188 
umem_buf˘l_t
 **
ﬁd_èbÀ
, **
√w_èbÀ
, *
b˝
;

2189 
size_t
 
ﬁd_size
, 
√w_size
, 
h
;

2191 
	`ASSERT
(
	`IN_UPDATE
());

2193 
√w_size
 = 
	`MAX
(
UMEM_HASH_INITIAL
,

2194 1 << (
	`highbô
(3 * 
˝
->
ˇche_bu·ŸÆ
 + 4) - 2));

2195 
ﬁd_size
 = 
˝
->
ˇche_hash_mask
 + 1;

2197 i‡((
ﬁd_size
 >> 1Ë<
√w_size
 &&Çew_size <= (old_size << 1))

2200 
√w_èbÀ
 = 
	`vmem_Æloc
(
umem_hash_¨ía
, 
√w_size
 *  (*),

2201 
VM_NOSLEEP
);

2202 i‡(
√w_èbÀ
 =
NULL
)

2204 
	`bzîo
(
√w_èbÀ
, 
√w_size
 *  (*));

2206 (Ë
	`muãx_lock
(&
˝
->
ˇche_lock
);

2208 
ﬁd_size
 = 
˝
->
ˇche_hash_mask
 + 1;

2209 
ﬁd_èbÀ
 = 
˝
->
ˇche_hash_èbÀ
;

2211 
˝
->
ˇche_hash_mask
 = 
√w_size
 - 1;

2212 
˝
->
ˇche_hash_èbÀ
 = 
√w_èbÀ
;

2213 
˝
->
ˇche_ªsˇÀ
++;

2215 
h
 = 0; h < 
ﬁd_size
; h++) {

2216 
b˝
 = 
ﬁd_èbÀ
[
h
];

2217 
b˝
 !
NULL
) {

2218 *
addr
 = 
b˝
->
bc_addr
;

2219 
umem_buf˘l_t
 *
√xt_b˝
 = 
b˝
->
bc_√xt
;

2220 
umem_buf˘l_t
 **
hash_buckë
 = 
	`UMEM_HASH
(
˝
, 
addr
);

2221 
b˝
->
bc_√xt
 = *
hash_buckë
;

2222 *
hash_buckë
 = 
b˝
;

2223 
b˝
 = 
√xt_b˝
;

2227 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_lock
);

2229 
	`vmem_‰ì
(
umem_hash_¨ía
, 
ﬁd_èbÀ
, 
ﬁd_size
 *  (*));

2230 
	}
}

2237 
	$umem_ˇche_upd©e
(
umem_ˇche_t
 *
˝
)

2239 
upd©e_Êags
 = 0;

2241 
	`ASSERT
(
	`MUTEX_HELD
(&
umem_ˇche_lock
));

2247 (Ë
	`muãx_lock
(&
˝
->
ˇche_lock
);

2249 i‡((
˝
->
ˇche_Êags
 & 
UMF_HASH
) &&

2250 (
˝
->
ˇche_bu·ŸÆ
 > (˝->
ˇche_hash_mask
 << 1) ||

2251 (
˝
->
ˇche_bu·ŸÆ
 < (˝->
ˇche_hash_mask
 >> 1) &&

2252 
˝
->
ˇche_hash_mask
 > 
UMEM_HASH_INITIAL
)))

2253 
upd©e_Êags
 |
UMU_HASH_RESCALE
;

2255 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_lock
);

2260 
	`umem_dïŸ_ws_upd©e
(
˝
);

2266 (Ë
	`muãx_lock
(&
˝
->
ˇche_dïŸ_lock
);

2268 i‡(
˝
->
ˇche_chunksize
 < cp->
ˇche_magty≥
->
mt_maxbuf
 &&

2269 ()(
˝
->
ˇche_dïŸ_c⁄ã¡i⁄
 -

2270 
˝
->
ˇche_dïŸ_c⁄ã¡i⁄_¥ev
Ë> 
umem_dïŸ_c⁄ã¡i⁄
)

2271 
upd©e_Êags
 |
UMU_MAGAZINE_RESIZE
;

2273 
˝
->
ˇche_dïŸ_c⁄ã¡i⁄_¥ev
 = cp->
ˇche_dïŸ_c⁄ã¡i⁄
;

2275 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_dïŸ_lock
);

2277 i‡(
upd©e_Êags
)

2278 
	`umem_add_upd©e
(
˝
, 
upd©e_Êags
);

2279 
	}
}

2287 
	$umem_¥o˚ss_upd©es
()

2289 
	`ASSERT
(
	`MUTEX_HELD
(&
umem_upd©e_lock
));

2291 
umem_nuŒ_ˇche
.
ˇche_u√xt
 != &umem_null_cache) {

2292 
nŸify
 = 0;

2293 
umem_ˇche_t
 *
˝
 = 
umem_nuŒ_ˇche
.
ˇche_u√xt
;

2295 
˝
->
ˇche_u¥ev
->
ˇche_u√xt
 = cp->cache_unext;

2296 
˝
->
ˇche_u√xt
->
ˇche_u¥ev
 = cp->cache_uprev;

2297 
˝
->
ˇche_u¥ev
 = cp->
ˇche_u√xt
 = 
NULL
;

2299 
	`ASSERT
(!(
˝
->
ˇche_uÊags
 & 
UMU_ACTIVE
));

2301 
˝
->
ˇche_uÊags
) {

2302 
uÊags
 = (
˝
->
ˇche_uÊags
 |
UMU_ACTIVE
);

2303 (Ë
	`muãx_u∆ock
(&
umem_upd©e_lock
);

2310 i‡(
uÊags
 & 
UMU_HASH_RESCALE
)

2311 
	`umem_hash_ªsˇÀ
(
˝
);

2313 i‡(
uÊags
 & 
UMU_MAGAZINE_RESIZE
)

2314 
	`umem_ˇche_magazöe_ªsize
(
˝
);

2316 i‡(
uÊags
 & 
UMU_REAP
)

2317 
	`umem_ˇche_ª≠
(
˝
);

2319 (Ë
	`muãx_lock
(&
umem_upd©e_lock
);

2324 i‡(
˝
->
ˇche_uÊags
 & 
UMU_NOTIFY
) {

2325 
uÊags
 |
UMU_NOTIFY
;

2326 
nŸify
 = 1;

2328 
˝
->
ˇche_uÊags
 &~
uÊags
;

2330 i‡(
nŸify
)

2331 (Ë
	`c⁄d_brﬂdˇ°
(&
umem_upd©e_cv
);

2333 
	}
}

2335 #i‚de‡
UMEM_STANDALONE


2337 
	$umem_°_upd©e
()

2339 
	`ASSERT
(
	`MUTEX_HELD
(&
umem_upd©e_lock
));

2340 
	`ASSERT
(
umem_upd©e_thr
 =0 && 
umem_°_upd©e_thr
 == 0);

2342 
umem_°_upd©e_thr
 = 
	`thr_£lf
();

2344 (Ë
	`muãx_u∆ock
(&
umem_upd©e_lock
);

2346 
	`vmem_upd©e
(
NULL
);

2347 
	`umem_ˇche_≠∂yÆl
(
umem_ˇche_upd©e
);

2349 (Ë
	`muãx_lock
(&
umem_upd©e_lock
);

2351 
	`umem_¥o˚ss_upd©es
();

2353 
umem_ª≠_√xt
 = 
	`gëhπime
() +

2354 (
hπime_t
)
umem_ª≠_öãrvÆ
 * 
NANOSEC
;

2356 
umem_ª≠ög
 = 
UMEM_REAP_DONE
;

2358 
umem_°_upd©e_thr
 = 0;

2359 
	}
}

2369 
	$umem_ª≠
()

2371 #i‚de‡
UMEM_STANDALONE


2372 
	`__¡hªads
();

2375 i‡(
umem_ªady
 !
UMEM_READY
 || 
umem_ª≠ög
 !
UMEM_REAP_DONE
 ||

2376 
	`gëhπime
(Ë< 
umem_ª≠_√xt
)

2379 (Ë
	`muãx_lock
(&
umem_upd©e_lock
);

2381 i‡(
umem_ª≠ög
 !
UMEM_REAP_DONE
 || 
	`gëhπime
(Ë< 
umem_ª≠_√xt
) {

2382 (Ë
	`muãx_u∆ock
(&
umem_upd©e_lock
);

2385 
umem_ª≠ög
 = 
UMEM_REAP_ADDING
;

2387 (Ë
	`muãx_u∆ock
(&
umem_upd©e_lock
);

2389 
	`umem_upd©óŒ
(
UMU_REAP
);

2391 (Ë
	`muãx_lock
(&
umem_upd©e_lock
);

2393 
umem_ª≠ög
 = 
UMEM_REAP_ACTIVE
;

2396 #i‚de‡
UMEM_STANDALONE


2397 i‡(
umem_upd©e_thr
 == 0) {

2403 
	`ASSERT
(
umem_°_upd©e_thr
 == 0);

2405 i‡(
	`__¡hªads
(Ë<1 || 
	`umem_¸óã_upd©e_thªad
() == 0)

2406 
	`umem_°_upd©e
();

2409 (Ë
	`c⁄d_brﬂdˇ°
(&
umem_upd©e_cv
);

2412 (Ë
	`muãx_u∆ock
(&
umem_upd©e_lock
);

2413 
	}
}

2415 
umem_ˇche_t
 *

2416 
	$umem_ˇche_¸óã
(

2417 *
«me
,

2418 
size_t
 
bufsize
,

2419 
size_t
 
Æign
,

2420 
umem_c⁄°ru˘‹_t
 *
c⁄°ru˘‹
,

2421 
umem_de°ru˘‹_t
 *
de°ru˘‹
,

2422 
umem_ª˛aim_t
 *
ª˛aim
,

2423 *
¥iv©e
,

2424 
vmem_t
 *
vmp
,

2425 
cÊags
)

2427 
˝u_£qid
;

2428 
size_t
 
chunksize
;

2429 
umem_ˇche_t
 *
˝
, *
˙ext
, *
˝ªv
;

2430 
umem_magty≥_t
 *
mç
;

2431 
size_t
 
csize
;

2432 
size_t
 
pha£
;

2439 i‡(
umem_öô_thr
 =
	`thr_£lf
())

2440 
	`ASSERT
((
cÊags
 & (
UMC_INTERNAL
 | 
UMC_QCACHE
)) != 0);

2442 
	`ASSERT
(!(
cÊags
 & 
UMC_INTERNAL
));

2443 i‡(
umem_ªady
 !
UMEM_READY
 && 
	`umem_öô
() == 0) {

2444 
î∫o
 = 
EAGAIN
;

2445  (
NULL
);

2449 
csize
 = 
	`UMEM_CACHE_SIZE
(
umem_max_n˝us
);

2450 
pha£
 = 
	`P2NPHASE
(
csize
, 
UMEM_CPU_CACHE_SIZE
);

2452 i‡(
vmp
 =
NULL
)

2453 
vmp
 = 
umem_deÁu…_¨ía
;

2455 
	`ASSERT
(
	`P2PHASE
(
pha£
, 
UMEM_ALIGN
) == 0);

2460 i‡((
Æign
 & (Æig¿- 1)Ë!0 ||álig¿> 
vmp
->
vm_qu™tum
 ||

2461 ((
cÊags
 & 
UMC_NOHASH
Ë&& (cÊag†& 
UMC_NOTOUCH
)) ||

2462 
«me
 =
NULL
 || 
bufsize
 == 0) {

2463 
î∫o
 = 
EINVAL
;

2464  (
NULL
);

2473 i‡(
Æign
 == 0) {

2474 i‡(
	`P2ROUNDUP
(
bufsize
, 
UMEM_ALIGN
Ë>
UMEM_SECOND_ALIGN
)

2475 
Æign
 = 
UMEM_SECOND_ALIGN
;

2477 
Æign
 = 
UMEM_ALIGN
;

2478 } i‡(
Æign
 < 
UMEM_ALIGN
 && (
cÊags
 & 
UMC_NOTOUCH
) == 0)

2479 
Æign
 = 
UMEM_ALIGN
;

2487 
˝
 = 
	`vmem_xÆloc
(
umem_ˇche_¨ía
, 
csize
, 
UMEM_CPU_CACHE_SIZE
, 
pha£
,

2488 0, 
NULL
, NULL, 
VM_NOSLEEP
);

2490 i‡(
˝
 =
NULL
) {

2491 
î∫o
 = 
EAGAIN
;

2492  (
NULL
);

2495 
	`bzîo
(
˝
, 
csize
);

2497 (Ë
	`muãx_lock
(&
umem_Êags_lock
);

2498 i‡(
umem_Êags
 & 
UMF_RANDOMIZE
)

2499 
umem_Êags
 = (((umem_Êag†| ~
UMF_RANDOM
) + 1) & UMF_RANDOM) |

2500 
UMF_RANDOMIZE
;

2501 
˝
->
ˇche_Êags
 = 
umem_Êags
 | (
cÊags
 & 
UMF_DEBUG
);

2502 (Ë
	`muãx_u∆ock
(&
umem_Êags_lock
);

2507 i‡(
˝
->
ˇche_Êags
 & 
UMF_LITE
) {

2508 i‡(
bufsize
 >
umem_lôe_mösize
 &&

2509 
Æign
 <
umem_lôe_maxÆign
 &&

2510 
	`P2PHASE
(
bufsize
, 
umem_lôe_maxÆign
) != 0) {

2511 
˝
->
ˇche_Êags
 |
UMF_BUFTAG
;

2512 
˝
->
ˇche_Êags
 &~(
UMF_AUDIT
 | 
UMF_FIREWALL
);

2514 
˝
->
ˇche_Êags
 &~
UMF_DEBUG
;

2518 i‡((
cÊags
 & 
UMC_QCACHE
Ë&& (
˝
->
ˇche_Êags
 & 
UMF_AUDIT
))

2519 
˝
->
ˇche_Êags
 |
UMF_NOMAGAZINE
;

2521 i‡(
cÊags
 & 
UMC_NODEBUG
)

2522 
˝
->
ˇche_Êags
 &~
UMF_DEBUG
;

2524 i‡(
cÊags
 & 
UMC_NOTOUCH
)

2525 
˝
->
ˇche_Êags
 &~
UMF_TOUCH
;

2527 i‡(
cÊags
 & 
UMC_NOHASH
)

2528 
˝
->
ˇche_Êags
 &~(
UMF_AUDIT
 | 
UMF_FIREWALL
);

2530 i‡(
cÊags
 & 
UMC_NOMAGAZINE
)

2531 
˝
->
ˇche_Êags
 |
UMF_NOMAGAZINE
;

2533 i‡((
˝
->
ˇche_Êags
 & 
UMF_AUDIT
Ë&& !(
cÊags
 & 
UMC_NOTOUCH
))

2534 
˝
->
ˇche_Êags
 |
UMF_REDZONE
;

2536 i‡((
˝
->
ˇche_Êags
 & 
UMF_BUFTAG
Ë&& 
bufsize
 >
umem_möfúewÆl
 &&

2537 !(
˝
->
ˇche_Êags
 & 
UMF_LITE
Ë&& !(
cÊags
 & 
UMC_NOHASH
))

2538 
˝
->
ˇche_Êags
 |
UMF_FIREWALL
;

2540 i‡(
vmp
 !
umem_deÁu…_¨ía
 || 
umem_fúewÆl_¨ía
 =
NULL
)

2541 
˝
->
ˇche_Êags
 &~
UMF_FIREWALL
;

2543 i‡(
˝
->
ˇche_Êags
 & 
UMF_FIREWALL
) {

2544 
˝
->
ˇche_Êags
 &~
UMF_BUFTAG
;

2545 
˝
->
ˇche_Êags
 |
UMF_NOMAGAZINE
;

2546 
	`ASSERT
(
vmp
 =
umem_deÁu…_¨ía
);

2547 
vmp
 = 
umem_fúewÆl_¨ía
;

2553 (Ë
	`°∫˝y
(
˝
->
ˇche_«me
, 
«me
,  (cp->cache_name) - 1);

2554 
˝
->
ˇche_bufsize
 = 
bufsize
;

2555 
˝
->
ˇche_Æign
 = 
Æign
;

2556 
˝
->
ˇche_c⁄°ru˘‹
 = 
c⁄°ru˘‹
;

2557 
˝
->
ˇche_de°ru˘‹
 = 
de°ru˘‹
;

2558 
˝
->
ˇche_ª˛aim
 = 
ª˛aim
;

2559 
˝
->
ˇche_¥iv©e
 = 
¥iv©e
;

2560 
˝
->
ˇche_¨ía
 = 
vmp
;

2561 
˝
->
ˇche_cÊags
 = 
cÊags
;

2562 
˝
->
ˇche_˝u_mask
 = 
umem_˝u_mask
;

2567 
chunksize
 = 
bufsize
;

2569 i‡(
Æign
 >
UMEM_ALIGN
) {

2570 
chunksize
 = 
	`P2ROUNDUP
(chunksize, 
UMEM_ALIGN
);

2571 
˝
->
ˇche_buf˘l
 = 
chunksize
 - 
UMEM_ALIGN
;

2574 i‡(
˝
->
ˇche_Êags
 & 
UMF_BUFTAG
) {

2575 
˝
->
ˇche_buf˘l
 = 
chunksize
;

2576 
˝
->
ˇche_bu·ag
 = 
chunksize
;

2577 
chunksize
 + (
umem_bu·ag_t
);

2580 i‡(
˝
->
ˇche_Êags
 & 
UMF_DEADBEEF
) {

2581 
˝
->
ˇche_vîify
 = 
	`MIN
(˝->
ˇche_bu·ag
, 
umem_maxvîify
);

2582 i‡(
˝
->
ˇche_Êags
 & 
UMF_LITE
)

2583 
˝
->
ˇche_vîify
 = 
	`MIN
(˝->ˇche_vîify, 
UMEM_ALIGN
);

2586 
˝
->
ˇche_c⁄ã¡s
 = 
	`MIN
(˝->
ˇche_buf˘l
, 
umem_c⁄ã¡_maxßve
);

2588 
˝
->
ˇche_chunksize
 = 
chunksize
 = 
	`P2ROUNDUP
(chunksize, 
Æign
);

2590 i‡(
chunksize
 < 
bufsize
) {

2591 
î∫o
 = 
ENOMEM
;

2592 
Áû
;

2598 i‡(
vmp
 =
umem_fúewÆl_¨ía
) {

2599 
˝
->
ˇche_¶absize
 = 
	`P2ROUNDUP
(
chunksize
, 
vmp
->
vm_qu™tum
);

2600 
˝
->
ˇche_möcﬁ‹
 = cp->
ˇche_¶absize
 - 
chunksize
;

2601 
˝
->
ˇche_maxcﬁ‹
 = cp->
ˇche_möcﬁ‹
;

2602 
˝
->
ˇche_Êags
 |
UMF_HASH
;

2603 
	`ASSERT
(!(
˝
->
ˇche_Êags
 & 
UMF_BUFTAG
));

2604 } i‡((
cÊags
 & 
UMC_NOHASH
Ë|| (!(cÊag†& 
UMC_NOTOUCH
) &&

2605 !(
˝
->
ˇche_Êags
 & 
UMF_AUDIT
) &&

2606 
chunksize
 < 
vmp
->
vm_qu™tum
 / 
UMEM_VOID_FRACTION
)) {

2607 
˝
->
ˇche_¶absize
 = 
vmp
->
vm_qu™tum
;

2608 
˝
->
ˇche_möcﬁ‹
 = 0;

2609 
˝
->
ˇche_maxcﬁ‹
 =

2610 (
˝
->
ˇche_¶absize
 -  (
umem_¶ab_t
)Ë% 
chunksize
;

2612 i‡(
chunksize
 +  (
umem_¶ab_t
Ë> 
˝
->
ˇche_¶absize
) {

2613 
î∫o
 = 
EINVAL
;

2614 
Áû
;

2616 
	`ASSERT
(!(
˝
->
ˇche_Êags
 & 
UMF_AUDIT
));

2618 
size_t
 
chunks
, 
be°fô
, 
wa°e
, 
¶absize
;

2619 
size_t
 
möwa°e
 = 
LONG_MAX
;

2621 
chunks
 = 1; chunk†<
UMEM_VOID_FRACTION
; chunks++) {

2622 
¶absize
 = 
	`P2ROUNDUP
(
chunksize
 * 
chunks
,

2623 
vmp
->
vm_qu™tum
);

2627 i‡((
¶absize
 / 
chunks
Ë< 
chunksize
) {

2628 
î∫o
 = 
ENOMEM
;

2629 
Áû
;

2631 
chunks
 = 
¶absize
 / 
chunksize
;

2632 
wa°e
 = (
¶absize
 % 
chunksize
Ë/ 
chunks
;

2633 i‡(
wa°e
 < 
möwa°e
) {

2634 
möwa°e
 = 
wa°e
;

2635 
be°fô
 = 
¶absize
;

2638 i‡(
cÊags
 & 
UMC_QCACHE
)

2639 
be°fô
 = 
	`MAX
(1 << 
	`highbô
(3 * 
vmp
->
vm_qˇche_max
), 64);

2640 
˝
->
ˇche_¶absize
 = 
be°fô
;

2641 
˝
->
ˇche_möcﬁ‹
 = 0;

2642 
˝
->
ˇche_maxcﬁ‹
 = 
be°fô
 % 
chunksize
;

2643 
˝
->
ˇche_Êags
 |
UMF_HASH
;

2646 i‡(
˝
->
ˇche_Êags
 & 
UMF_HASH
) {

2647 
	`ASSERT
(!(
cÊags
 & 
UMC_NOHASH
));

2648 
˝
->
ˇche_buf˘l_ˇche
 = (˝->
ˇche_Êags
 & 
UMF_AUDIT
) ?

2649 
umem_buf˘l_audô_ˇche
 : 
umem_buf˘l_ˇche
;

2652 i‡(
˝
->
ˇche_maxcﬁ‹
 >
vmp
->
vm_qu™tum
)

2653 
˝
->
ˇche_maxcﬁ‹
 = 
vmp
->
vm_qu™tum
 - 1;

2655 
˝
->
ˇche_cﬁ‹
 = cp->
ˇche_möcﬁ‹
;

2660 (Ë
	`muãx_öô
(&
˝
->
ˇche_lock
, 
USYNC_THREAD
, 
NULL
);

2662 
˝
->
ˇche_‰ìli°
 = &˝->
ˇche_nuŒ¶ab
;

2663 
˝
->
ˇche_nuŒ¶ab
.
¶ab_ˇche
 = cp;

2664 
˝
->
ˇche_nuŒ¶ab
.
¶ab_ªf˙t
 = -1;

2665 
˝
->
ˇche_nuŒ¶ab
.
¶ab_√xt
 = &cp->cache_nullslab;

2666 
˝
->
ˇche_nuŒ¶ab
.
¶ab_¥ev
 = &cp->cache_nullslab;

2668 i‡(
˝
->
ˇche_Êags
 & 
UMF_HASH
) {

2669 
˝
->
ˇche_hash_èbÀ
 = 
	`vmem_Æloc
(
umem_hash_¨ía
,

2670 
UMEM_HASH_INITIAL
 *  (*), 
VM_NOSLEEP
);

2671 i‡(
˝
->
ˇche_hash_èbÀ
 =
NULL
) {

2672 
î∫o
 = 
EAGAIN
;

2673 
Áû_lock
;

2675 
	`bzîo
(
˝
->
ˇche_hash_èbÀ
,

2676 
UMEM_HASH_INITIAL
 *  (*));

2677 
˝
->
ˇche_hash_mask
 = 
UMEM_HASH_INITIAL
 - 1;

2678 
˝
->
ˇche_hash_shi·
 = 
	`highbô
((
ul⁄g_t
)
chunksize
) - 1;

2684 (Ë
	`muãx_öô
(&
˝
->
ˇche_dïŸ_lock
, 
USYNC_THREAD
, 
NULL
);

2686 
mç
 = 
umem_magty≥
; 
chunksize
 <mç->
mt_möbuf
; mtp++)

2689 
˝
->
ˇche_magty≥
 = 
mç
;

2694 
˝u_£qid
 = 0; cpu_£qid < 
umem_max_n˝us
; cpu_seqid++) {

2695 
umem_˝u_ˇche_t
 *
c˝
 = &
˝
->
ˇche_˝u
[
˝u_£qid
];

2696 (Ë
	`muãx_öô
(&
c˝
->
cc_lock
, 
USYNC_THREAD
, 
NULL
);

2697 
c˝
->
cc_Êags
 = 
˝
->
ˇche_Êags
;

2698 
c˝
->
cc_rounds
 = -1;

2699 
c˝
->
cc_¥ounds
 = -1;

2706 (Ë
	`muãx_lock
(&
umem_ˇche_lock
);

2707 
˝
->
ˇche_√xt
 = 
˙ext
 = &
umem_nuŒ_ˇche
;

2708 
˝
->
ˇche_¥ev
 = 
˝ªv
 = 
umem_nuŒ_ˇche
.cache_prev;

2709 
˙ext
->
ˇche_¥ev
 = 
˝
;

2710 
˝ªv
->
ˇche_√xt
 = 
˝
;

2711 (Ë
	`muãx_u∆ock
(&
umem_ˇche_lock
);

2713 i‡(
umem_ªady
 =
UMEM_READY
)

2714 
	`umem_ˇche_magazöe_íabÀ
(
˝
);

2716  (
˝
);

2718 
Áû_lock
:

2719 (Ë
	`muãx_de°roy
(&
˝
->
ˇche_lock
);

2720 
Áû
:

2721 
	`vmem_x‰ì
(
umem_ˇche_¨ía
, 
˝
, 
csize
);

2722  (
NULL
);

2723 
	}
}

2726 
	$umem_ˇche_de°roy
(
umem_ˇche_t
 *
˝
)

2728 
˝u_£qid
;

2735 (Ë
	`muãx_lock
(&
umem_ˇche_lock
);

2736 
˝
->
ˇche_¥ev
->
ˇche_√xt
 = cp->cache_next;

2737 
˝
->
ˇche_√xt
->
ˇche_¥ev
 = cp->cache_prev;

2738 
˝
->
ˇche_¥ev
 = cp->
ˇche_√xt
 = 
NULL
;

2739 (Ë
	`muãx_u∆ock
(&
umem_ˇche_lock
);

2741 
	`umem_ªmove_upd©es
(
˝
);

2743 
	`umem_ˇche_magazöe_purge
(
˝
);

2745 (Ë
	`muãx_lock
(&
˝
->
ˇche_lock
);

2746 i‡(
˝
->
ˇche_bu·ŸÆ
 != 0)

2747 
	`log_mesßge
("umem_cache_destroy: '%s' (%p)ÇotÉmpty\n",

2748 
˝
->
ˇche_«me
, (*)cp);

2749 
˝
->
ˇche_ª˛aim
 = 
NULL
;

2755 
˝
->
ˇche_c⁄°ru˘‹
 = (
umem_c⁄°ru˘‹_t
 *)1;

2756 
˝
->
ˇche_de°ru˘‹
 = (
umem_de°ru˘‹_t
 *)2;

2757 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_lock
);

2759 i‡(
˝
->
ˇche_hash_èbÀ
 !
NULL
)

2760 
	`vmem_‰ì
(
umem_hash_¨ía
, 
˝
->
ˇche_hash_èbÀ
,

2761 (
˝
->
ˇche_hash_mask
 + 1) *  (*));

2763 
˝u_£qid
 = 0; cpu_£qid < 
umem_max_n˝us
; cpu_seqid++)

2764 (Ë
	`muãx_de°roy
(&
˝
->
ˇche_˝u
[
˝u_£qid
].
cc_lock
);

2766 (Ë
	`muãx_de°roy
(&
˝
->
ˇche_dïŸ_lock
);

2767 (Ë
	`muãx_de°roy
(&
˝
->
ˇche_lock
);

2769 
	`vmem_‰ì
(
umem_ˇche_¨ía
, 
˝
, 
	`UMEM_CACHE_SIZE
(
umem_max_n˝us
));

2770 
	}
}

2773 
	$umem_ˇche_öô
()

2775 
i
;

2776 
size_t
 
size
, 
max_size
;

2777 
umem_ˇche_t
 *
˝
;

2778 
umem_magty≥_t
 *
mç
;

2779 
«me
[
UMEM_CACHE_NAMELEN
 + 1];

2780 
umem_ˇche_t
 *
umem_Æloc_ˇches
[
NUM_ALLOC_SIZES
];

2782 
i
 = 0; i <  (
umem_magty≥
Ë/  (*
mç
); i++) {

2783 
mç
 = &
umem_magty≥
[
i
];

2784 (Ë
	`¢¥ötf
(
«me
,  (name), "umem_magazine_%d",

2785 
mç
->
mt_magsize
);

2786 
mç
->
mt_ˇche
 = 
	`umem_ˇche_¸óã
(
«me
,

2787 (
mç
->
mt_magsize
 + 1) *  (*),

2788 
mç
->
mt_Æign
, 
NULL
, NULL, NULL, NULL,

2789 
umem_öã∫Æ_¨ía
, 
UMC_NOHASH
 | 
UMC_INTERNAL
);

2790 i‡(
mç
->
mt_ˇche
 =
NULL
)

2794 
umem_¶ab_ˇche
 = 
	`umem_ˇche_¸óã
("umem_slab_cache",

2795  (
umem_¶ab_t
), 0, 
NULL
, NULL, NULL, NULL,

2796 
umem_öã∫Æ_¨ía
, 
UMC_NOHASH
 | 
UMC_INTERNAL
);

2798 i‡(
umem_¶ab_ˇche
 =
NULL
)

2801 
umem_buf˘l_ˇche
 = 
	`umem_ˇche_¸óã
("umem_bufctl_cache",

2802  (
umem_buf˘l_t
), 0, 
NULL
, NULL, NULL, NULL,

2803 
umem_öã∫Æ_¨ía
, 
UMC_NOHASH
 | 
UMC_INTERNAL
);

2805 i‡(
umem_buf˘l_ˇche
 =
NULL
)

2814 
size
 = 
	`UMEM_BUFCTL_AUDIT_SIZE_DEPTH
(
umem_°ack_dïth
);

2815 
max_size
 = 
UMEM_BUFCTL_AUDIT_MAX_SIZE
;

2817 i‡(
size
 > 
max_size
) {

2818 
max_‰ames
 = 
UMEM_MAX_STACK_DEPTH
;

2820 
	`ASSERT
(
	`UMEM_BUFCTL_AUDIT_SIZE_DEPTH
(
max_‰ames
Ë<
max_size
);

2822 
umem_°ack_dïth
 = 
max_‰ames
;

2823 
size
 = 
	`UMEM_BUFCTL_AUDIT_SIZE_DEPTH
(
umem_°ack_dïth
);

2826 
umem_buf˘l_audô_ˇche
 = 
	`umem_ˇche_¸óã
("umem_bufctl_audit_cache",

2827 
size
, 0, 
NULL
, NULL, NULL, NULL, 
umem_öã∫Æ_¨ía
,

2828 
UMC_NOHASH
 | 
UMC_INTERNAL
);

2830 i‡(
umem_buf˘l_audô_ˇche
 =
NULL
)

2833 i‡(
vmem_backíd
 & 
VMEM_BACKEND_MMAP
)

2834 
umem_va_¨ía
 = 
	`vmem_¸óã
("umem_va",

2835 
NULL
, 0, 
∑gesize
,

2836 
vmem_Æloc
, 
vmem_‰ì
, 
hóp_¨ía
,

2837 8 * 
∑gesize
, 
VM_NOSLEEP
);

2839 
umem_va_¨ía
 = 
hóp_¨ía
;

2841 i‡(
umem_va_¨ía
 =
NULL
)

2844 
umem_deÁu…_¨ía
 = 
	`vmem_¸óã
("umem_default",

2845 
NULL
, 0, 
∑gesize
,

2846 
hóp_Æloc
, 
hóp_‰ì
, 
umem_va_¨ía
,

2847 0, 
VM_NOSLEEP
);

2849 i‡(
umem_deÁu…_¨ía
 =
NULL
)

2855 
i
 =  (
umem_Æloc_èbÀ
) /  (*umem_alloc_table);

2856 
	`ASSERT
(
umem_Æloc_èbÀ
[
i
 - 1] =&
umem_nuŒ_ˇche
);

2861 
i
 = 0; i < 
NUM_ALLOC_SIZES
; i++) {

2862 
size_t
 
ˇche_size
 = 
umem_Æloc_sizes
[
i
];

2863 
size_t
 
Æign
 = 0;

2868 i‡(
	`IS_P2ALIGNED
(
ˇche_size
, 64))

2869 
Æign
 = 64;

2870 i‡(
	`IS_P2ALIGNED
(
ˇche_size
, 
∑gesize
))

2871 
Æign
 = 
∑gesize
;

2872 (Ë
	`¢¥ötf
(
«me
,  (name), "umem_alloc_%lu",

2873 ()
ˇche_size
);

2875 
˝
 = 
	`umem_ˇche_¸óã
(
«me
, 
ˇche_size
, 
Æign
,

2876 
NULL
, NULL, NULL, NULL, NULL, 
UMC_INTERNAL
);

2877 i‡(
˝
 =
NULL
)

2880 
umem_Æloc_ˇches
[
i
] = 
˝
;

2887 
size
 = 
UMEM_ALIGN
;

2888 
i
 = 0; i < 
NUM_ALLOC_SIZES
; i++) {

2889 
size_t
 
ˇche_size
 = 
umem_Æloc_sizes
[
i
];

2891 
˝
 = 
umem_Æloc_ˇches
[
i
];

2893 
size
 <
ˇche_size
) {

2894 
umem_Æloc_èbÀ
[(
size
 - 1Ë>> 
UMEM_ALIGN_SHIFT
] = 
˝
;

2895 
size
 +
UMEM_ALIGN
;

2899 
	}
}

2906 
	$umem_°¨tup
(
ˇddr_t
 
°¨t
, 
size_t
 
Àn
, size_à
∑gesize
, caddr_à
mö°ack
,

2907 
ˇddr_t
 
max°ack
)

2909 #ifde‡
UMEM_STANDALONE


2910 
idx
;

2913 
	`umem_f‹kh™dÀr_öô
();

2916 #ifde‡
__löt


2918 
mö°ack
 = 
max°ack
;

2921 #ifde‡
UMEM_STANDALONE


2922 
umem_ªady
 = 
UMEM_READY_STARTUP
;

2923 
umem_öô_ív_ªady
 = 0;

2925 
umem_mö_°ack
 = 
mö°ack
;

2926 
umem_max_°ack
 = 
max°ack
;

2928 
noÁû_ˇŒback
 = 
NULL
;

2929 
umem_¶ab_ˇche
 = 
NULL
;

2930 
umem_buf˘l_ˇche
 = 
NULL
;

2931 
umem_buf˘l_audô_ˇche
 = 
NULL
;

2932 
hóp_¨ía
 = 
NULL
;

2933 
hóp_Æloc
 = 
NULL
;

2934 
hóp_‰ì
 = 
NULL
;

2935 
umem_öã∫Æ_¨ía
 = 
NULL
;

2936 
umem_ˇche_¨ía
 = 
NULL
;

2937 
umem_hash_¨ía
 = 
NULL
;

2938 
umem_log_¨ía
 = 
NULL
;

2939 
umem_ovîsize_¨ía
 = 
NULL
;

2940 
umem_va_¨ía
 = 
NULL
;

2941 
umem_deÁu…_¨ía
 = 
NULL
;

2942 
umem_fúewÆl_va_¨ía
 = 
NULL
;

2943 
umem_fúewÆl_¨ía
 = 
NULL
;

2944 
umem_memÆign_¨ía
 = 
NULL
;

2945 
umem_å™ß˘i⁄_log
 = 
NULL
;

2946 
umem_c⁄ã¡_log
 = 
NULL
;

2947 
umem_Áûuª_log
 = 
NULL
;

2948 
umem_¶ab_log
 = 
NULL
;

2949 
umem_˝u_mask
 = 0;

2951 
umem_˝us
 = &
umem_°¨tup_˝u
;

2952 
umem_°¨tup_˝u
.
˝u_ˇche_off£t
 = 
	`UMEM_CACHE_SIZE
(0);

2953 
umem_°¨tup_˝u
.
˝u_numbî
 = 0;

2955 
	`bc›y
(&
umem_nuŒ_ˇche_ãm∂©e
, &
umem_nuŒ_ˇche
,

2956  (
umem_ˇche_t
));

2958 
idx
 = 0; idx < (
UMEM_MAXBUF
 >> 
UMEM_ALIGN_SHIFT
); idx++)

2959 
umem_Æloc_èbÀ
[
idx
] = &
umem_nuŒ_ˇche
;

2966 
	`umem_ty≥_öô
(
°¨t
, 
Àn
, 
∑gesize
);

2968 
	`vmem_°¨tup
();

2969 
	}
}

2972 
	$umem_öô
()

2974 
size_t
 
maxvîify
, 
möfúewÆl
;

2975 
size_t
 
size
;

2976 
idx
;

2977 
umem_˝u_t
 *
√w_˝us
;

2979 
vmem_t
 *
memÆign_¨ía
, *
ovîsize_¨ía
;

2981 i‡(
	`thr_£lf
(Ë!
umem_öô_thr
) {

2985 (Ë
	`muãx_lock
(&
umem_öô_lock
);

2986 i‡(
umem_ªady
 !
UMEM_READY_STARTUP
) {

2991 
umem_ªady
 =
UMEM_READY_INITING
)

2992 (Ë
	`_c⁄d_waô
(&
umem_öô_cv
,

2993 &
umem_öô_lock
);

2994 
	`ASSERT
(
umem_ªady
 =
UMEM_READY
 ||

2995 
umem_ªady
 =
UMEM_READY_INIT_FAILED
);

2996 (Ë
	`muãx_u∆ock
(&
umem_öô_lock
);

2997  (
umem_ªady
 =
UMEM_READY
);

3000 
	`ASSERT
(
umem_ªady
 =
UMEM_READY_STARTUP
);

3001 
	`ASSERT
(
umem_öô_ív_ªady
 == 0);

3003 
umem_ªady
 = 
UMEM_READY_INITING
;

3004 
umem_öô_thr
 = 
	`thr_£lf
();

3006 (Ë
	`muãx_u∆ock
(&
umem_öô_lock
);

3007 
	`umem_£tup_ívv¨s
(0);

3008 i‡(
umem_öô_ív_ªady
) {

3012 
	`ASSERT
(
umem_ªady
 =
UMEM_READY
 ||

3013 
umem_ªady
 =
UMEM_READY_INIT_FAILED
);

3014 
	`ASSERT
(
umem_öô_thr
 == 0);

3015  (
umem_ªady
 =
UMEM_READY
);

3017 } i‡(!
umem_öô_ív_ªady
) {

3031 
	`umem_£tup_ívv¨s
(1);

3033 
	`umem_∑nic
(

3036 
umem_öô_ív_ªady
 = 1;

3042 
maxvîify
 = 
möfúewÆl
 = 
ULONG_MAX
;

3045 i‡( (
umem_˝u_ˇche_t
Ë!
UMEM_CPU_CACHE_SIZE
) {

3046 
	`umem_∑nic
("sizeof (umem_cpu_cache_t) = %d, should be %d\n",

3047  (
umem_˝u_ˇche_t
), 
UMEM_CPU_CACHE_SIZE
);

3050 
umem_max_n˝us
 = 
	`umem_gë_max_n˝us
();

3055 
	`umem_¥o˚ss_ívv¨s
();

3057 i‡(
	`is£tugid
())

3058 
umem_mtbf
 = 0;

3063 i‡(!(
umem_Êags
 & 
UMF_AUDIT
))

3064 
	`vmem_no_debug
();

3066 
hóp_¨ía
 = 
	`vmem_hóp_¨ía
(&
hóp_Æloc
, &
hóp_‰ì
);

3068 
∑gesize
 = 
hóp_¨ía
->
vm_qu™tum
;

3070 
umem_öã∫Æ_¨ía
 = 
	`vmem_¸óã
("umem_öã∫Æ", 
NULL
, 0, 
∑gesize
,

3071 
hóp_Æloc
, 
hóp_‰ì
, 
hóp_¨ía
, 0, 
VM_NOSLEEP
);

3073 
umem_deÁu…_¨ía
 = 
umem_öã∫Æ_¨ía
;

3075 i‡(
umem_öã∫Æ_¨ía
 =
NULL
)

3076 
Áû
;

3078 
umem_ˇche_¨ía
 = 
	`vmem_¸óã
("umem_ˇche", 
NULL
, 0, 
UMEM_ALIGN
,

3079 
vmem_Æloc
, 
vmem_‰ì
, 
umem_öã∫Æ_¨ía
, 0, 
VM_NOSLEEP
);

3081 
umem_hash_¨ía
 = 
	`vmem_¸óã
("umem_hash", 
NULL
, 0, 
UMEM_ALIGN
,

3082 
vmem_Æloc
, 
vmem_‰ì
, 
umem_öã∫Æ_¨ía
, 0, 
VM_NOSLEEP
);

3084 
umem_log_¨ía
 = 
	`vmem_¸óã
("umem_log", 
NULL
, 0, 
UMEM_ALIGN
,

3085 
hóp_Æloc
, 
hóp_‰ì
, 
hóp_¨ía
, 0, 
VM_NOSLEEP
);

3087 
umem_fúewÆl_va_¨ía
 = 
	`vmem_¸óã
("umem_firewall_va",

3088 
NULL
, 0, 
∑gesize
,

3089 
umem_fúewÆl_va_Æloc
, 
umem_fúewÆl_va_‰ì
, 
hóp_¨ía
,

3090 0, 
VM_NOSLEEP
);

3092 i‡(
umem_ˇche_¨ía
 =
NULL
 || 
umem_hash_¨ía
 == NULL ||

3093 
umem_log_¨ía
 =
NULL
 || 
umem_fúewÆl_va_¨ía
 == NULL)

3094 
Áû
;

3096 
umem_fúewÆl_¨ía
 = 
	`vmem_¸óã
("umem_fúewÆl", 
NULL
, 0, 
∑gesize
,

3097 
hóp_Æloc
, 
hóp_‰ì
, 
umem_fúewÆl_va_¨ía
, 0,

3098 
VM_NOSLEEP
);

3100 i‡(
umem_fúewÆl_¨ía
 =
NULL
)

3101 
Áû
;

3103 
ovîsize_¨ía
 = 
	`vmem_¸óã
("umem_ovîsize", 
NULL
, 0, 
∑gesize
,

3104 
hóp_Æloc
, 
hóp_‰ì
, 
möfúewÆl
 < 
ULONG_MAX
 ?

3105 
umem_fúewÆl_va_¨ía
 : 
hóp_¨ía
, 0, 
VM_NOSLEEP
);

3107 
memÆign_¨ía
 = 
	`vmem_¸óã
("umem_memÆign", 
NULL
, 0, 
UMEM_ALIGN
,

3108 
hóp_Æloc
, 
hóp_‰ì
, 
möfúewÆl
 < 
ULONG_MAX
 ?

3109 
umem_fúewÆl_va_¨ía
 : 
hóp_¨ía
, 0, 
VM_NOSLEEP
);

3111 i‡(
ovîsize_¨ía
 =
NULL
 || 
memÆign_¨ía
 == NULL)

3112 
Áû
;

3114 i‡(
umem_max_n˝us
 > 
	`CPUHINT_MAX
())

3115 
umem_max_n˝us
 = 
	`CPUHINT_MAX
();

3117 (
umem_max_n˝us
 & (umem_max_ncpus - 1)) != 0)

3118 
umem_max_n˝us
++;

3120 i‡(
umem_max_n˝us
 == 0)

3121 
umem_max_n˝us
 = 1;

3123 
size
 = 
umem_max_n˝us
 *  (
umem_˝u_t
);

3124 
√w_˝us
 = 
	`vmem_Æloc
(
umem_öã∫Æ_¨ía
, 
size
, 
VM_NOSLEEP
);

3125 i‡(
√w_˝us
 =
NULL
)

3126 
Áû
;

3128 
	`bzîo
(
√w_˝us
, 
size
);

3129 
idx
 = 0; idx < 
umem_max_n˝us
; idx++) {

3130 
√w_˝us
[
idx
].
˝u_numbî
 = idx;

3131 
√w_˝us
[
idx
].
˝u_ˇche_off£t
 = 
	`UMEM_CACHE_SIZE
(idx);

3133 
umem_˝us
 = 
√w_˝us
;

3134 
umem_˝u_mask
 = (
umem_max_n˝us
 - 1);

3136 i‡(
umem_maxvîify
 == 0)

3137 
umem_maxvîify
 = 
maxvîify
;

3139 i‡(
umem_möfúewÆl
 == 0)

3140 
umem_möfúewÆl
 = 
möfúewÆl
;

3145 
umem_ª≠_√xt
 = 
	`gëhπime
(Ë+ 
NANOSEC
;

3147 #i‚de‡
UMEM_STANDALONE


3148 (Ë
	`gëtimeofday
(&
umem_upd©e_√xt
, 
NULL
);

3155 i‡(
umem_loggög
) {

3156 
umem_å™ß˘i⁄_log
 = 
	`umem_log_öô
(
umem_å™ß˘i⁄_log_size
);

3157 
umem_c⁄ã¡_log
 = 
	`umem_log_öô
(
umem_c⁄ã¡_log_size
);

3158 
umem_Áûuª_log
 = 
	`umem_log_öô
(
umem_Áûuª_log_size
);

3159 
umem_¶ab_log
 = 
	`umem_log_öô
(
umem_¶ab_log_size
);

3166 i‡(
	`umem_ˇche_öô
() == 0) {

3167 
	`log_mesßge
("unableÅo create initial caches\n");

3168 
Áû
;

3170 
umem_ovîsize_¨ía
 = 
ovîsize_¨ía
;

3171 
umem_memÆign_¨ía
 = 
memÆign_¨ía
;

3173 
	`umem_ˇche_≠∂yÆl
(
umem_ˇche_magazöe_íabÀ
);

3178 (Ë
	`muãx_lock
(&
umem_öô_lock
);

3179 
umem_ªady
 = 
UMEM_READY
;

3180 
umem_öô_thr
 = 0;

3181 (Ë
	`c⁄d_brﬂdˇ°
(&
umem_öô_cv
);

3182 (Ë
	`muãx_u∆ock
(&
umem_öô_lock
);

3185 
Áû
:

3186 
	`log_mesßge
("umem initialization failed\n");

3188 (Ë
	`muãx_lock
(&
umem_öô_lock
);

3189 
umem_ªady
 = 
UMEM_READY_INIT_FAILED
;

3190 
umem_öô_thr
 = 0;

3191 (Ë
	`c⁄d_brﬂdˇ°
(&
umem_öô_cv
);

3192 (Ë
	`muãx_u∆ock
(&
umem_öô_lock
);

3194 
	}
}

	@umem.h

27 #i‚de‡
_UMEM_H


28 
	#_UMEM_H


	)

32 
	~<sys/ty≥s.h
>

33 
	~<sys/vmem.h
>

34 
	~<°dlib.h
>

36 #ifdef 
__˝lu•lus


40 
	#UMEM_DEFAULT
 0x0000

	)

41 
	#UMEM_NOFAIL
 0x0100

	)

43 
	#UMEM_FLAGS
 0xfff‡

	)

45 *
umem_Æloc
(
size_t
, );

46 *
umem_Æloc_Æign
(
size_t
, size_t, );

47 *
umem_zÆloc
(
size_t
, );

48 
umem_‰ì
(*, 
size_t
);

49 
umem_‰ì_Æign
(*, 
size_t
);

55 
	#UMC_NOTOUCH
 0x00010000

	)

56 
	#UMC_NODEBUG
 0x00020000

	)

57 
	#UMC_NOMAGAZINE
 0x00040000

	)

58 
	#UMC_NOHASH
 0x00080000

	)

61 
	gumem_ˇche
;

63 
umem_ˇche
 
	tumem_ˇche_t
;

64 
	tumem_c⁄°ru˘‹_t
(*, *, );

65 
	tumem_de°ru˘‹_t
(*, *);

66 
	tumem_ª˛aim_t
(*);

68 
	tumem_noÁû_ˇŒback_t
();

69 
	#UMEM_CALLBACK_RETRY
 0

	)

70 
	#UMEM_CALLBACK_EXIT
(
°©us
Ë(0x100 | ((°©usË& 0xFF))

	)

72 
umem_noÁû_ˇŒback
(
umem_noÁû_ˇŒback_t
 *);

74 
umem_ˇche_t
 *
umem_ˇche_¸óã
(*, 
size_t
,

75 
size_t
, 
umem_c⁄°ru˘‹_t
 *, 
umem_de°ru˘‹_t
 *, 
umem_ª˛aim_t
 *,

76 *, 
vmem_t
 *, );

77 
umem_ˇche_de°roy
(
umem_ˇche_t
 *);

79 *
umem_ˇche_Æloc
(
umem_ˇche_t
 *, );

80 
umem_ˇche_‰ì
(
umem_ˇche_t
 *, *);

82 
umem_ª≠
();

84 #ifdef 
__˝lu•lus


	@umem_agent_support.c

32 
	~"c⁄fig.h
"

33 
	~"umem_ba£.h
"

35 
	#AGENT_STACK_SIZE
 4096

	)

38 
	g__umem_agít_°ack_beg
[
AGENT_STACK_SIZE
];

39 *
	g__umem_agít_°ack_íd
 = 
__umem_agít_°ack_beg
 + 
AGENT_STACK_SIZE
;

42 
	$__umem_agít_‰ì_bp
(
umem_ˇche_t
 *
˝
, *
buf
)

44 
	`_bªakpoöt
();

46 
	`_umem_ˇche_‰ì
(
˝
, 
buf
);

47 
	`_bªakpoöt
();

48 
	}
}

	@umem_base.h

27 #i‚def 
_UMEM_BASE_H


28 
	#_UMEM_BASE_H


	)

32 
	~<umem_im∂.h
>

34 #ifdef 
__˝lu•lus


38 
	~"misc.h
"

40 
size_t
 
∑gesize
;

41 #unde‡
PAGESIZE


42 
	#PAGESIZE
 
∑gesize


	)

47 
vmem_t
 *
umem_memÆign_¨ía
;

49 
umem_ªady
;

50 
thªad_t
 
umem_öô_thr
;

52 
umem_öô
();

55 
umem_log_hódî_t
 *
umem_å™ß˘i⁄_log
;

56 
umem_log_hódî_t
 *
umem_c⁄ã¡_log
;

57 
umem_log_hódî_t
 *
umem_Áûuª_log
;

58 
umem_log_hódî_t
 *
umem_¶ab_log
;

60 
muãx_t
 
umem_öô_lock
;

62 
muãx_t
 
umem_ˇche_lock
;

63 
umem_ˇche_t
 
umem_nuŒ_ˇche
;

65 
muãx_t
 
umem_Êags_lock
;

67 
muãx_t
 
umem_upd©e_lock
;

68 
c⁄d_t
 
umem_upd©e_cv
;

69 vﬁ©ûê
thªad_t
 
umem_°_upd©e_thr
;

70 
thªad_t
 
umem_upd©e_thr
;

71 
timevÆ
 
umem_upd©e_√xt
;

73 vﬁ©ûê
hπime_t
 
umem_ª≠_√xt
;

74 vﬁ©ûê
uöt32_t
 
umem_ª≠ög
;

75 
	#UMEM_REAP_DONE
 0x00000000

	)

76 
	#UMEM_REAP_ADDING
 0x00000001

	)

77 
	#UMEM_REAP_ACTIVE
 0x00000002

	)

82 
uöt32_t
 
umem_max_n˝us
;

84 
uöt32_t
 
umem_°ack_dïth
;

85 
uöt32_t
 
umem_ª≠_öãrvÆ
;

86 
uöt32_t
 
umem_upd©e_öãrvÆ
;

87 
uöt32_t
 
umem_dïŸ_c⁄ã¡i⁄
;

88 
uöt32_t
 
umem_ab‹t
;

89 
uöt32_t
 
umem_ouçut
;

90 
uöt32_t
 
umem_loggög
;

91 
uöt32_t
 
umem_mtbf
;

92 
size_t
 
umem_å™ß˘i⁄_log_size
;

93 
size_t
 
umem_c⁄ã¡_log_size
;

94 
size_t
 
umem_Áûuª_log_size
;

95 
size_t
 
umem_¶ab_log_size
;

96 
size_t
 
umem_c⁄ã¡_maxßve
;

97 
size_t
 
umem_lôe_mösize
;

98 
size_t
 
umem_lôe_maxÆign
;

99 
size_t
 
umem_maxvîify
;

100 
size_t
 
umem_möfúewÆl
;

102 
uöt32_t
 
umem_Êags
;

107 *
_umem_Æloc
(
size_t
 
size
, 
umÊags
);

108 *
_umem_zÆloc
(
size_t
 
size
, 
umÊags
);

109 
_umem_‰ì
(*
buf
, 
size_t
 
size
);

111 *
_umem_ˇche_Æloc
(
umem_ˇche_t
 *
ˇche
, 
Êags
);

112 
_umem_ˇche_‰ì
(
umem_ˇche_t
 *
ˇche
, *
buf„r
);

117 
umem_ty≥_öô
(
ˇddr_t
, 
size_t
, size_t);

118 
umem_gë_max_n˝us
();

119 
umem_¥o˚ss_upd©es
();

120 
umem_ˇche_≠∂yÆl
((*)(
umem_ˇche_t
 *));

121 
umem_ˇche_upd©e
(
umem_ˇche_t
 *);

126 
umem_f‹kh™dÀr_öô
();

131 
umem_¸óã_upd©e_thªad
();

136 
umem_£tup_ívv¨s
();

137 
umem_¥o˚ss_ívv¨s
();

139 #ifdef 
__˝lu•lus


	@umem_fail.c

36 
	~"c⁄fig.h
"

37 
	~<sys/ty≥s.h
>

38 
	~<sig«l.h
>

39 
	~<°d¨g.h
>

40 
	~<°rög.h
>

41 
	~<°dio.h
>

43 
	~"misc.h
"

45 vﬁ©ûê
	gumem_exôög
 = 0;

46 
	#UMEM_EXIT_ABORT
 1

	)

48 
muãx_t
 
	gumem_exô_lock
 = 
DEFAULTMUTEX
;

51 
	$fú°exô
(
ty≥
)

53 i‡(
umem_exôög
)

56 (Ë
	`muãx_lock
(&
umem_exô_lock
);

57 i‡(
umem_exôög
) {

58 (Ë
	`muãx_u∆ock
(&
umem_exô_lock
);

61 
umem_exôög
 = 
ty≥
;

62 (Ë
	`muãx_u∆ock
(&
umem_exô_lock
);

65 
	}
}

74 
__NORETURN


75 
	$umem_do_ab‹t
()

77 #ifde‡
_WIN32


78 
	`ab‹t
();

80 i‡(
	`fú°exô
(
UMEM_EXIT_ABORT
)) {

81 (Ë
	`øi£
(
SIGABRT
);

85 #i‡
	`deföed
(
__FªeBSD__
)

86 
sig£t_t
 
£t
;

87 
siga˘i⁄
 
ß
;

89 
ß
.
ß_h™dÀr
 = 
SIG_DFL
;

90 (Ë
	`siga˘i⁄
(
SIGABRT
, &
ß
, 
NULL
);

91 (Ë
	`sigem±y£t
 (&
£t
);

92 (Ë
	`sigadd£t
 (&
£t
, 
SIGABRT
);

93 (Ë
	`sig¥ocmask
 (
SIG_UNBLOCK
, &
£t
, 
NULL
);

94 (Ë
	`øi£
 (
SIGABRT
);

96 (Ë
	`sig«l
(
SIGABRT
, 
SIG_DFL
);

97 (Ë
	`sigªl£
(
SIGABRT
);

98 (Ë
	`øi£
(
SIGABRT
);

102 
	}
}

104 
	#SKIP_FRAMES
 1

	)

105 
	#ERR_STACK_FRAMES
 128

	)

108 
	$¥öt_°ackåa˚
()

110 
uöçå_t
 
cur_°ack
[
ERR_STACK_FRAMES
];

115 
uöt_t
 
n‰ames
 = 
	`gëpc°ack
(
cur_°ack
, 
ERR_STACK_FRAMES
, 0);

116 
uöt_t
 
idx
;

118 i‡(
n‰ames
 > 
SKIP_FRAMES
) {

119 
	`umem_¥ötf
("stackÅrace:\n");

121 
idx
 = 
SKIP_FRAMES
; idx < 
n‰ames
; idx++) {

122 (Ë
	`¥öt_sym
((*)
cur_°ack
[
idx
]);

123 
	`umem_¥ötf
("\n");

126 
	}
}

129 
	$umem_∑nic
(c⁄° *
f‹m©
, ...)

131 
va_li°
 
va
;

133 
	`va_°¨t
(
va
, 
f‹m©
);

134 
	`umem_v¥ötf
(
f‹m©
, 
va
);

135 
	`va_íd
(
va
);

137 i‡(
f‹m©
[
	`°æí
(format)-1] != '\n')

138 
	`umem_îr‹_íãr
("\n");

140 #ifde‡
ECELERITY


141 
	`va_°¨t
(
va
, 
f‹m©
);

142 
	`ec_debug_v¥ötf
(
DCRITICAL
, 
DMEM
, 
f‹m©
, 
va
);

143 
	`va_íd
(
va
);

146 
	`¥öt_°ackåa˚
();

148 
	`umem_do_ab‹t
();

149 
	}
}

152 
	$umem_îr_ªcovîabÀ
(c⁄° *
f‹m©
, ...)

154 
va_li°
 
va
;

156 
	`va_°¨t
(
va
, 
f‹m©
);

157 
	`umem_v¥ötf
(
f‹m©
, 
va
);

158 
	`va_íd
(
va
);

160 i‡(
f‹m©
[
	`°æí
(format)-1] != '\n')

161 
	`umem_îr‹_íãr
("\n");

163 
	`¥öt_°ackåa˚
();

165 i‡(
umem_ab‹t
 > 0)

166 
	`umem_do_ab‹t
();

167 
	}
}

170 
	$__umem_as£π_Áûed
(c⁄° *
as£πi⁄
, c⁄° *
fûe
, 
löe
)

172 
	`umem_∑nic
("Assertion failed: %s, file %s,Üine %d\n",

173 
as£πi⁄
, 
fûe
, 
löe
);

174 
	`umem_do_ab‹t
();

177 
	}
}

	@umem_fork.c

32 
	~"c⁄fig.h
"

34 
	~"umem_ba£.h
"

35 
	~"vmem_ba£.h
"

37 #i‚de‡
_WIN32


38 
	~<uni°d.h
>

45 
	$umem_lockup_ˇche
(
umem_ˇche_t
 *
˝
)

47 
idx
;

48 
n˝us
 = 
˝
->
ˇche_˝u_mask
 + 1;

50 
idx
 = 0; idx < 
n˝us
; idx++)

51 (Ë
	`muãx_lock
(&
˝
->
ˇche_˝u
[
idx
].
cc_lock
);

53 (Ë
	`muãx_lock
(&
˝
->
ˇche_dïŸ_lock
);

54 (Ë
	`muãx_lock
(&
˝
->
ˇche_lock
);

55 
	}
}

58 
	$umem_ªÀa£_ˇche
(
umem_ˇche_t
 *
˝
)

60 
idx
;

61 
n˝us
 = 
˝
->
ˇche_˝u_mask
 + 1;

63 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_lock
);

64 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_dïŸ_lock
);

66 
idx
 = 0; idx < 
n˝us
; idx++)

67 (Ë
	`muãx_u∆ock
(&
˝
->
ˇche_˝u
[
idx
].
cc_lock
);

68 
	}
}

71 
	$umem_lockup_log_hódî
(
umem_log_hódî_t
 *
lhp
)

73 
idx
;

74 i‡(
lhp
 =
NULL
)

76 
idx
 = 0; idx < 
umem_max_n˝us
; idx++)

77 (Ë
	`muãx_lock
(&
lhp
->
lh_˝u
[
idx
].
˛h_lock
);

79 (Ë
	`muãx_lock
(&
lhp
->
lh_lock
);

80 
	}
}

83 
	$umem_ªÀa£_log_hódî
(
umem_log_hódî_t
 *
lhp
)

85 
idx
;

86 i‡(
lhp
 =
NULL
)

89 (Ë
	`muãx_u∆ock
(&
lhp
->
lh_lock
);

91 
idx
 = 0; idx < 
umem_max_n˝us
; idx++)

92 (Ë
	`muãx_u∆ock
(&
lhp
->
lh_˝u
[
idx
].
˛h_lock
);

93 
	}
}

96 
	$umem_lockup
()

98 
umem_ˇche_t
 *
˝
;

100 (Ë
	`muãx_lock
(&
umem_öô_lock
);

106 i‡(
umem_ªady
 =
UMEM_READY_INITING
 && 
umem_öô_thr
 !
	`thr_£lf
()) {

107 (Ë
	`muãx_u∆ock
(&
umem_öô_lock
);

108 (Ë
	`umem_öô
();

109 (Ë
	`muãx_lock
(&
umem_öô_lock
);

111 (Ë
	`muãx_lock
(&
umem_ˇche_lock
);

112 (Ë
	`muãx_lock
(&
umem_upd©e_lock
);

113 (Ë
	`muãx_lock
(&
umem_Êags_lock
);

115 
	`umem_lockup_ˇche
(&
umem_nuŒ_ˇche
);

116 
˝
 = 
umem_nuŒ_ˇche
.
ˇche_¥ev
; cp != &umem_null_cache;

117 
˝
 = cp->
ˇche_¥ev
)

118 
	`umem_lockup_ˇche
(
˝
);

120 
	`umem_lockup_log_hódî
(
umem_å™ß˘i⁄_log
);

121 
	`umem_lockup_log_hódî
(
umem_c⁄ã¡_log
);

122 
	`umem_lockup_log_hódî
(
umem_Áûuª_log
);

123 
	`umem_lockup_log_hódî
(
umem_¶ab_log
);

125 (Ë
	`c⁄d_brﬂdˇ°
(&
umem_upd©e_cv
);

127 
	`vmem_sbrk_lockup
();

128 
	`vmem_lockup
();

129 
	}
}

132 
	$umem_ªÀa£
()

134 
umem_ˇche_t
 *
˝
;

136 
	`vmem_ªÀa£
();

137 
	`vmem_sbrk_ªÀa£
();

139 
	`umem_ªÀa£_log_hódî
(
umem_¶ab_log
);

140 
	`umem_ªÀa£_log_hódî
(
umem_Áûuª_log
);

141 
	`umem_ªÀa£_log_hódî
(
umem_c⁄ã¡_log
);

142 
	`umem_ªÀa£_log_hódî
(
umem_å™ß˘i⁄_log
);

144 
˝
 = 
umem_nuŒ_ˇche
.
ˇche_√xt
; cp != &umem_null_cache;

145 
˝
 = cp->
ˇche_√xt
)

146 
	`umem_ªÀa£_ˇche
(
˝
);

147 
	`umem_ªÀa£_ˇche
(&
umem_nuŒ_ˇche
);

149 (Ë
	`muãx_u∆ock
(&
umem_Êags_lock
);

150 (Ë
	`muãx_u∆ock
(&
umem_upd©e_lock
);

151 (Ë
	`muãx_u∆ock
(&
umem_ˇche_lock
);

152 (Ë
	`muãx_u∆ock
(&
umem_öô_lock
);

153 
	}
}

156 
	$umem_ªÀa£_chûd
()

158 
umem_ˇche_t
 *
˝
;

163 
umem_upd©e_thr
 = 0;

165 i‡(
umem_°_upd©e_thr
 !
	`thr_£lf
()) {

166 
umem_°_upd©e_thr
 = 0;

167 
umem_ª≠ög
 = 
UMEM_REAP_DONE
;

169 
˝
 = 
umem_nuŒ_ˇche
.
ˇche_√xt
; cp != &umem_null_cache;

170 
˝
 = cp->
ˇche_√xt
) {

171 i‡(
˝
->
ˇche_uÊags
 & 
UMU_NOTIFY
)

172 
˝
->
ˇche_uÊags
 &~
UMU_NOTIFY
;

183 i‡(
˝
->
ˇche_uÊags
 & 
UMU_ACTIVE
) {

184 
umem_ˇche_t
 *
˙ext
, *
˝ªv
;

186 
	`ASSERT
(
˝
->
ˇche_u√xt
 =
NULL
 &&

187 
˝
->
ˇche_u¥ev
 =
NULL
);

189 
˝
->
ˇche_uÊags
 &~
UMU_ACTIVE
;

190 
˝
->
ˇche_u√xt
 = 
˙ext
 = &
umem_nuŒ_ˇche
;

191 
˝
->
ˇche_u¥ev
 = 
˝ªv
 =

192 
umem_nuŒ_ˇche
.
ˇche_u¥ev
;

193 
˙ext
->
ˇche_u¥ev
 = 
˝
;

194 
˝ªv
->
ˇche_u√xt
 = 
˝
;

199 
	`umem_ªÀa£
();

200 
	}
}

204 
	$umem_f‹kh™dÀr_öô
()

206 #i‚de‡
_WIN32


212 (Ë
	`±hªad_©f‹k
(
umem_lockup
, 
umem_ªÀa£
, 
umem_ªÀa£_chûd
);

214 
	}
}

	@umem_impl.h

30 #i‚de‡
_UMEM_IMPL_H


31 
	#_UMEM_IMPL_H


	)

35 
	~<umem.h
>

37 #ifde‡
HAVE_SYS_SYSMACROS_H


38 
	~<sys/sysma¸os.h
>

41 #i‡
HAVE_SYS_TIME_H


42 
	~<sys/time.h
>

45 
	~<sys/vmem.h
>

46 #ifde‡
HAVE_THREAD_H


47 
	~<thªad.h
>

49 
	~"sﬁ_com∑t.h
"

52 #ifdef 
__˝lu•lus


63 
	#UMC_QCACHE
 0x00100000

	)

64 
	#UMC_INTERNAL
 0x80000000

	)

69 
	#UMF_AUDIT
 0x00000001

	)

70 
	#UMF_DEADBEEF
 0x00000002

	)

71 
	#UMF_REDZONE
 0x00000004

	)

72 
	#UMF_CONTENTS
 0x00000008

	)

73 
	#UMF_CHECKSIGNAL
 0x00000010

	)

74 
	#UMF_NOMAGAZINE
 0x00000020

	)

75 
	#UMF_FIREWALL
 0x00000040

	)

76 
	#UMF_LITE
 0x00000100

	)

78 
	#UMF_HASH
 0x00000200

	)

79 
	#UMF_RANDOMIZE
 0x00000400

	)

81 
	#UMF_BUFTAG
 (
UMF_DEADBEEF
 | 
UMF_REDZONE
)

	)

82 
	#UMF_TOUCH
 (
UMF_BUFTAG
 | 
UMF_LITE
 | 
UMF_CONTENTS
)

	)

83 
	#UMF_RANDOM
 (
UMF_TOUCH
 | 
UMF_AUDIT
 | 
UMF_NOMAGAZINE
)

	)

84 
	#UMF_DEBUG
 (
UMF_RANDOM
 | 
UMF_FIREWALL
)

	)

86 
	#UMEM_STACK_DEPTH
 
umem_°ack_dïth


	)

88 
	#UMEM_FREE_PATTERN
 0xdódbìfdódbìfULL

	)

89 
	#UMEM_UNINITIALIZED_PATTERN
 0xbaddˇ„baddˇ„ULL

	)

90 
	#UMEM_REDZONE_PATTERN
 0x„edÁ˚„edÁ˚ULL

	)

91 
	#UMEM_REDZONE_BYTE
 0xbb

	)

93 
	#UMEM_FATAL_FLAGS
 (
UMEM_NOFAIL
)

	)

94 
	#UMEM_SLEEP_FLAGS
 (0)

	)

101 
	#UMEM_SIZE_ENCODE
(
x
Ë(251 * (xË+ 1)

	)

102 
	#UMEM_SIZE_DECODE
(
x
Ë((xË/ 251)

	)

103 
	#UMEM_SIZE_VALID
(
x
Ë((xË% 251 =1)

	)

116 
	sumem_buf˘l
 {

117 
umem_buf˘l
 *
bc_√xt
;

118 *
bc_addr
;

119 
umem_¶ab
 *
bc_¶ab
;

120 } 
	tumem_buf˘l_t
;

128 
	#UMEM_BUFCTL_AUDIT_SIZE_DEPTH
(
‰ames
) \

129 ((
size_t
)(&((
umem_buf˘l_audô_t
 *)0)->
bc_°ack
[
‰ames
]))

	)

140 
	#UMEM_BUFCTL_AUDIT_ALIGN
 32

	)

142 
	#UMEM_BUFCTL_AUDIT_MAX_SIZE
 \

143 (
	`P2ALIGN
((
PAGESIZE
 -  (
umem_¶ab_t
))/2 - \

144  (
umem_bu·ag_t
), 
UMEM_BUFCTL_AUDIT_ALIGN
))

	)

146 
	#UMEM_MAX_STACK_DEPTH
 \

147 ((
UMEM_BUFCTL_AUDIT_MAX_SIZE
 - \

148 
	`UMEM_BUFCTL_AUDIT_SIZE_DEPTH
(0)Ë/  (
uöçå_t
))

	)

150 
	sumem_buf˘l_audô
 {

151 
umem_buf˘l
 *
bc_√xt
;

152 *
bc_addr
;

153 
umem_¶ab
 *
bc_¶ab
;

154 
umem_ˇche_t
 *
bc_ˇche
;

155 
hπime_t
 
bc_time°amp
;

156 
thªad_t
 
bc_thªad
;

157 
umem_buf˘l
 *
bc_œ°log
;

158 *
bc_c⁄ã¡s
;

159 
bc_dïth
;

160 
uöçå_t
 
bc_°ack
[1];

161 } 
	tumem_buf˘l_audô_t
;

163 
	#UMEM_LOCAL_BUFCTL_AUDIT
(
b˝p
) \

164 *(
b˝p
Ë(
umem_buf˘l_audô_t
 *) \

165 
	`Æloˇ
(
UMEM_BUFCTL_AUDIT_SIZE
)

	)

167 
	#UMEM_BUFCTL_AUDIT_SIZE
 \

168 
	`UMEM_BUFCTL_AUDIT_SIZE_DEPTH
(
UMEM_STACK_DEPTH
)

	)

174 
	sumem_bu·ag
 {

175 
uöt64_t
 
bt_ªdz⁄e
;

176 
umem_buf˘l_t
 *
bt_buf˘l
;

177 
öçå_t
 
bt_bx°©
;

178 } 
	tumem_bu·ag_t
;

180 
	#UMEM_BUFTAG
(
˝
, 
buf
) \

181 ((
umem_bu·ag_t
 *)((*)(
buf
Ë+ (
˝
)->
ˇche_bu·ag
))

	)

183 
	#UMEM_BUFCTL
(
˝
, 
buf
) \

184 ((
umem_buf˘l_t
 *)((*)(
buf
Ë+ (
˝
)->
ˇche_buf˘l
))

	)

186 
	#UMEM_BUF
(
˝
, 
b˝
) \

187 ((*)((*)(
b˝
Ë- (
˝
)->
ˇche_buf˘l
))

	)

189 
	#UMEM_SLAB
(
˝
, 
buf
) \

190 ((
umem_¶ab_t
 *)
	`P2END
((
uöçå_t
)(
buf
), (
˝
)->
ˇche_¶absize
Ë- 1)

	)

192 
	#UMEM_CPU_CACHE
(
˝
, 
˝u
) \

193 (
umem_˝u_ˇche_t
 *)((*)
˝
 + 
˝u
->
˝u_ˇche_off£t
)

	)

195 
	#UMEM_MAGAZINE_VALID
(
˝
, 
mp
) \

196 (((
umem_¶ab_t
 *)
	`P2END
((
uöçå_t
)(
mp
), 
PAGESIZE
Ë- 1)->
¶ab_ˇche
 == \

197 (
˝
)->
ˇche_magty≥
->
mt_ˇche
)

	)

199 
	#UMEM_SLAB_MEMBER
(
•
, 
buf
) \

200 ((
size_t
)(
buf
Ë- (size_t)(
•
)->
¶ab_ba£
 < \

201 (
•
)->
¶ab_ˇche
->
ˇche_¶absize
)

	)

203 
	#UMEM_BUFTAG_ALLOC
 0xa110c8edUL

	)

204 
	#UMEM_BUFTAG_FREE
 0xf4ìf4ìUL

	)

206 
	sumem_¶ab
 {

207 
umem_ˇche
 *
¶ab_ˇche
;

208 *
¶ab_ba£
;

209 
umem_¶ab
 *
¶ab_√xt
;

210 
umem_¶ab
 *
¶ab_¥ev
;

211 
umem_buf˘l
 *
¶ab_hód
;

212 
¶ab_ªf˙t
;

213 
¶ab_chunks
;

214 } 
	tumem_¶ab_t
;

216 
	#UMEM_HASH_INITIAL
 64

	)

218 
	#UMEM_HASH
(
˝
, 
buf
) \

219 ((
˝
)->
ˇche_hash_èbÀ
 + \

220 (((
uöçå_t
)(
buf
Ë>> (
˝
)->
ˇche_hash_shi·
Ë& (˝)->
ˇche_hash_mask
))

	)

222 
	sumem_magazöe
 {

223 *
mag_√xt
;

224 *
mag_round
[1];

225 } 
	tumem_magazöe_t
;

230 
	sumem_magty≥
 {

231 
mt_magsize
;

232 
mt_Æign
;

233 
size_t
 
mt_möbuf
;

234 
size_t
 
mt_maxbuf
;

235 
umem_ˇche_t
 *
mt_ˇche
;

236 } 
	tumem_magty≥_t
;

238 #i‡(
deföed
(
__PTHREAD_MUTEX_SIZE__
Ë&& __PTHREAD_MUTEX_SIZE__ >24Ë|| deföed(
UMEM_PTHREAD_MUTEX_TOO_BIG
)

239 
	#UMEM_CPU_CACHE_SIZE
 128

	)

241 
	#UMEM_CPU_CACHE_SIZE
 64

	)

243 
	#UMEM_CPU_PAD
 (
UMEM_CPU_CACHE_SIZE
 -  (
muãx_t
) - \

244 2 *  (
uöt_t
Ë- 2 *  (*Ë- 4 *  ())

	)

245 
	#UMEM_CACHE_SIZE
(
n˝us
) \

246 ((
size_t
)(&((
umem_ˇche_t
 *)0)->
ˇche_˝u
[
n˝us
]))

	)

248 
	sumem_˝u_ˇche
 {

249 
muãx_t
 
cc_lock
;

250 
uöt_t
 
cc_Æloc
;

251 
uöt_t
 
cc_‰ì
;

252 
umem_magazöe_t
 *
cc_lﬂded
;

253 
umem_magazöe_t
 *
cc_∂ﬂded
;

254 
cc_rounds
;

255 
cc_¥ounds
;

256 
cc_magsize
;

257 
cc_Êags
;

258 #i‡(!
deföed
(
_LP64
Ë|| deföed(
UMEM_PTHREAD_MUTEX_TOO_BIG
)Ë&& !deföed(
_WIN32
)

262 
cc_∑d
[
UMEM_CPU_PAD
];

264 } 
	tumem_˝u_ˇche_t
;

269 
	sumem_magli°
 {

270 
umem_magazöe_t
 *
ml_li°
;

271 
ml_tŸÆ
;

272 
ml_mö
;

273 
ml_ª≠limô
;

274 
uöt64_t
 
ml_Æloc
;

275 } 
	tumem_magli°_t
;

277 
	#UMEM_CACHE_NAMELEN
 31

	)

279 
	sumem_ˇche
 {

283 
uöt64_t
 
ˇche_¶ab_¸óã
;

284 
uöt64_t
 
ˇche_¶ab_de°roy
;

285 
uöt64_t
 
ˇche_¶ab_Æloc
;

286 
uöt64_t
 
ˇche_¶ab_‰ì
;

287 
uöt64_t
 
ˇche_Æloc_Áû
;

288 
uöt64_t
 
ˇche_bu·ŸÆ
;

289 
uöt64_t
 
ˇche_bufmax
;

290 
uöt64_t
 
ˇche_ªsˇÀ
;

291 
uöt64_t
 
ˇche_lookup_dïth
;

292 
uöt64_t
 
ˇche_dïŸ_c⁄ã¡i⁄
;

293 
uöt64_t
 
ˇche_dïŸ_c⁄ã¡i⁄_¥ev
;

298 
ˇche_«me
[
UMEM_CACHE_NAMELEN
 + 1];

299 
size_t
 
ˇche_bufsize
;

300 
size_t
 
ˇche_Æign
;

301 
umem_c⁄°ru˘‹_t
 *
ˇche_c⁄°ru˘‹
;

302 
umem_de°ru˘‹_t
 *
ˇche_de°ru˘‹
;

303 
umem_ª˛aim_t
 *
ˇche_ª˛aim
;

304 *
ˇche_¥iv©e
;

305 
vmem_t
 *
ˇche_¨ía
;

306 
ˇche_cÊags
;

307 
ˇche_Êags
;

308 
ˇche_uÊags
;

309 
uöt32_t
 
ˇche_mtbf
;

310 
umem_ˇche_t
 *
ˇche_√xt
;

311 
umem_ˇche_t
 *
ˇche_¥ev
;

312 
umem_ˇche_t
 *
ˇche_u√xt
;

313 
umem_ˇche_t
 *
ˇche_u¥ev
;

314 
uöt32_t
 
ˇche_˝u_mask
;

319 
muãx_t
 
ˇche_lock
;

320 
size_t
 
ˇche_chunksize
;

321 
size_t
 
ˇche_¶absize
;

322 
size_t
 
ˇche_buf˘l
;

323 
size_t
 
ˇche_bu·ag
;

324 
size_t
 
ˇche_vîify
;

325 
size_t
 
ˇche_c⁄ã¡s
;

326 
size_t
 
ˇche_cﬁ‹
;

327 
size_t
 
ˇche_möcﬁ‹
;

328 
size_t
 
ˇche_maxcﬁ‹
;

329 
size_t
 
ˇche_hash_shi·
;

330 
size_t
 
ˇche_hash_mask
;

331 
umem_¶ab_t
 *
ˇche_‰ìli°
;

332 
umem_¶ab_t
 
ˇche_nuŒ¶ab
;

333 
umem_ˇche_t
 *
ˇche_buf˘l_ˇche
;

334 
umem_buf˘l_t
 **
ˇche_hash_èbÀ
;

338 
muãx_t
 
ˇche_dïŸ_lock
;

339 
umem_magty≥_t
 *
ˇche_magty≥
;

340 
umem_magli°_t
 
ˇche_fuŒ
;

341 
umem_magli°_t
 
ˇche_em±y
;

346 
umem_˝u_ˇche_t
 
ˇche_˝u
[1];

349 
	sumem_˝u_log_hódî
 {

350 
muãx_t
 
˛h_lock
;

351 *
˛h_cuºít
;

352 
size_t
 
˛h_avaû
;

353 
˛h_chunk
;

354 
˛h_hôs
;

355 
˛h_∑d
[
UMEM_CPU_CACHE_SIZE
 -

356  (
muãx_t
) -  (*) -

357  (
size_t
) - 2 *  ()];

358 } 
	tumem_˝u_log_hódî_t
;

360 
	sumem_log_hódî
 {

361 
muãx_t
 
lh_lock
;

362 *
lh_ba£
;

363 *
lh_‰ì
;

364 
size_t
 
lh_chunksize
;

365 
lh_nchunks
;

366 
lh_hód
;

367 
lh_èû
;

368 
lh_hôs
;

369 
umem_˝u_log_hódî_t
 
lh_˝u
[1];

370 } 
	tumem_log_hódî_t
;

372 
	sumem_˝u
 {

373 
uöt32_t
 
˝u_ˇche_off£t
;

374 
uöt32_t
 
˝u_numbî
;

375 } 
	tumem_˝u_t
;

377 
	#UMEM_MAXBUF
 16384

	)

379 
	#UMEM_ALIGN
 8

	)

380 
	#UMEM_ALIGN_SHIFT
 3

	)

381 
	#UMEM_VOID_FRACTION
 8

	)

386 #ifde‡
_LP64


387 
	#UMEM_SECOND_ALIGN
 16

	)

389 
	#UMEM_SECOND_ALIGN
 
UMEM_ALIGN


	)

392 
	#MALLOC_MAGIC
 0x3a10c000

	)

393 
	#MEMALIGN_MAGIC
 0x3e3a1000

	)

395 #ifde‡
_LP64


396 
	#MALLOC_SECOND_MAGIC
 0x16ba7000

	)

397 
	#MALLOC_OVERSIZE_MAGIC
 0x06e47000

	)

400 
	#UMEM_MALLOC_ENCODE
(
ty≥
, 
sz
Ë(
uöt32_t
)(—y≥Ë- (sz))

	)

401 
	#UMEM_MALLOC_DECODE
(
°©
, 
sz
Ë(
uöt32_t
)((°©Ë+ (sz))

	)

402 
	#UMEM_FREE_PATTERN_32
 (
uöt32_t
)(
UMEM_FREE_PATTERN
)

	)

404 
	#UMU_MAGAZINE_RESIZE
 0x00000001

	)

405 
	#UMU_HASH_RESCALE
 0x00000002

	)

406 
	#UMU_REAP
 0x00000004

	)

407 
	#UMU_NOTIFY
 0x08000000

	)

408 
	#UMU_ACTIVE
 0x80000000

	)

410 
	#UMEM_READY_INIT_FAILED
 -1

	)

411 
	#UMEM_READY_STARTUP
 1

	)

412 
	#UMEM_READY_INITING
 2

	)

413 
	#UMEM_READY
 3

	)

415 #ifde‡
UMEM_STANDALONE


416 
umem_°¨tup
(
ˇddr_t
, 
size_t
, size_t, caddr_t, caddr_t);

417 
umem_add
(
ˇddr_t
, 
size_t
);

420 #ifdef 
__˝lu•lus


	@umem_test.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~"umem.h
"

7 
	$maö
(
¨gc
, *
¨gv
[])

9 *
foo
;

11 
	`umem_°¨tup
(
NULL
, 0, 0, NULL, NULL);

13 
foo
 = 
	`umem_Æloc
(32, 
UMEM_DEFAULT
);

15 
	`°r˝y
(
foo
, "helloÅhere");

17 
	`¥ötf
("Hñlÿ%s\n", 
foo
);

19 
	`umem_‰ì
(
foo
, 32);

21  
EXIT_SUCCESS
;

22 
	}
}

	@umem_test2.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

4 
	~"umem.h
"

6 c⁄° *
	gTESTSTRINGS
[] = {

13 
	#N_TESTSTRINGS
 ((
TESTSTRINGS
Ë/ (TESTSTRINGS[0]))

	)

14 
	#N_TESTS
 1000

	)

17 
	$maö
 (
¨gc
, *
¨gv
[])

19 *
ã°ˇ£s
[
N_TESTSTRINGS
][
N_TESTS
 + 1];

20 
size_t
 
Àn
[
N_TESTSTRINGS
];

21 
i
, 
j
;

23 
	`mem£t
(
ã°ˇ£s
, 0, (testcases));

25 
	`umem_°¨tup
(
NULL
, 0, 0, NULL, NULL);

27 
i
 = 0; i < 
N_TESTSTRINGS
; ++i)

29 
Àn
[
i
] = 
	`°æí
(
TESTSTRINGS
[i]) + 1;

32 
	`puts
("Allocating...");

34 
j
 = 0; j < 
N_TESTS
; ++j)

36 
i
 = 0; i < 
N_TESTSTRINGS
; ++i)

38 
ã°ˇ£s
[
i
][
j
] = 
	`umem_Æloc
(
Àn
[i], 
UMEM_DEFAULT
);

39 
	`°r˝y
(
ã°ˇ£s
[
i
][
j
], 
TESTSTRINGS
[i]);

43 
	`puts
("Deallocating...");

45 
j
 = 0; j < 
N_TESTS
; ++j)

47 
i
 = 
N_TESTSTRINGS
 - 1; i >= 0; --i)

49 
	`umem_‰ì
(
ã°ˇ£s
[
i
][
j
], 
Àn
[i]);

52 i‡((
j
 % 25) == 0)

54 
	`puts
("Reaping...");

55 
	`umem_ª≠
();

59 
	`puts
("Done");

62 
	}
}

	@umem_test3.c

1 
	~"c⁄fig.h
"

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

6 #i‡
deföed
(
HAVE_MALLOC_H
Ë&& deföed(
HAVE_MALLINFO
)

7 
	~<mÆloc.h
>

10 
	$möfo
()

12 #i‡
	`deföed
(
HAVE_MALLOC_H
Ë&& deföed(
HAVE_MALLINFO
)

13 
mÆlöfo
 
mi
;

14 
mi
 = 
	`mÆlöfo
();

15 
	`¥ötf
(" f‹dblk†%d\n", 
mi
.
f‹dblks
);

16 
	`mÆloc_°©s
();

17 
	`¥ötf
("\n");

19 
	}
}

22 
	$maö
 ()

24 *
p
;

26 
	`möfo
();

27 
p
 = 
	`mÆloc
(10);

28 
	`‰ì
(
p
);

29 
	`möfo
();

31  
EXIT_SUCCESS
;

32 
	}
}

	@umem_update_thread.c

32 
	~"c⁄fig.h
"

33 
	~"umem_ba£.h
"

34 
	~"vmem_ba£.h
"

36 
	~<sig«l.h
>

41 
_c⁄d_timedwaô
(
c⁄d_t
 *
cv
, 
muãx_t
 *
muãx
, c⁄° 
time•ec_t
 *
dñay
);

44 
THR_RETURN


45 
THR_API
 
	$umem_upd©e_thªad
(*
¨g
)

47 
timevÆ
 
now
;

48 
ö_upd©e
 = 0;

50 (Ë
	`muãx_lock
(&
umem_upd©e_lock
);

52 
	`ASSERT
(
umem_upd©e_thr
 =
	`thr_£lf
());

53 
	`ASSERT
(
umem_°_upd©e_thr
 == 0);

56 
	`umem_¥o˚ss_upd©es
();

58 i‡(
ö_upd©e
) {

59 
ö_upd©e
 = 0;

64 (Ë
	`gëtimeofday
(&
umem_upd©e_√xt
, 
NULL
);

65 
umem_upd©e_√xt
.
tv_£c
 +
umem_ª≠_öãrvÆ
;

68 
umem_ª≠ög
) {

69 
UMEM_REAP_DONE
:

70 
UMEM_REAP_ADDING
:

73 
UMEM_REAP_ACTIVE
:

74 
umem_ª≠_√xt
 = 
	`gëhπime
() +

75 (
hπime_t
)
umem_ª≠_öãrvÆ
 * 
NANOSEC
;

76 
umem_ª≠ög
 = 
UMEM_REAP_DONE
;

80 
	`ASSERT
(
umem_ª≠ög
 =
UMEM_REAP_DONE
 ||

81 
umem_ª≠ög
 =
UMEM_REAP_ADDING
 ||

82 
umem_ª≠ög
 =
UMEM_REAP_ACTIVE
);

86 (Ë
	`gëtimeofday
(&
now
, 
NULL
);

87 i‡(
now
.
tv_£c
 > 
umem_upd©e_√xt
.tv_sec ||

88 (
now
.
tv_£c
 =
umem_upd©e_√xt
.tv_sec &&

89 
now
.
tv_u£c
 >
umem_upd©e_√xt
.tv_usec)) {

93 (Ë
	`muãx_u∆ock
(&
umem_upd©e_lock
);

95 
	`vmem_upd©e
(
NULL
);

101 
	`umem_ˇche_≠∂yÆl
(
umem_ˇche_upd©e
);

103 (Ë
	`muãx_lock
(&
umem_upd©e_lock
);

104 
ö_upd©e
 = 1;

112 i‡(
umem_nuŒ_ˇche
.
ˇche_u√xt
 == &umem_null_cache) {

113 
time•ec_t
 
abs_time
;

114 
abs_time
.
tv_£c
 = 
umem_upd©e_√xt
.tv_sec;

115 
abs_time
.
tv_n£c
 = 
umem_upd©e_√xt
.
tv_u£c
 * 1000;

117 (Ë
	`_c⁄d_timedwaô
(&
umem_upd©e_cv
,

118 &
umem_upd©e_lock
, &
abs_time
);

122 
	}
}

125 
	$umem_¸óã_upd©e_thªad
()

127 #i‚de‡
_WIN32


128 
sig£t_t
 
sigmask
, 
ﬁdmask
;

131 
	`ASSERT
(
	`MUTEX_HELD
(&
umem_upd©e_lock
));

132 
	`ASSERT
(
umem_upd©e_thr
 == 0);

134 #i‚de‡
_WIN32


138 (Ë
	`sigfûl£t
(&
sigmask
);

139 (Ë
	`thr_sig£tmask
(
SIG_BLOCK
, &
sigmask
, &
ﬁdmask
);

141 i‡(
	`thr_¸óã
(
NULL
, 0, 
umem_upd©e_thªad
, NULL,

142 
THR_BOUND
 | 
THR_DAEMON
 | 
THR_DETACHED
, &
umem_upd©e_thr
) == 0) {

143 #i‚de‡
_WIN32


144 (Ë
	`thr_sig£tmask
(
SIG_SETMASK
, &
ﬁdmask
, 
NULL
);

148 
umem_upd©e_thr
 = 0;

149 #i‚de‡
_WIN32


150 (Ë
	`thr_sig£tmask
(
SIG_SETMASK
, &
ﬁdmask
, 
NULL
);

153 
	}
}

	@vmem.c

111 
	~"c⁄fig.h
"

113 
	~<sys/vmem_im∂_u£r.h
>

114 #i‡
HAVE_ALLOCA_H


115 
	~<Æloˇ.h
>

117 #ifde‡
HAVE_SYS_SYSMACROS_H


118 
	~<sys/sysma¸os.h
>

120 
	~<°dio.h
>

121 #i‡
HAVE_STRINGS_H


122 
	~<°rögs.h
>

124 #i‡
HAVE_ATOMIC_H


125 
	~<©omic.h
>

128 
	~"vmem_ba£.h
"

129 
	~"umem_ba£.h
"

131 
	#VMEM_INITIAL
 6

	)

132 
	#VMEM_SEG_INITIAL
 100

	)

138 
	#VMEM_SEGS_PER_SPAN_CREATE
 2

	)

155 
	#VMEM_SEGS_PER_EXACT_ALLOC
 0

	)

156 
	#VMEM_SEGS_PER_LEFT_ALLOC
 1

	)

157 
	#VMEM_SEGS_PER_RIGHT_ALLOC
 1

	)

158 
	#VMEM_SEGS_PER_MIDDLE_ALLOC
 2

	)

165 
	#VMEM_SEGS_PER_ALLOC_MAX
 \

166 (
VMEM_SEGS_PER_SPAN_CREATE
 + 
VMEM_SEGS_PER_MIDDLE_ALLOC
)

	)

193 
	#VMEM_POPULATE_SEGS_PER_ARENA
 4

	)

194 
	#VMEM_POPULATE_LOCKS
 1

	)

196 
	#VMEM_POPULATE_RESERVE
 \

197 (
VMEM_POPULATE_SEGS_PER_ARENA
 * 
VMEM_POPULATE_LOCKS
)

	)

204 
	#VMEM_MINFREE
 (
VMEM_POPULATE_RESERVE
 + 
VMEM_SEGS_PER_ALLOC_MAX
)

	)

207 
vmem_t
 
	gvmem0
[
VMEM_INITIAL
];

208 
vmem_t
 *
	gvmem_p›uœt‹
[
VMEM_INITIAL
];

209 
uöt32_t
 
	gvmem_id
;

210 
uöt32_t
 
	gvmem_p›uœt‹s
;

211 
vmem_£g_t
 
	gvmem_£g0
[
VMEM_SEG_INITIAL
];

212 
vmem_£g_t
 *
	gvmem_£g‰ì
;

213 
muãx_t
 
	gvmem_li°_lock
 = 
DEFAULTMUTEX
;

214 
muãx_t
 
	gvmem_£g‰ì_lock
 = 
DEFAULTMUTEX
;

215 
vmem_p›uœã_lock_t
 
	gvmem_no¶ìp_lock
 = {

216 
DEFAULTMUTEX
,

219 
	#IN_POPULATE
(Ë(
vmem_no¶ìp_lock
.
vm∂_thr
 =
	`thr_£lf
())

	)

220 
vmem_t
 *
	gvmem_li°
;

221 
vmem_t
 *
	gvmem_öã∫Æ_¨ía
;

222 
vmem_t
 *
	gvmem_£g_¨ía
;

223 
vmem_t
 *
	gvmem_hash_¨ía
;

224 
vmem_t
 *
	gvmem_vmem_¨ía
;

226 
vmem_t
 *
	gvmem_hóp
;

227 
vmem_Æloc_t
 *
	gvmem_hóp_Æloc
;

228 
vmem_‰ì_t
 *
	gvmem_hóp_‰ì
;

230 
uöt32_t
 
	gvmem_mtbf
;

231 
size_t
 
	gvmem_£g_size
 =  (
vmem_£g_t
);

237 
_c⁄d_waô
(
c⁄d_t
 *
cv
, 
muãx_t
 *
muãx
);

242 
	#VMEM_INSERT
(
v¥ev
, 
v•
, 
ty≥
) \

244 
vmem_£g_t
 *
v√xt
 = (
v¥ev
)->
vs_
##
ty≥
##
√xt
; \

245 (
v•
)->
vs_
##
ty≥
##
√xt
 = (
v√xt
); \

246 (
v•
)->
vs_
##
ty≥
##
¥ev
 = (
v¥ev
); \

247 (
v¥ev
)->
vs_
##
ty≥
##
√xt
 = (
v•
); \

248 (
v√xt
)->
vs_
##
ty≥
##
¥ev
 = (
v•
); \

249 }

	)

251 
	#VMEM_DELETE
(
v•
, 
ty≥
) \

253 
vmem_£g_t
 *
v¥ev
 = (
v•
)->
vs_
##
ty≥
##
¥ev
; \

254 
vmem_£g_t
 *
v√xt
 = (
v•
)->
vs_
##
ty≥
##
√xt
; \

255 (
v¥ev
)->
vs_
##
ty≥
##
√xt
 = (
v√xt
); \

256 (
v√xt
)->
vs_
##
ty≥
##
¥ev
 = (
v¥ev
); \

257 }

	)

262 
vmem_£g_t
 *

263 
	$vmem_gë£g_globÆ
()

265 
vmem_£g_t
 *
v•
;

267 (Ë
	`muãx_lock
(&
vmem_£g‰ì_lock
);

268 i‡((
v•
 = 
vmem_£g‰ì
Ë!
NULL
)

269 
vmem_£g‰ì
 = 
v•
->
vs_k√xt
;

270 (Ë
	`muãx_u∆ock
(&
vmem_£g‰ì_lock
);

272  (
v•
);

273 
	}
}

279 
	$vmem_put£g_globÆ
(
vmem_£g_t
 *
v•
)

281 (Ë
	`muãx_lock
(&
vmem_£g‰ì_lock
);

282 
v•
->
vs_k√xt
 = 
vmem_£g‰ì
;

283 
vmem_£g‰ì
 = 
v•
;

284 (Ë
	`muãx_u∆ock
(&
vmem_£g‰ì_lock
);

285 
	}
}

290 
vmem_£g_t
 *

291 
	$vmem_gë£g
(
vmem_t
 *
vmp
)

293 
vmem_£g_t
 *
v•
;

295 
	`ASSERT
(
vmp
->
vm_n£g‰ì
 > 0);

297 
v•
 = 
vmp
->
vm_£g‰ì
;

298 
vmp
->
vm_£g‰ì
 = 
v•
->
vs_k√xt
;

299 
vmp
->
vm_n£g‰ì
--;

301  (
v•
);

302 
	}
}

308 
	$vmem_put£g
(
vmem_t
 *
vmp
, 
vmem_£g_t
 *
v•
)

310 
v•
->
vs_k√xt
 = 
vmp
->
vm_£g‰ì
;

311 
vmp
->
vm_£g‰ì
 = 
v•
;

312 
vmp
->
vm_n£g‰ì
++;

313 
	}
}

319 
	$vmem_‰ìli°_ö£π
(
vmem_t
 *
vmp
, 
vmem_£g_t
 *
v•
)

321 
vmem_£g_t
 *
v¥ev
;

323 
	`ASSERT
(*
	`VMEM_HASH
(
vmp
, 
v•
->
vs_°¨t
) != vsp);

325 
v¥ev
 = (
vmem_£g_t
 *)&
vmp
->
vm_‰ìli°
[
	`highbô
(
	`VS_SIZE
(
v•
)) - 1];

326 
v•
->
vs_ty≥
 = 
VMEM_FREE
;

327 
vmp
->
vm_‰ìm≠
 |
	`VS_SIZE
(
v¥ev
);

328 
	`VMEM_INSERT
(
v¥ev
, 
v•
, 
k
);

330 (Ë
	`c⁄d_brﬂdˇ°
(&
vmp
->
vm_cv
);

331 
	}
}

337 
	$vmem_‰ìli°_dñëe
(
vmem_t
 *
vmp
, 
vmem_£g_t
 *
v•
)

339 
	`ASSERT
(*
	`VMEM_HASH
(
vmp
, 
v•
->
vs_°¨t
) != vsp);

340 
	`ASSERT
(
v•
->
vs_ty≥
 =
VMEM_FREE
);

342 i‡(
v•
->
vs_k√xt
->
vs_°¨t
 =0 && v•->
vs_k¥ev
->vs_start == 0) {

347 
	`ASSERT
(
vmp
->
vm_‰ìm≠
 & 
	`VS_SIZE
(
v•
->
vs_k¥ev
));

348 
vmp
->
vm_‰ìm≠
 ^
	`VS_SIZE
(
v•
->
vs_k¥ev
);

350 
	`VMEM_DELETE
(
v•
, 
k
);

351 
	}
}

357 
	$vmem_hash_ö£π
(
vmem_t
 *
vmp
, 
vmem_£g_t
 *
v•
)

359 
vmem_£g_t
 **
buckë
;

361 
v•
->
vs_ty≥
 = 
VMEM_ALLOC
;

362 
buckë
 = 
	`VMEM_HASH
(
vmp
, 
v•
->
vs_°¨t
);

363 
v•
->
vs_k√xt
 = *
buckë
;

364 *
buckë
 = 
v•
;

366 i‡(
vmem_£g_size
 = (
vmem_£g_t
)) {

367 
v•
->
vs_dïth
 = (
uöt8_t
)
	`gëpc°ack
(v•->
vs_°ack
,

368 
VMEM_STACK_DEPTH
, 0);

369 
v•
->
vs_thªad
 = 
	`thr_£lf
();

370 
v•
->
vs_time°amp
 = 
	`gëhπime
();

372 
v•
->
vs_dïth
 = 0;

375 
vmp
->
vm_k°©
.
vk_Æloc
++;

376 
vmp
->
vm_k°©
.
vk_mem_öu£
 +
	`VS_SIZE
(
v•
);

377 
	}
}

382 
vmem_£g_t
 *

383 
	$vmem_hash_dñëe
(
vmem_t
 *
vmp
, 
uöçå_t
 
addr
, 
size_t
 
size
)

385 
vmem_£g_t
 *
v•
, **
¥ev_v•p
;

387 
¥ev_v•p
 = 
	`VMEM_HASH
(
vmp
, 
addr
);

388 (
v•
 = *
¥ev_v•p
Ë!
NULL
) {

389 i‡(
v•
->
vs_°¨t
 =
addr
) {

390 *
¥ev_v•p
 = 
v•
->
vs_k√xt
;

393 
vmp
->
vm_k°©
.
vk_lookup
++;

394 
¥ev_v•p
 = &
v•
->
vs_k√xt
;

397 i‡(
v•
 =
NULL
) {

398 
	`umem_∑nic
("vmem_hash_delete(%p, %lx, %lu): bad free",

399 
vmp
, 
addr
, 
size
);

401 i‡(
	`VS_SIZE
(
v•
Ë!
size
) {

402 
	`umem_∑nic
("vmem_hash_delete(%p, %lx, %lu): wrong size "

403 "”x≥˘ %lu)", 
vmp
, 
addr
, 
size
, 
	`VS_SIZE
(
v•
));

406 
vmp
->
vm_k°©
.
vk_‰ì
++;

407 
vmp
->
vm_k°©
.
vk_mem_öu£
 -
size
;

409  (
v•
);

410 
	}
}

415 
vmem_£g_t
 *

416 
	$vmem_£g_¸óã
(
vmem_t
 *
vmp
, 
vmem_£g_t
 *
v¥ev
, 
uöçå_t
 
°¨t
, uöçå_à
íd
)

418 
vmem_£g_t
 *
√w£g
 = 
	`vmem_gë£g
(
vmp
);

420 
√w£g
->
vs_°¨t
 = 
°¨t
;

421 
√w£g
->
vs_íd
 = 
íd
;

422 
√w£g
->
vs_ty≥
 = 0;

423 
√w£g
->
vs_imp‹t
 = 0;

425 
	`VMEM_INSERT
(
v¥ev
, 
√w£g
, 
a
);

427  (
√w£g
);

428 
	}
}

434 
	$vmem_£g_de°roy
(
vmem_t
 *
vmp
, 
vmem_£g_t
 *
v•
)

436 
	`ASSERT
(
v•
->
vs_ty≥
 !
VMEM_ROTOR
);

437 
	`VMEM_DELETE
(
v•
, 
a
);

439 
	`vmem_put£g
(
vmp
, 
v•
);

440 
	}
}

445 
vmem_£g_t
 *

446 
	$vmem_•™_¸óã
(
vmem_t
 *
vmp
, *
vaddr
, 
size_t
 
size
, 
uöt8_t
 
imp‹t
)

448 
vmem_£g_t
 *
k√xt
;

449 
vmem_£g_t
 *
√w£g
, *
•™
;

450 
uöçå_t
 
°¨t
 = (uöçå_t)
vaddr
;

451 
uöçå_t
 
íd
 = 
°¨t
 + 
size
;

453 
k√xt
 = &
vmp
->
vm_£g0
;

454 i‡(!
imp‹t
 && 
vmp
->
vm_sour˚_Æloc
 =
NULL
) {

455 
vmem_£g_t
 *
kíd
, *
k¥ev
;

463 
kíd
 = &
vmp
->
vm_£g0
;

464 
k¥ev
 = 
kíd
->
vs_k¥ev
; kprev != kend;

465 
k¥ev
 = k¥ev->
vs_k¥ev
) {

466 i‡(!
k¥ev
->
vs_imp‹t
 && (k¥ev->
vs_íd
 - 1Ë< 
°¨t
)

469 
k√xt
 = 
k¥ev
->
vs_k√xt
;

472 
	`ASSERT
(
	`MUTEX_HELD
(&
vmp
->
vm_lock
));

474 i‡((
°¨t
 | 
íd
Ë& (
vmp
->
vm_qu™tum
 - 1)) {

475 
	`umem_∑nic
("vmem_span_create(%p, %p, %lu): misaligned",

476 
vmp
, 
vaddr
, 
size
);

479 
•™
 = 
	`vmem_£g_¸óã
(
vmp
, 
k√xt
->
vs_≠ªv
, 
°¨t
, 
íd
);

480 
•™
->
vs_ty≥
 = 
VMEM_SPAN
;

481 
	`VMEM_INSERT
(
k√xt
->
vs_k¥ev
, 
•™
, 
k
);

483 
√w£g
 = 
	`vmem_£g_¸óã
(
vmp
, 
•™
, 
°¨t
, 
íd
);

484 
	`vmem_‰ìli°_ö£π
(
vmp
, 
√w£g
);

486 
√w£g
->
vs_imp‹t
 = 
imp‹t
;

487 i‡(
imp‹t
)

488 
vmp
->
vm_k°©
.
vk_mem_imp‹t
 +
size
;

489 
vmp
->
vm_k°©
.
vk_mem_tŸÆ
 +
size
;

491  (
√w£g
);

492 
	}
}

498 
	$vmem_•™_de°roy
(
vmem_t
 *
vmp
, 
vmem_£g_t
 *
v•
)

500 
vmem_£g_t
 *
•™
 = 
v•
->
vs_≠ªv
;

501 
size_t
 
size
 = 
	`VS_SIZE
(
v•
);

503 
	`ASSERT
(
	`MUTEX_HELD
(&
vmp
->
vm_lock
));

504 
	`ASSERT
(
•™
->
vs_ty≥
 =
VMEM_SPAN
);

506 i‡(
v•
->
vs_imp‹t
)

507 
vmp
->
vm_k°©
.
vk_mem_imp‹t
 -
size
;

508 
vmp
->
vm_k°©
.
vk_mem_tŸÆ
 -
size
;

510 
	`VMEM_DELETE
(
•™
, 
k
);

512 
	`vmem_£g_de°roy
(
vmp
, 
v•
);

513 
	`vmem_£g_de°roy
(
vmp
, 
•™
);

514 
	}
}

521 
vmem_£g_t
 *

522 
	$vmem_£g_Æloc
(
vmem_t
 *
vmp
, 
vmem_£g_t
 *
v•
, 
uöçå_t
 
addr
, 
size_t
 
size
)

524 
uöçå_t
 
vs_°¨t
 = 
v•
->vs_start;

525 
uöçå_t
 
vs_íd
 = 
v•
->vs_end;

526 
size_t
 
vs_size
 = 
vs_íd
 - 
vs_°¨t
;

527 
size_t
 
ªÆsize
 = 
	`P2ROUNDUP
(
size
, 
vmp
->
vm_qu™tum
);

528 
uöçå_t
 
addr_íd
 = 
addr
 + 
ªÆsize
;

530 
	`ASSERT
(
	`P2PHASE
(
vs_°¨t
, 
vmp
->
vm_qu™tum
) == 0);

531 
	`ASSERT
(
	`P2PHASE
(
addr
, 
vmp
->
vm_qu™tum
) == 0);

532 
	`ASSERT
(
v•
->
vs_ty≥
 =
VMEM_FREE
);

533 
	`ASSERT
(
addr
 >
vs_°¨t
 && 
addr_íd
 - 1 <
vs_íd
 - 1);

534 
	`ASSERT
(
addr
 - 1 <
addr_íd
 - 1);

541 i‡(
	`P2SAMEHIGHBIT
(
vs_size
, vs_sizê- 
ªÆsize
Ë&& 
addr
 =
vs_°¨t
) {

542 
	`ASSERT
(
	`highbô
(
vs_size
Ë=highbô(vs_sizê- 
ªÆsize
));

543 
v•
->
vs_°¨t
 = 
addr_íd
;

544 
v•
 = 
	`vmem_£g_¸óã
(
vmp
, v•->
vs_≠ªv
, 
addr
,ádd∏+ 
size
);

545 
	`vmem_hash_ö£π
(
vmp
, 
v•
);

546  (
v•
);

549 
	`vmem_‰ìli°_dñëe
(
vmp
, 
v•
);

551 i‡(
vs_íd
 !
addr_íd
)

552 
	`vmem_‰ìli°_ö£π
(
vmp
,

553 
	`vmem_£g_¸óã
(
vmp
, 
v•
, 
addr_íd
, 
vs_íd
));

555 i‡(
vs_°¨t
 !
addr
)

556 
	`vmem_‰ìli°_ö£π
(
vmp
,

557 
	`vmem_£g_¸óã
(
vmp
, 
v•
->
vs_≠ªv
, 
vs_°¨t
, 
addr
));

559 
v•
->
vs_°¨t
 = 
addr
;

560 
v•
->
vs_íd
 = 
addr
 + 
size
;

562 
	`vmem_hash_ö£π
(
vmp
, 
v•
);

563  (
v•
);

564 
	}
}

570 
	$vmem_ª≠
()

572 i‡(!
	`IN_POPULATE
())

573 
	`umem_ª≠
();

574 
	}
}

580 
	$vmem_p›uœã
(
vmem_t
 *
vmp
, 
vmÊag
)

582 *
p
;

583 
vmem_£g_t
 *
v•
;

584 
ssize_t
 
n£g
;

585 
size_t
 
size
;

586 
vmem_p›uœã_lock_t
 *
Õ
;

587 
i
;

589 
vmp
->
vm_n£g‰ì
 < 
VMEM_MINFREE
 &&

590 (
v•
 = 
	`vmem_gë£g_globÆ
()Ë!
NULL
)

591 
	`vmem_put£g
(
vmp
, 
v•
);

593 i‡(
vmp
->
vm_n£g‰ì
 >
VMEM_MINFREE
)

599 i‡(
vmem_no¶ìp_lock
.
vm∂_thr
 =
	`thr_£lf
()) {

600 
	`ASSERT
(
vmp
->
vm_cÊags
 & 
VMC_POPULATOR
);

604 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

606 
	`ASSERT
(
vmÊag
 & 
VM_NOSLEEP
);

607 
Õ
 = &
vmem_no¶ìp_lock
;

613 (Ë
	`muãx_lock
(&
Õ
->
vm∂_muãx
);

614 
	`ASSERT
(
Õ
->
vm∂_thr
 == 0);

615 
Õ
->
vm∂_thr
 = 
	`thr_£lf
();

617 
n£g
 = 
VMEM_MINFREE
 + 
vmem_p›uœt‹s
 * 
VMEM_POPULATE_RESERVE
;

618 
size
 = 
	`P2ROUNDUP
(
n£g
 * 
vmem_£g_size
, 
vmem_£g_¨ía
->
vm_qu™tum
);

619 
n£g
 = 
size
 / 
vmem_£g_size
;

630 
p
 = 
	`vmem_Æloc
(
vmem_£g_¨ía
, 
size
, 
vmÊag
 & 
VM_UMFLAGS
);

631 i‡(
p
 =
NULL
) {

632 
Õ
->
vm∂_thr
 = 0;

633 (Ë
	`muãx_u∆ock
(&
Õ
->
vm∂_muãx
);

634 
	`vmem_ª≠
();

636 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

637 
vmp
->
vm_k°©
.
vk_p›uœã_Áû
++;

643 
i
 = 0; i < 
vmem_p›uœt‹s
; i++) {

644 (Ë
	`muãx_lock
(&
vmem_p›uœt‹
[
i
]->
vm_lock
);

645 
vmem_p›uœt‹
[
i
]->
vm_n£g‰ì
 < 
VMEM_POPULATE_RESERVE
)

646 
	`vmem_put£g
(
vmem_p›uœt‹
[
i
],

647 (
vmem_£g_t
 *)(
p
 + --
n£g
 * 
vmem_£g_size
));

648 (Ë
	`muãx_u∆ock
(&
vmem_p›uœt‹
[
i
]->
vm_lock
);

651 
Õ
->
vm∂_thr
 = 0;

652 (Ë
	`muãx_u∆ock
(&
Õ
->
vm∂_muãx
);

653 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

658 
	`ASSERT
(
n£g
 >
VMEM_MINFREE
);

659 
vmp
->
vm_n£g‰ì
 < 
VMEM_MINFREE
)

660 
	`vmem_put£g
(
vmp
, (
vmem_£g_t
 *)(
p
 + --
n£g
 * 
vmem_£g_size
));

665 
n£g
 > 0)

666 
	`vmem_put£g_globÆ
((
vmem_£g_t
 *)(
p
 + --
n£g
 * 
vmem_£g_size
));

669 
	}
}

676 
	$vmem_adv™˚
(
vmem_t
 *
vmp
, 
vmem_£g_t
 *
wÆkî
, vmem_£g_à*
a·îme
)

678 
vmem_£g_t
 *
v¥ev
 = 
wÆkî
->
vs_≠ªv
;

679 
vmem_£g_t
 *
v√xt
 = 
wÆkî
->
vs_™ext
;

680 
vmem_£g_t
 *
v•
 = 
NULL
;

682 
	`VMEM_DELETE
(
wÆkî
, 
a
);

684 i‡(
a·îme
 !
NULL
)

685 
	`VMEM_INSERT
(
a·îme
, 
wÆkî
, 
a
);

691 i‡(
v¥ev
->
vs_ty≥
 =
VMEM_FREE
) {

692 i‡(
v√xt
->
vs_ty≥
 =
VMEM_FREE
) {

693 
	`ASSERT
(
v¥ev
->
vs_íd
 =
v√xt
->
vs_°¨t
);

694 
	`vmem_‰ìli°_dñëe
(
vmp
, 
v√xt
);

695 
	`vmem_‰ìli°_dñëe
(
vmp
, 
v¥ev
);

696 
v¥ev
->
vs_íd
 = 
v√xt
->vs_end;

697 
	`vmem_‰ìli°_ö£π
(
vmp
, 
v¥ev
);

698 
	`vmem_£g_de°roy
(
vmp
, 
v√xt
);

700 
v•
 = 
v¥ev
;

701 } i‡(
v√xt
->
vs_ty≥
 =
VMEM_FREE
) {

702 
v•
 = 
v√xt
;

709 i‡(
v•
 !
NULL
 && v•->
vs_imp‹t
 && 
vmp
->
vm_sour˚_‰ì
 != NULL &&

710 
v•
->
vs_≠ªv
->
vs_ty≥
 =
VMEM_SPAN
 &&

711 
v•
->
vs_™ext
->
vs_ty≥
 =
VMEM_SPAN
) {

712 *
vaddr
 = (*)
v•
->
vs_°¨t
;

713 
size_t
 
size
 = 
	`VS_SIZE
(
v•
);

714 
	`ASSERT
(
size
 =
	`VS_SIZE
(
v•
->
vs_≠ªv
));

715 
	`vmem_‰ìli°_dñëe
(
vmp
, 
v•
);

716 
	`vmem_•™_de°roy
(
vmp
, 
v•
);

717 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

718 
vmp
->
	`vm_sour˚_‰ì
(vmp->
vm_sour˚
, 
vaddr
, 
size
);

719 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

721 
	}
}

731 
	$vmem_√xtfô_Æloc
(
vmem_t
 *
vmp
, 
size_t
 
size
, 
vmÊag
)

733 
vmem_£g_t
 *
v•
, *
rŸ‹
;

734 
uöçå_t
 
addr
;

735 
size_t
 
ªÆsize
 = 
	`P2ROUNDUP
(
size
, 
vmp
->
vm_qu™tum
);

736 
size_t
 
vs_size
;

738 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

740 i‡(
vmp
->
vm_n£g‰ì
 < 
VMEM_MINFREE
 && !
	`vmem_p›uœã
(vmp, 
vmÊag
)) {

741 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

742  (
NULL
);

755 
rŸ‹
 = &
vmp
->
vm_rŸ‹
;

756 
v•
 = 
rŸ‹
->
vs_™ext
;

757 i‡(
v•
->
vs_ty≥
 =
VMEM_FREE
 && (
vs_size
 = 
	`VS_SIZE
(v•)Ë> 
ªÆsize
 &&

758 
	`P2SAMEHIGHBIT
(
vs_size
, vs_sizê- 
ªÆsize
)) {

759 
	`ASSERT
(
	`highbô
(
vs_size
Ë=highbô(vs_sizê- 
ªÆsize
));

760 
addr
 = 
v•
->
vs_°¨t
;

761 
v•
->
vs_°¨t
 = 
addr
 + 
ªÆsize
;

762 
	`vmem_hash_ö£π
(
vmp
,

763 
	`vmem_£g_¸óã
(
vmp
, 
rŸ‹
->
vs_≠ªv
, 
addr
,ádd∏+ 
size
));

764 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

765  ((*)
addr
);

773 
vmp
->
vm_k°©
.
vk_£¨ch
++;

774 i‡(
v•
->
vs_ty≥
 =
VMEM_FREE
 && 
	`VS_SIZE
(v•Ë>
size
)

776 
v•
 = v•->
vs_™ext
;

777 i‡(
v•
 =
rŸ‹
) {

786 
	`vmem_adv™˚
(
vmp
, 
rŸ‹
,ÑŸ‹->
vs_™ext
);

787 
v•
 = 
rŸ‹
->
vs_≠ªv
;

788 i‡(
v•
->
vs_ty≥
 =
VMEM_FREE
 && 
	`VS_SIZE
(v•Ë>
size
)

795 i‡(
vmp
->
vm_sour˚_Æloc
 !
NULL
 ||

796 (
vmÊag
 & 
VM_NOSLEEP
)) {

797 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

798  (
	`vmem_xÆloc
(
vmp
, 
size
, vmp->
vm_qu™tum
,

799 0, 0, 
NULL
, NULL, 
vmÊag
 & 
VM_UMFLAGS
));

801 
vmp
->
vm_k°©
.
vk_waô
++;

802 (Ë
	`_c⁄d_waô
(&
vmp
->
vm_cv
, &vmp->
vm_lock
);

803 
v•
 = 
rŸ‹
->
vs_™ext
;

810 
addr
 = 
v•
->
vs_°¨t
;

811 
v•
 = 
	`vmem_£g_Æloc
(
vmp
, v•, 
addr
, 
size
);

812 
	`ASSERT
(
v•
->
vs_ty≥
 =
VMEM_ALLOC
 &&

813 
v•
->
vs_°¨t
 =
addr
 && v•->
vs_íd
 =add∏+ 
size
);

819 
	`vmem_adv™˚
(
vmp
, 
rŸ‹
, 
v•
);

820 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

821  ((*)
addr
);

822 
	}
}

830 
	$vmem_xÆloc
(
vmem_t
 *
vmp
, 
size_t
 
size
, size_à
Æign
, size_à
pha£
,

831 
size_t
 
no¸oss
, *
möaddr
, *
maxaddr
, 
vmÊag
)

833 
vmem_£g_t
 *
v•
;

834 
vmem_£g_t
 *
vbe°
 = 
NULL
;

835 
uöçå_t
 
addr
, 
èddr
, 
°¨t
, 
íd
;

836 *
vaddr
;

837 
hb
, 
Êi°
, 
ªsv
;

838 
uöt32_t
 
mtbf
;

840 i‡(
pha£
 > 0 &&Öha£ >
Æign
)

841 
	`umem_∑nic
("vmem_xalloc(%p, %lu, %lu, %lu, %lu, %p, %p, %x): "

843 (*)
vmp
, 
size
, 
Æign
, 
pha£
, 
no¸oss
,

844 
möaddr
, 
maxaddr
, 
vmÊag
);

846 i‡(
Æign
 == 0)

847 
Æign
 = 
vmp
->
vm_qu™tum
;

849 i‡((
Æign
 | 
pha£
 | 
no¸oss
Ë& (
vmp
->
vm_qu™tum
 - 1)) {

850 
	`umem_∑nic
("vmem_xalloc(%p, %lu, %lu, %lu, %lu, %p, %p, %x): "

852 (*)
vmp
, 
size
, 
Æign
, 
pha£
, 
no¸oss
,

853 
möaddr
, 
maxaddr
, 
vmÊag
);

856 i‡(
no¸oss
 != 0 &&

857 (
Æign
 > 
no¸oss
 || 
	`P2ROUNDUP
(
pha£
 + 
size
,álign) >Çocross)) {

858 
	`umem_∑nic
("vmem_xalloc(%p, %lu, %lu, %lu, %lu, %p, %p, %x): "

860 (*)
vmp
, 
size
, 
Æign
, 
pha£
, 
no¸oss
,

861 
möaddr
, 
maxaddr
, 
vmÊag
);

864 i‡((
mtbf
 = 
vmem_mtbf
 | 
vmp
->
vm_mtbf
Ë!0 && 
	`gëhπime
() % mtbf == 0 &&

865 (
vmÊag
 & (
VM_NOSLEEP
 | 
VM_PANIC
)) == VM_NOSLEEP)

866  (
NULL
);

868 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

870 i‡(
vmp
->
vm_n£g‰ì
 < 
VMEM_MINFREE
 &&

871 !
	`vmem_p›uœã
(
vmp
, 
vmÊag
))

892 i‡((
size
 & (size - 1)) == 0) {

893 
Êi°
 = 
	`lowbô
(
	`P2ALIGN
(
vmp
->
vm_‰ìm≠
, 
size
));

895 
hb
 = 
	`highbô
(
size
);

896 i‡((
vmp
->
vm_‰ìm≠
 >> 
hb
) == 0 ||

897 
hb
 =
VMEM_FREELISTS
 ||

898 (
vmÊag
 & (
VM_BESTFIT
 | 
VM_FIRSTFIT
)))

899 
hb
--;

900 
Êi°
 = 
	`lowbô
(
	`P2ALIGN
(
vmp
->
vm_‰ìm≠
, 1UL << 
hb
));

903 
vbe°
 = 
NULL
, 
v•
 = (
Êi°
 == 0) ? NULL :

904 
vmp
->
vm_‰ìli°
[
Êi°
 - 1].
vs_k√xt
;

905 
v•
 !
NULL
; v• = v•->
vs_k√xt
) {

906 
vmp
->
vm_k°©
.
vk_£¨ch
++;

907 i‡(
v•
->
vs_°¨t
 == 0) {

913 i‡(
vbe°
 !
NULL
)

918 
Êi°
 = 
	`lowbô
(
	`P2ALIGN
(
vmp
->
vm_‰ìm≠
,

919 
	`VS_SIZE
(
v•
)));

920 i‡(
Êi°
-- == 0)

922 
v•
 = (
vmem_£g_t
 *)&
vmp
->
vm_‰ìli°
[
Êi°
];

923 
	`ASSERT
(
v•
->
vs_k√xt
->
vs_ty≥
 =
VMEM_FREE
);

926 i‡(
v•
->
vs_íd
 - 1 < (
uöçå_t
)
möaddr
)

928 i‡(
v•
->
vs_°¨t
 > (
uöçå_t
)
maxaddr
 - 1)

930 
°¨t
 = 
	`MAX
(
v•
->
vs_°¨t
, (
uöçå_t
)
möaddr
);

931 
íd
 = 
	`MIN
(
v•
->
vs_íd
 - 1, (
uöçå_t
)
maxaddr
 - 1) + 1;

932 
èddr
 = 
	`P2PHASEUP
(
°¨t
, 
Æign
, 
pha£
);

933 i‡(
	`P2CROSS
(
èddr
,Åadd∏+ 
size
 - 1, 
no¸oss
))

934 
èddr
 +=

935 
	`P2ROUNDUP
(
	`P2NPHASE
(
èddr
, 
no¸oss
), 
Æign
);

936 i‡((
èddr
 - 
°¨t
Ë+ 
size
 > 
íd
 - start ||

937 (
vbe°
 !
NULL
 && 
	`VS_SIZE
(
v•
) >= VS_SIZE(vbest)))

939 
vbe°
 = 
v•
;

940 
addr
 = 
èddr
;

941 i‡(!(
vmÊag
 & 
VM_BESTFIT
Ë|| 
	`VS_SIZE
(
vbe°
Ë=
size
)

944 i‡(
vbe°
 !
NULL
)

946 i‡(
size
 == 0)

947 
	`umem_∑nic
("vmem_xalloc(): size == 0");

948 i‡(
vmp
->
vm_sour˚_Æloc
 !
NULL
 && 
no¸oss
 == 0 &&

949 
möaddr
 =
NULL
 && 
maxaddr
 == NULL) {

950 
size_t
 
asize
 = 
	`P2ROUNDUP
(
size
 + 
pha£
,

951 
	`MAX
(
Æign
, 
vmp
->
vm_sour˚
->
vm_qu™tum
));

952 i‡(
asize
 < 
size
) {

953 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

954 i‡(
vmÊag
 & 
VM_NOSLEEP
)

955  (
NULL
);

957 
	`umem_∑nic
("vmem_xalloc(): "

966 
ªsv
 = (
size
 =
asize
) ?

967 
VMEM_SEGS_PER_SPAN_CREATE
 +

968 
VMEM_SEGS_PER_EXACT_ALLOC
 :

969 
VMEM_SEGS_PER_ALLOC_MAX
;

970 
	`ASSERT
(
vmp
->
vm_n£g‰ì
 >
ªsv
);

971 
vmp
->
vm_n£g‰ì
 -
ªsv
;

972 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

973 
vaddr
 = 
vmp
->
	`vm_sour˚_Æloc
(vmp->
vm_sour˚
, 
asize
,

974 
vmÊag
 & 
VM_UMFLAGS
);

975 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

976 
vmp
->
vm_n£g‰ì
 +
ªsv
;

977 i‡(
vaddr
 !
NULL
) {

978 
vbe°
 = 
	`vmem_•™_¸óã
(
vmp
, 
vaddr
, 
asize
, 1);

979 
addr
 = 
	`P2PHASEUP
(
vbe°
->
vs_°¨t
, 
Æign
, 
pha£
);

983 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

984 
	`vmem_ª≠
();

985 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

986 i‡(
vmÊag
 & 
VM_NOSLEEP
)

988 
vmp
->
vm_k°©
.
vk_waô
++;

989 (Ë
	`_c⁄d_waô
(&
vmp
->
vm_cv
, &vmp->
vm_lock
);

991 i‡(
vbe°
 !
NULL
) {

992 
	`ASSERT
(
vbe°
->
vs_ty≥
 =
VMEM_FREE
);

993 
	`ASSERT
(
vbe°
->
vs_k√xt
 != vbest);

994 (Ë
	`vmem_£g_Æloc
(
vmp
, 
vbe°
, 
addr
, 
size
);

995 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

996 
	`ASSERT
(
	`P2PHASE
(
addr
, 
Æign
Ë=
pha£
);

997 
	`ASSERT
(!
	`P2CROSS
(
addr
,ádd∏+ 
size
 - 1, 
no¸oss
));

998 
	`ASSERT
(
addr
 >(
uöçå_t
)
möaddr
);

999 
	`ASSERT
(
addr
 + 
size
 - 1 <(
uöçå_t
)
maxaddr
 - 1);

1000  ((*)
addr
);

1002 
vmp
->
vm_k°©
.
vk_Áû
++;

1003 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

1004 i‡(
vmÊag
 & 
VM_PANIC
)

1005 
	`umem_∑nic
("vmem_xalloc(%p, %lu, %lu, %lu, %lu, %p, %p, %x): "

1007 (*)
vmp
, 
size
, 
Æign
, 
pha£
, 
no¸oss
,

1008 
möaddr
, 
maxaddr
, 
vmÊag
);

1009  (
NULL
);

1010 
	}
}

1018 
	$vmem_x‰ì
(
vmem_t
 *
vmp
, *
vaddr
, 
size_t
 
size
)

1020 
vmem_£g_t
 *
v•
, *
v√xt
, *
v¥ev
;

1022 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

1024 
v•
 = 
	`vmem_hash_dñëe
(
vmp
, (
uöçå_t
)
vaddr
, 
size
);

1025 
v•
->
vs_íd
 = 
	`P2ROUNDUP
(v•->vs_íd, 
vmp
->
vm_qu™tum
);

1030 
v√xt
 = 
v•
->
vs_™ext
;

1031 i‡(
v√xt
->
vs_ty≥
 =
VMEM_FREE
) {

1032 
	`ASSERT
(
v•
->
vs_íd
 =
v√xt
->
vs_°¨t
);

1033 
	`vmem_‰ìli°_dñëe
(
vmp
, 
v√xt
);

1034 
v•
->
vs_íd
 = 
v√xt
->vs_end;

1035 
	`vmem_£g_de°roy
(
vmp
, 
v√xt
);

1041 
v¥ev
 = 
v•
->
vs_≠ªv
;

1042 i‡(
v¥ev
->
vs_ty≥
 =
VMEM_FREE
) {

1043 
	`ASSERT
(
v¥ev
->
vs_íd
 =
v•
->
vs_°¨t
);

1044 
	`vmem_‰ìli°_dñëe
(
vmp
, 
v¥ev
);

1045 
v¥ev
->
vs_íd
 = 
v•
->vs_end;

1046 
	`vmem_£g_de°roy
(
vmp
, 
v•
);

1047 
v•
 = 
v¥ev
;

1053 i‡(
v•
->
vs_imp‹t
 && 
vmp
->
vm_sour˚_‰ì
 !
NULL
 &&

1054 
v•
->
vs_≠ªv
->
vs_ty≥
 =
VMEM_SPAN
 &&

1055 
v•
->
vs_™ext
->
vs_ty≥
 =
VMEM_SPAN
) {

1056 
vaddr
 = (*)
v•
->
vs_°¨t
;

1057 
size
 = 
	`VS_SIZE
(
v•
);

1058 
	`ASSERT
(
size
 =
	`VS_SIZE
(
v•
->
vs_≠ªv
));

1059 
	`vmem_•™_de°roy
(
vmp
, 
v•
);

1060 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

1061 
vmp
->
	`vm_sour˚_‰ì
(vmp->
vm_sour˚
, 
vaddr
, 
size
);

1063 
	`vmem_‰ìli°_ö£π
(
vmp
, 
v•
);

1064 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

1066 
	}
}

1076 
	$vmem_Æloc
(
vmem_t
 *
vmp
, 
size_t
 
size
, 
vmÊag
)

1078 
vmem_£g_t
 *
v•
;

1079 
uöçå_t
 
addr
;

1080 
hb
;

1081 
Êi°
 = 0;

1082 
uöt32_t
 
mtbf
;

1084 i‡(
size
 - 1 < 
vmp
->
vm_qˇche_max
) {

1085 
	`ASSERT
(
vmÊag
 & 
VM_NOSLEEP
);

1086  (
	`_umem_ˇche_Æloc
(
vmp
->
vm_qˇche
[(
size
 - 1) >>

1087 
vmp
->
vm_qshi·
], 
UMEM_DEFAULT
));

1090 i‡((
mtbf
 = 
vmem_mtbf
 | 
vmp
->
vm_mtbf
Ë!0 && 
	`gëhπime
() % mtbf == 0 &&

1091 (
vmÊag
 & (
VM_NOSLEEP
 | 
VM_PANIC
)) == VM_NOSLEEP)

1092  (
NULL
);

1094 i‡(
vmÊag
 & 
VM_NEXTFIT
)

1095  (
	`vmem_√xtfô_Æloc
(
vmp
, 
size
, 
vmÊag
));

1097 i‡(
vmÊag
 & (
VM_BESTFIT
 | 
VM_FIRSTFIT
))

1098  (
	`vmem_xÆloc
(
vmp
, 
size
, vmp->
vm_qu™tum
, 0, 0,

1099 
NULL
, NULL, 
vmÊag
));

1104 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

1106 i‡(
vmp
->
vm_n£g‰ì
 >
VMEM_MINFREE
 || 
	`vmem_p›uœã
(vmp, 
vmÊag
)) {

1107 i‡((
size
 & (size - 1)) == 0)

1108 
Êi°
 = 
	`lowbô
(
	`P2ALIGN
(
vmp
->
vm_‰ìm≠
, 
size
));

1109 i‡((
hb
 = 
	`highbô
(
size
)Ë< 
VMEM_FREELISTS
)

1110 
Êi°
 = 
	`lowbô
(
	`P2ALIGN
(
vmp
->
vm_‰ìm≠
, 1UL << 
hb
));

1113 i‡(
Êi°
-- == 0) {

1114 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

1115  (
	`vmem_xÆloc
(
vmp
, 
size
, vmp->
vm_qu™tum
,

1116 0, 0, 
NULL
, NULL, 
vmÊag
));

1119 
	`ASSERT
(
size
 <(1UL << 
Êi°
));

1120 
v•
 = 
vmp
->
vm_‰ìli°
[
Êi°
].
vs_k√xt
;

1121 
addr
 = 
v•
->
vs_°¨t
;

1122 (Ë
	`vmem_£g_Æloc
(
vmp
, 
v•
, 
addr
, 
size
);

1123 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

1124  ((*)
addr
);

1125 
	}
}

1131 
	$vmem_‰ì
(
vmem_t
 *
vmp
, *
vaddr
, 
size_t
 
size
)

1133 i‡(
size
 - 1 < 
vmp
->
vm_qˇche_max
)

1134 
	`_umem_ˇche_‰ì
(
vmp
->
vm_qˇche
[(
size
 - 1Ë>> vmp->
vm_qshi·
],

1135 
vaddr
);

1137 
	`vmem_x‰ì
(
vmp
, 
vaddr
, 
size
);

1138 
	}
}

1144 
	$vmem_c⁄èös
(
vmem_t
 *
vmp
, *
vaddr
, 
size_t
 
size
)

1146 
uöçå_t
 
°¨t
 = (uöçå_t)
vaddr
;

1147 
uöçå_t
 
íd
 = 
°¨t
 + 
size
;

1148 
vmem_£g_t
 *
v•
;

1149 
vmem_£g_t
 *
£g0
 = &
vmp
->
vm_£g0
;

1151 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

1152 
vmp
->
vm_k°©
.
vk_c⁄èös
++;

1153 
v•
 = 
£g0
->
vs_k√xt
; vsp != seg0; vsp = vsp->vs_knext) {

1154 
vmp
->
vm_k°©
.
vk_c⁄èös_£¨ch
++;

1155 
	`ASSERT
(
v•
->
vs_ty≥
 =
VMEM_SPAN
);

1156 i‡(
°¨t
 >
v•
->
vs_°¨t
 && 
íd
 - 1 <v•->
vs_íd
 - 1)

1159 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

1160  (
v•
 !
£g0
);

1161 
	}
}

1167 
	$vmem_add
(
vmem_t
 *
vmp
, *
vaddr
, 
size_t
 
size
, 
vmÊag
)

1169 i‡(
vaddr
 =
NULL
 || 
size
 == 0) {

1170 
	`umem_∑nic
("vmem_add(%p, %p, %lu): badárguments",

1171 
vmp
, 
vaddr
, 
size
);

1174 
	`ASSERT
(!
	`vmem_c⁄èös
(
vmp
, 
vaddr
, 
size
));

1176 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

1177 i‡(
	`vmem_p›uœã
(
vmp
, 
vmÊag
))

1178 (Ë
	`vmem_•™_¸óã
(
vmp
, 
vaddr
, 
size
, 0);

1180 
vaddr
 = 
NULL
;

1181 (Ë
	`c⁄d_brﬂdˇ°
(&
vmp
->
vm_cv
);

1182 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

1183  (
vaddr
);

1184 
	}
}

1201 
vmem_£g_t
 *

1202 
	$vmem_exãnd_u∆ocked
(
vmem_t
 *
vmp
, 
uöçå_t
 
addr
, uöçå_à
ídaddr
)

1204 
vmem_£g_t
 *
•™
;

1205 
vmem_£g_t
 *
v•
;

1207 
vmem_£g_t
 *
íd
 = &
vmp
->
vm_£g0
;

1209 
	`ASSERT
(
	`MUTEX_HELD
(&
vmp
->
vm_lock
));

1214 
•™
 = 
íd
->
vs_k¥ev
; span !=Énd; span = span->vs_kprev) {

1215 i‡(
•™
->
vs_íd
 =
addr
 || s∑n->
vs_°¨t
 =
ídaddr
)

1219 i‡(
•™
 =
íd
)

1220  (
	`vmem_•™_¸óã
(
vmp
, (*)
addr
, 
ídaddr
 -áddr, 0));

1221 i‡(
•™
->
vs_k¥ev
->
vs_íd
 =
addr
 && s∑n->
vs_°¨t
 =
ídaddr
) {

1222 
vmem_£g_t
 *
¥ev•™
 = 
•™
->
vs_k¥ev
;

1223 
vmem_£g_t
 *
√xt£g
 = 
•™
->
vs_™ext
;

1224 
vmem_£g_t
 *
¥ev£g
 = 
•™
->
vs_≠ªv
;

1229 
¥ev•™
->
vs_íd
 = 
•™
->vs_end;

1238 i‡(
¥ev£g
->
vs_ty≥
 =
VMEM_FREE
 &&

1239 
√xt£g
->
vs_ty≥
 =
VMEM_FREE
) {

1243 
	`ASSERT
(
¥ev£g
->
vs_íd
 =
addr
 &&

1244 
√xt£g
->
vs_°¨t
 =
ídaddr
);

1246 
	`vmem_‰ìli°_dñëe
(
vmp
, 
¥ev£g
);

1247 
¥ev£g
->
vs_íd
 = 
√xt£g
->vs_end;

1249 
	`vmem_‰ìli°_dñëe
(
vmp
, 
√xt£g
);

1250 
	`VMEM_DELETE
(
•™
, 
k
);

1251 
	`vmem_£g_de°roy
(
vmp
, 
√xt£g
);

1252 
	`vmem_£g_de°roy
(
vmp
, 
•™
);

1254 
v•
 = 
¥ev£g
;

1255 } i‡(
¥ev£g
->
vs_ty≥
 =
VMEM_FREE
) {

1259 
	`ASSERT
(
¥ev£g
->
vs_íd
 =
addr
);

1261 
	`VMEM_DELETE
(
•™
, 
k
);

1262 
	`vmem_£g_de°roy
(
vmp
, 
•™
);

1264 
	`vmem_‰ìli°_dñëe
(
vmp
, 
¥ev£g
);

1265 
¥ev£g
->
vs_íd
 = 
ídaddr
;

1267 
v•
 = 
¥ev£g
;

1268 } i‡(
√xt£g
->
vs_ty≥
 =
VMEM_FREE
) {

1272 
	`ASSERT
(
√xt£g
->
vs_°¨t
 =
ídaddr
);

1274 
	`VMEM_DELETE
(
•™
, 
k
);

1275 
	`vmem_£g_de°roy
(
vmp
, 
•™
);

1277 
	`vmem_‰ìli°_dñëe
(
vmp
, 
√xt£g
);

1278 
√xt£g
->
vs_°¨t
 = 
addr
;

1280 
v•
 = 
√xt£g
;

1285 
	`VMEM_DELETE
(
•™
, 
k
);

1286 
•™
->
vs_°¨t
 = 
addr
;

1287 
•™
->
vs_íd
 = 
ídaddr
;

1289 
v•
 = 
•™
;

1291 } i‡(
•™
->
vs_íd
 =
addr
) {

1292 
vmem_£g_t
 *
ﬁd£g
 = 
•™
->
vs_k√xt
->
vs_≠ªv
;

1293 
•™
->
vs_íd
 = 
ídaddr
;

1295 
	`ASSERT
(
ﬁd£g
->
vs_ty≥
 !
VMEM_SPAN
);

1296 i‡(
ﬁd£g
->
vs_ty≥
 =
VMEM_FREE
) {

1297 
	`ASSERT
(
ﬁd£g
->
vs_íd
 =
addr
);

1298 
	`vmem_‰ìli°_dñëe
(
vmp
, 
ﬁd£g
);

1299 
ﬁd£g
->
vs_íd
 = 
ídaddr
;

1300 
v•
 = 
ﬁd£g
;

1302 
v•
 = 
	`vmem_£g_¸óã
(
vmp
, 
ﬁd£g
, 
addr
, 
ídaddr
);

1304 
vmem_£g_t
 *
ﬁd£g
 = 
•™
->
vs_™ext
;

1305 
	`ASSERT
(
•™
->
vs_°¨t
 =
ídaddr
);

1306 
•™
->
vs_°¨t
 = 
addr
;

1308 
	`ASSERT
(
ﬁd£g
->
vs_ty≥
 !
VMEM_SPAN
);

1309 i‡(
ﬁd£g
->
vs_ty≥
 =
VMEM_FREE
) {

1310 
	`ASSERT
(
ﬁd£g
->
vs_°¨t
 =
ídaddr
);

1311 
	`vmem_‰ìli°_dñëe
(
vmp
, 
ﬁd£g
);

1312 
ﬁd£g
->
vs_°¨t
 = 
addr
;

1313 
v•
 = 
ﬁd£g
;

1315 
v•
 = 
	`vmem_£g_¸óã
(
vmp
, 
•™
, 
addr
, 
ídaddr
);

1317 
	`vmem_‰ìli°_ö£π
(
vmp
, 
v•
);

1318 
vmp
->
vm_k°©
.
vk_mem_tŸÆ
 +(
ídaddr
 - 
addr
);

1319  (
v•
);

1320 
	}
}

1328 
	$_vmem_exãnd_Æloc
(
vmem_t
 *
vmp
, *
vaddr
, 
size_t
 
size
, size_à
Æloc
,

1329 
vmÊag
)

1331 
uöçå_t
 
addr
 = (uöçå_t)
vaddr
;

1332 
uöçå_t
 
ídaddr
 = 
addr
 + 
size
;

1333 
vmem_£g_t
 *
v•
;

1335 
	`ASSERT
(
vaddr
 !
NULL
 && 
size
 !0 && 
ídaddr
 > 
addr
);

1336 
	`ASSERT
(
Æloc
 <
size
 &&álloc != 0);

1337 
	`ASSERT
(((
addr
 | 
size
 | 
Æloc
Ë& (
vmp
->
vm_qu™tum
 - 1)) == 0);

1339 
	`ASSERT
(!
	`vmem_c⁄èös
(
vmp
, 
vaddr
, 
size
));

1341 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

1342 i‡(!
	`vmem_p›uœã
(
vmp
, 
vmÊag
)) {

1343 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

1344  (
NULL
);

1349 i‡(
vmp
->
vm_sour˚_Æloc
 !
NULL
)

1350 
v•
 = 
	`vmem_•™_¸óã
(
vmp
, 
vaddr
, 
size
, 0);

1352 
v•
 = 
	`vmem_exãnd_u∆ocked
(
vmp
, 
addr
, 
ídaddr
);

1354 
	`ASSERT
(
	`VS_SIZE
(
v•
Ë>
Æloc
);

1356 
addr
 = 
v•
->
vs_°¨t
;

1357 (Ë
	`vmem_£g_Æloc
(
vmp
, 
v•
, 
addr
, 
Æloc
);

1358 
vaddr
 = (*)
addr
;

1360 (Ë
	`c⁄d_brﬂdˇ°
(&
vmp
->
vm_cv
);

1361 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

1363  (
vaddr
);

1364 
	}
}

1375 
vmem_wÆk
(
vmem_t
 *
vmp
, 
ty≥mask
,

1376 (*
func
)(*, *, 
size_t
), *
¨g
)

1378 
vmem_£g_t
 *
v•
;

1379 
vmem_£g_t
 *
£g0
 = &
vmp
->
vm_£g0
;

1380 
vmem_£g_t
 
wÆkî
;

1382 i‡(
ty≥mask
 & 
VMEM_WALKER
)

1385 
	`bzîo
(&
wÆkî
,  (walker));

1386 
wÆkî
.
vs_ty≥
 = 
VMEM_WALKER
;

1388 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

1389 
	`VMEM_INSERT
(
£g0
, &
wÆkî
, 
a
);

1390 
v•
 = 
£g0
->
vs_™ext
; vsp != seg0; vsp = vsp->vs_anext) {

1391 i‡(
v•
->
vs_ty≥
 & 
ty≥mask
) {

1392 *
°¨t
 = (*)
v•
->
vs_°¨t
;

1393 
size_t
 
size
 = 
	`VS_SIZE
(
v•
);

1394 i‡(
ty≥mask
 & 
VMEM_REENTRANT
) {

1395 
	`vmem_adv™˚
(
vmp
, &
wÆkî
, 
v•
);

1396 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

1397 
	`func
(
¨g
, 
°¨t
, 
size
);

1398 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

1399 
v•
 = &
wÆkî
;

1401 
	`func
(
¨g
, 
°¨t
, 
size
);

1405 
	`vmem_adv™˚
(
vmp
, &
wÆkî
, 
NULL
);

1406 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

1407 
	}
}

1416 
size_t


1417 
	$vmem_size
(
vmem_t
 *
vmp
, 
ty≥mask
)

1419 
uöt64_t
 
size
 = 0;

1421 i‡(
ty≥mask
 & 
VMEM_ALLOC
)

1422 
size
 +
vmp
->
vm_k°©
.
vk_mem_öu£
;

1423 i‡(
ty≥mask
 & 
VMEM_FREE
)

1424 
size
 +
vmp
->
vm_k°©
.
vk_mem_tŸÆ
 -

1425 
vmp
->
vm_k°©
.
vk_mem_öu£
;

1426  ((
size_t
)
size
);

1427 
	}
}

1438 
vmem_t
 *

1439 
	$vmem_¸óã
(c⁄° *
«me
, *
ba£
, 
size_t
 
size
, size_à
qu™tum
,

1440 
vmem_Æloc_t
 *
afunc
, 
vmem_‰ì_t
 *
ffunc
, 
vmem_t
 *
sour˚
,

1441 
size_t
 
qˇche_max
, 
vmÊag
)

1443 
i
;

1444 
size_t
 
nqˇche
;

1445 
vmem_t
 *
vmp
, *
cur
, **
vmµ
;

1446 
vmem_£g_t
 *
v•
;

1447 
vmem_‰ìli°_t
 *
vÂ
;

1448 
uöt32_t
 
id
 = 
	`©omic_add_32_nv
(&
vmem_id
, 1);

1450 i‡(
vmem_vmem_¨ía
 !
NULL
) {

1451 
vmp
 = 
	`vmem_Æloc
(
vmem_vmem_¨ía
,  (
vmem_t
),

1452 
vmÊag
 & 
VM_UMFLAGS
);

1454 
	`ASSERT
(
id
 <
VMEM_INITIAL
);

1455 
vmp
 = &
vmem0
[
id
 - 1];

1458 i‡(
vmp
 =
NULL
)

1459  (
NULL
);

1460 
	`bzîo
(
vmp
,  (
vmem_t
));

1462 (Ë
	`¢¥ötf
(
vmp
->
vm_«me
, 
VMEM_NAMELEN
, "%s", 
«me
);

1463 (Ë
	`muãx_öô
(&
vmp
->
vm_lock
, 
USYNC_THREAD
, 
NULL
);

1464 (Ë
	`c⁄d_öô
(&
vmp
->
vm_cv
, 
USYNC_THREAD
, 
NULL
);

1465 
vmp
->
vm_cÊags
 = 
vmÊag
;

1466 
vmÊag
 &
VM_UMFLAGS
;

1468 
vmp
->
vm_qu™tum
 = 
qu™tum
;

1469 
vmp
->
vm_qshi·
 = 
	`highbô
(
qu™tum
) - 1;

1470 
nqˇche
 = 
	`MIN
(
qˇche_max
 >> 
vmp
->
vm_qshi·
, 
VMEM_NQCACHE_MAX
);

1472 
i
 = 0; i <
VMEM_FREELISTS
; i++) {

1473 
vÂ
 = &
vmp
->
vm_‰ìli°
[
i
];

1474 
vÂ
->
vs_íd
 = 1UL << 
i
;

1475 
vÂ
->
vs_k√xt
 = (
vmem_£g_t
 *)(vfp + 1);

1476 
vÂ
->
vs_k¥ev
 = (
vmem_£g_t
 *)(vfp - 1);

1479 
vmp
->
vm_‰ìli°
[0].
vs_k¥ev
 = 
NULL
;

1480 
vmp
->
vm_‰ìli°
[
VMEM_FREELISTS
].
vs_k√xt
 = 
NULL
;

1481 
vmp
->
vm_‰ìli°
[
VMEM_FREELISTS
].
vs_íd
 = 0;

1482 
vmp
->
vm_hash_èbÀ
 = vmp->
vm_hash0
;

1483 
vmp
->
vm_hash_mask
 = 
VMEM_HASH_INITIAL
 - 1;

1484 
vmp
->
vm_hash_shi·
 = 
	`highbô
(vmp->
vm_hash_mask
);

1486 
v•
 = &
vmp
->
vm_£g0
;

1487 
v•
->
vs_™ext
 = vsp;

1488 
v•
->
vs_≠ªv
 = vsp;

1489 
v•
->
vs_k√xt
 = vsp;

1490 
v•
->
vs_k¥ev
 = vsp;

1491 
v•
->
vs_ty≥
 = 
VMEM_SPAN
;

1493 
v•
 = &
vmp
->
vm_rŸ‹
;

1494 
v•
->
vs_ty≥
 = 
VMEM_ROTOR
;

1495 
	`VMEM_INSERT
(&
vmp
->
vm_£g0
, 
v•
, 
a
);

1497 
vmp
->
vm_id
 = 
id
;

1498 i‡(
sour˚
 !
NULL
)

1499 
vmp
->
vm_k°©
.
vk_sour˚_id
 = 
sour˚
->
vm_id
;

1500 
vmp
->
vm_sour˚
 = 
sour˚
;

1501 
vmp
->
vm_sour˚_Æloc
 = 
afunc
;

1502 
vmp
->
vm_sour˚_‰ì
 = 
ffunc
;

1504 i‡(
nqˇche
 != 0) {

1505 
vmp
->
vm_qˇche_max
 = 
nqˇche
 << vmp->
vm_qshi·
;

1506 
i
 = 0; i < 
nqˇche
; i++) {

1507 
buf
[
VMEM_NAMELEN
 + 21];

1508 (Ë
	`¢¥ötf
(
buf
,  (buf), "%s_%lu",

1509 
vmp
->
vm_«me
, ()((
i
 + 1Ë* 
qu™tum
));

1510 
vmp
->
vm_qˇche
[
i
] = 
	`umem_ˇche_¸óã
(
buf
,

1511 (
i
 + 1Ë* 
qu™tum
, qu™tum, 
NULL
, NULL, NULL,

1512 
NULL
, 
vmp
, 
UMC_QCACHE
 | 
UMC_NOTOUCH
);

1513 i‡(
vmp
->
vm_qˇche
[
i
] =
NULL
) {

1514 
vmp
->
vm_qˇche_max
 = 
i
 * 
qu™tum
;

1520 (Ë
	`muãx_lock
(&
vmem_li°_lock
);

1521 
vmµ
 = &
vmem_li°
;

1522 (
cur
 = *
vmµ
Ë!
NULL
)

1523 
vmµ
 = &
cur
->
vm_√xt
;

1524 *
vmµ
 = 
vmp
;

1525 (Ë
	`muãx_u∆ock
(&
vmem_li°_lock
);

1527 i‡(
vmp
->
vm_cÊags
 & 
VMC_POPULATOR
) {

1528 
uöt_t
 
p›_id
 = 
	`©omic_add_32_nv
(&
vmem_p›uœt‹s
, 1);

1529 
	`ASSERT
(
p›_id
 <
VMEM_INITIAL
);

1530 
vmem_p›uœt‹
[
p›_id
 - 1] = 
vmp
;

1531 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

1532 (Ë
	`vmem_p›uœã
(
vmp
, 
vmÊag
 | 
VM_PANIC
);

1533 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

1536 i‡((
ba£
 || 
size
Ë&& 
	`vmem_add
(
vmp
, ba£, size, 
vmÊag
Ë=
NULL
) {

1537 
	`vmem_de°roy
(
vmp
);

1538  (
NULL
);

1541  (
vmp
);

1542 
	}
}

1548 
	$vmem_de°roy
(
vmem_t
 *
vmp
)

1550 
vmem_t
 *
cur
, **
vmµ
;

1551 
vmem_£g_t
 *
£g0
 = &
vmp
->
vm_£g0
;

1552 
vmem_£g_t
 *
v•
;

1553 
size_t
 
Àaked
;

1554 
i
;

1556 (Ë
	`muãx_lock
(&
vmem_li°_lock
);

1557 
vmµ
 = &
vmem_li°
;

1558 (
cur
 = *
vmµ
Ë!
vmp
)

1559 
vmµ
 = &
cur
->
vm_√xt
;

1560 *
vmµ
 = 
vmp
->
vm_√xt
;

1561 (Ë
	`muãx_u∆ock
(&
vmem_li°_lock
);

1563 
i
 = 0; i < 
VMEM_NQCACHE_MAX
; i++)

1564 i‡(
vmp
->
vm_qˇche
[
i
])

1565 
	`umem_ˇche_de°roy
(
vmp
->
vm_qˇche
[
i
]);

1567 
Àaked
 = 
	`vmem_size
(
vmp
, 
VMEM_ALLOC
);

1568 i‡(
Àaked
 != 0)

1569 
	`umem_¥ötf
("vmem_destroy('%s'):Üeaked %lu bytes",

1570 
vmp
->
vm_«me
, 
Àaked
);

1572 i‡(
vmp
->
vm_hash_èbÀ
 !vmp->
vm_hash0
)

1573 
	`vmem_‰ì
(
vmem_hash_¨ía
, 
vmp
->
vm_hash_èbÀ
,

1574 (
vmp
->
vm_hash_mask
 + 1) *  (*));

1580 
	`VMEM_DELETE
(&
vmp
->
vm_rŸ‹
, 
a
);

1581 
v•
 = 
£g0
->
vs_™ext
; vsp != seg0; vsp = vsp->vs_anext)

1582 
	`vmem_put£g_globÆ
(
v•
);

1584 
vmp
->
vm_n£g‰ì
 > 0)

1585 
	`vmem_put£g_globÆ
(
	`vmem_gë£g
(
vmp
));

1587 (Ë
	`muãx_de°roy
(&
vmp
->
vm_lock
);

1588 (Ë
	`c⁄d_de°roy
(&
vmp
->
vm_cv
);

1589 
	`vmem_‰ì
(
vmem_vmem_¨ía
, 
vmp
,  (
vmem_t
));

1590 
	}
}

1596 
	$vmem_hash_ªsˇÀ
(
vmem_t
 *
vmp
)

1598 
vmem_£g_t
 **
ﬁd_èbÀ
, **
√w_èbÀ
, *
v•
;

1599 
size_t
 
ﬁd_size
, 
√w_size
, 
h
, 
n£g
;

1601 
n£g
 = (
size_t
)(
vmp
->
vm_k°©
.
vk_Æloc
 - vmp->vm_k°©.
vk_‰ì
);

1603 
√w_size
 = 
	`MAX
(
VMEM_HASH_INITIAL
, 1 << (
	`highbô
(3 * 
n£g
 + 4) - 2));

1604 
ﬁd_size
 = 
vmp
->
vm_hash_mask
 + 1;

1606 i‡((
ﬁd_size
 >> 1Ë<
√w_size
 &&Çew_size <= (old_size << 1))

1609 
√w_èbÀ
 = 
	`vmem_Æloc
(
vmem_hash_¨ía
, 
√w_size
 *  (*),

1610 
VM_NOSLEEP
);

1611 i‡(
√w_èbÀ
 =
NULL
)

1613 
	`bzîo
(
√w_èbÀ
, 
√w_size
 *  (*));

1615 (Ë
	`muãx_lock
(&
vmp
->
vm_lock
);

1617 
ﬁd_size
 = 
vmp
->
vm_hash_mask
 + 1;

1618 
ﬁd_èbÀ
 = 
vmp
->
vm_hash_èbÀ
;

1620 
vmp
->
vm_hash_mask
 = 
√w_size
 - 1;

1621 
vmp
->
vm_hash_èbÀ
 = 
√w_èbÀ
;

1622 
vmp
->
vm_hash_shi·
 = 
	`highbô
(vmp->
vm_hash_mask
);

1624 
h
 = 0; h < 
ﬁd_size
; h++) {

1625 
v•
 = 
ﬁd_èbÀ
[
h
];

1626 
v•
 !
NULL
) {

1627 
uöçå_t
 
addr
 = 
v•
->
vs_°¨t
;

1628 
vmem_£g_t
 *
√xt_v•
 = 
v•
->
vs_k√xt
;

1629 
vmem_£g_t
 **
hash_buckë
 = 
	`VMEM_HASH
(
vmp
, 
addr
);

1630 
v•
->
vs_k√xt
 = *
hash_buckë
;

1631 *
hash_buckë
 = 
v•
;

1632 
v•
 = 
√xt_v•
;

1636 (Ë
	`muãx_u∆ock
(&
vmp
->
vm_lock
);

1638 i‡(
ﬁd_èbÀ
 !
vmp
->
vm_hash0
)

1639 
	`vmem_‰ì
(
vmem_hash_¨ía
, 
ﬁd_èbÀ
,

1640 
ﬁd_size
 *  (*));

1641 
	}
}

1648 
	$vmem_upd©e
(*
dummy
)

1650 
vmem_t
 *
vmp
;

1652 (Ë
	`muãx_lock
(&
vmem_li°_lock
);

1653 
vmp
 = 
vmem_li°
; vm∞!
NULL
; vm∞vmp->
vm_√xt
) {

1659 (Ë
	`c⁄d_brﬂdˇ°
(&
vmp
->
vm_cv
);

1664 
	`vmem_hash_ªsˇÀ
(
vmp
);

1666 (Ë
	`muãx_u∆ock
(&
vmem_li°_lock
);

1667 
	}
}

1674 
	$vmem_°¨tup
()

1676 #ifde‡
UMEM_STANDALONE


1677 
vmem_id
 = 0;

1678 
vmem_p›uœt‹s
 = 0;

1679 
vmem_£g‰ì
 = 
NULL
;

1680 
vmem_li°
 = 
NULL
;

1681 
vmem_öã∫Æ_¨ía
 = 
NULL
;

1682 
vmem_£g_¨ía
 = 
NULL
;

1683 
vmem_hash_¨ía
 = 
NULL
;

1684 
vmem_vmem_¨ía
 = 
NULL
;

1685 
vmem_hóp
 = 
NULL
;

1686 
vmem_hóp_Æloc
 = 
NULL
;

1687 
vmem_hóp_‰ì
 = 
NULL
;

1689 
	`bzîo
(
vmem0
,  (vmem0));

1690 
	`bzîo
(
vmem_p›uœt‹
,  (vmem_populator));

1691 
	`bzîo
(
vmem_£g0
,  (vmem_seg0));

1693 
	}
}

1698 
vmem_t
 *

1699 
	$vmem_öô
(c⁄° *
∑ª¡_«me
, 
size_t
 
∑ª¡_qu™tum
,

1700 
vmem_Æloc_t
 *
∑ª¡_Æloc
, 
vmem_‰ì_t
 *
∑ª¡_‰ì
,

1701 c⁄° *
hóp_«me
, *
hóp_°¨t
, 
size_t
 
hóp_size
,

1702 
size_t
 
hóp_qu™tum
, 
vmem_Æloc_t
 *
hóp_Æloc
, 
vmem_‰ì_t
 *
hóp_‰ì
)

1704 
uöt32_t
 
id
;

1705 
n£g
 = 
VMEM_SEG_INITIAL
;

1706 
vmem_t
 *
∑ª¡
, *
hóp
;

1708 
	`ASSERT
(
vmem_öã∫Æ_¨ía
 =
NULL
);

1710 --
n£g
 >= 0)

1711 
	`vmem_put£g_globÆ
(&
vmem_£g0
[
n£g
]);

1713 i‡(
∑ª¡_«me
 !
NULL
) {

1714 
∑ª¡
 = 
	`vmem_¸óã
(
∑ª¡_«me
,

1715 
hóp_°¨t
, 
hóp_size
, 
∑ª¡_qu™tum
,

1716 
NULL
, NULL, NULL, 0,

1717 
VM_SLEEP
 | 
VMC_POPULATOR
);

1718 
hóp_°¨t
 = 
NULL
;

1719 
hóp_size
 = 0;

1721 
	`ASSERT
(
∑ª¡_Æloc
 =
NULL
 && 
∑ª¡_‰ì
 == NULL);

1722 
∑ª¡
 = 
NULL
;

1725 
hóp
 = 
	`vmem_¸óã
(
hóp_«me
,

1726 
hóp_°¨t
, 
hóp_size
, 
hóp_qu™tum
,

1727 
∑ª¡_Æloc
, 
∑ª¡_‰ì
, 
∑ª¡
, 0,

1728 
VM_SLEEP
 | 
VMC_POPULATOR
);

1730 
vmem_hóp
 = 
hóp
;

1731 
vmem_hóp_Æloc
 = 
hóp_Æloc
;

1732 
vmem_hóp_‰ì
 = 
hóp_‰ì
;

1734 
vmem_öã∫Æ_¨ía
 = 
	`vmem_¸óã
("vmem_internal",

1735 
NULL
, 0, 
hóp_qu™tum
,

1736 
hóp_Æloc
, 
hóp_‰ì
, 
hóp
, 0,

1737 
VM_SLEEP
 | 
VMC_POPULATOR
);

1739 
vmem_£g_¨ía
 = 
	`vmem_¸óã
("vmem_seg",

1740 
NULL
, 0, 
hóp_qu™tum
,

1741 
vmem_Æloc
, 
vmem_‰ì
, 
vmem_öã∫Æ_¨ía
, 0,

1742 
VM_SLEEP
 | 
VMC_POPULATOR
);

1744 
vmem_hash_¨ía
 = 
	`vmem_¸óã
("vmem_hash",

1745 
NULL
, 0, 8,

1746 
vmem_Æloc
, 
vmem_‰ì
, 
vmem_öã∫Æ_¨ía
, 0,

1747 
VM_SLEEP
);

1749 
vmem_vmem_¨ía
 = 
	`vmem_¸óã
("vmem_vmem",

1750 
vmem0
,  (vmem0), 1,

1751 
vmem_Æloc
, 
vmem_‰ì
, 
vmem_öã∫Æ_¨ía
, 0,

1752 
VM_SLEEP
);

1754 
id
 = 0; id < 
vmem_id
; id++)

1755 (Ë
	`vmem_xÆloc
(
vmem_vmem_¨ía
,  (
vmem_t
),

1756 1, 0, 0, &
vmem0
[
id
], &vmem0[id + 1],

1757 
VM_NOSLEEP
 | 
VM_BESTFIT
 | 
VM_PANIC
);

1759  (
hóp
);

1760 
	}
}

1763 
	$vmem_no_debug
()

1769 
vmem_£g_size
 = 
	`P2ROUNDUP
(
	`off£tof
(
vmem_£g_t
, 
vs_thªad
),

1770  (
hπime_t
));

1771 
	}
}

1777 
	$vmem_lockup
()

1779 
vmem_t
 *
cur
;

1781 (Ë
	`muãx_lock
(&
vmem_li°_lock
);

1782 (Ë
	`muãx_lock
(&
vmem_no¶ìp_lock
.
vm∂_muãx
);

1787 
cur
 = 
vmem_li°
; cu∏!
NULL
; cu∏cur->
vm_√xt
) {

1788 (Ë
	`muãx_lock
(&
cur
->
vm_lock
);

1789 (Ë
	`c⁄d_brﬂdˇ°
(&
cur
->
vm_cv
);

1792 (Ë
	`muãx_lock
(&
vmem_£g‰ì_lock
);

1793 
	}
}

1796 
	$vmem_ªÀa£
()

1798 
vmem_t
 *
cur
;

1800 (Ë
	`muãx_u∆ock
(&
vmem_no¶ìp_lock
.
vm∂_muãx
);

1802 
cur
 = 
vmem_li°
; cu∏!
NULL
; cu∏cur->
vm_√xt
)

1803 (Ë
	`muãx_u∆ock
(&
cur
->
vm_lock
);

1805 (Ë
	`muãx_u∆ock
(&
vmem_£g‰ì_lock
);

1806 (Ë
	`muãx_u∆ock
(&
vmem_li°_lock
);

1807 
	}
}

	@vmem_base.c

30 
	~"c⁄fig.h
"

31 
	~"vmem_ba£.h
"

32 
	~"umem_ba£.h
"

34 
uöt_t
 
	gvmem_backíd
 = 0;

36 
vmem_t
 *

37 
	$vmem_hóp_¨ía
(
vmem_Æloc_t
 **
Ælo˝
, 
vmem_‰ì_t
 **
‰ìp
)

39 
muãx_t
 
¨ía_muãx
 = 
DEFAULTMUTEX
;

44 i‡(
umem_ªady
 !
UMEM_READY
 && 
umem_öô_thr
 !
	`thr_£lf
() &&

45 
	`umem_öô
() == 0)

46  (
NULL
);

48 (Ë
	`muãx_lock
(&
¨ía_muãx
);

49 i‡(
vmem_hóp
 =
NULL
)

50 
	`vmem_hóp_öô
();

51 (Ë
	`muãx_u∆ock
(&
¨ía_muãx
);

53 i‡(
Ælo˝
 !
NULL
)

54 *
Ælo˝
 = 
vmem_hóp_Æloc
;

55 i‡(
‰ìp
 !
NULL
)

56 *
‰ìp
 = 
vmem_hóp_‰ì
;

57  (
vmem_hóp
);

58 
	}
}

	@vmem_base.h

27 #i‚def 
_VMEM_BASE_H


28 
	#_VMEM_BASE_H


	)

32 
	~<sys/vmem.h
>

33 
	~<umem.h
>

35 #ifdef 
__˝lu•lus


39 
	~"misc.h
"

41 
vmem_°¨tup
();

42 
vmem_t
 *
vmem_öô
(c⁄° *
∑ª¡_«me
, 
size_t
 
∑ª¡_qu™tum
,

43 
vmem_Æloc_t
 *
∑ª¡_Æloc
, 
vmem_‰ì_t
 *
∑ª¡_‰ì
,

44 c⁄° *
hóp_«me
,

45 *
hóp_°¨t
, 
size_t
 
hóp_size
, size_à
hóp_qu™tum
,

46 
vmem_Æloc_t
 *
hóp_Æloc
, 
vmem_‰ì_t
 *
hóp_‰ì
);

48 *
_vmem_exãnd_Æloc
(
vmem_t
 *
vmp
, *
vaddr
, 
size_t
 
size
,

49 
size_t
 
Æloc
, 
vmÊag
);

51 
vmem_t
 *
vmem_hóp_¨ía
(
vmem_Æloc_t
 **, 
vmem_‰ì_t
 **);

52 
vmem_hóp_öô
();

54 
vmem_t
 *
vmem_sbrk_¨ía
(
vmem_Æloc_t
 **, 
vmem_‰ì_t
 **);

55 
vmem_t
 *
vmem_mm≠_¨ía
(
vmem_Æloc_t
 **, 
vmem_‰ì_t
 **);

56 
vmem_t
 *
vmem_°™d_¨ía
(
vmem_Æloc_t
 **, 
vmem_‰ì_t
 **);

58 
vmem_upd©e
(*);

59 
vmem_ª≠
();

61 
size_t
 
∑gesize
;

62 
size_t
 
vmem_sbrk_∑gesize
;

64 
uöt_t
 
vmem_backíd
;

65 
	#VMEM_BACKEND_SBRK
 0x0000001

	)

66 
	#VMEM_BACKEND_MMAP
 0x0000002

	)

67 
	#VMEM_BACKEND_STAND
 0x0000003

	)

69 
vmem_t
 *
vmem_hóp
;

70 
vmem_Æloc_t
 *
vmem_hóp_Æloc
;

71 
vmem_‰ì_t
 *
vmem_hóp_‰ì
;

73 
vmem_lockup
();

74 
vmem_ªÀa£
();

76 
vmem_sbrk_lockup
();

77 
vmem_sbrk_ªÀa£
();

79 
vmem_no_debug
();

81 #ifdef 
__˝lu•lus


	@vmem_mmap.c

32 
	~"c⁄fig.h
"

33 
	~<î∫o.h
>

35 #i‡
HAVE_SYS_MMAN_H


36 
	~<sys/mm™.h
>

39 #ifde‡
HAVE_SYS_SYSMACROS_H


40 
	~<sys/sysma¸os.h
>

43 
	~<uni°d.h
>

45 
	~"vmem_ba£.h
"

47 
	#ALLOC_PROT
 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC


	)

48 
	#FREE_PROT
 
PROT_NONE


	)

50 
	#ALLOC_FLAGS
 
MAP_PRIVATE
 | 
MAP_ANON


	)

51 
	#FREE_FLAGS
 
MAP_PRIVATE
 | 
MAP_ANON
 | 
MAP_NORESERVE


	)

53 #ifde‡
MAP_ALIGN


54 
	#CHUNKSIZE
 (64*1024Ë

	)

56 
size_t
 
	gCHUNKSIZE
;

59 
vmem_t
 *
	gmm≠_hóp
;

62 
	$vmem_mm≠_Æloc
(
vmem_t
 *
§c
, 
size_t
 
size
, 
vmÊags
)

64 *
ªt
;

65 
ﬁd_î∫o
 = 
î∫o
;

67 
ªt
 = 
	`vmem_Æloc
(
§c
, 
size
, 
vmÊags
);

68 #i‚de‡
_WIN32


69 i‡(
ªt
 !
NULL


71 
	`mm≠
(
ªt
, 
size
, 
ALLOC_PROT
, 
ALLOC_FLAGS
 | 
MAP_FIXED
, -1, 0) ==

72 
MAP_FAILED


74 
	`vmem_‰ì
(
§c
, 
ªt
, 
size
);

75 
	`vmem_ª≠
();

77 
	`ASSERT
((
vmÊags
 & 
VM_NOSLEEP
) == VM_NOSLEEP);

78 
î∫o
 = 
ﬁd_î∫o
;

79  (
NULL
);

83 
î∫o
 = 
ﬁd_î∫o
;

84  (
ªt
);

85 
	}
}

88 
	$vmem_mm≠_‰ì
(
vmem_t
 *
§c
, *
addr
, 
size_t
 
size
)

90 
ﬁd_î∫o
 = 
î∫o
;

91 #ifde‡
_WIN32


92 
	`VútuÆFªe
(
addr
, 
size
, 
MEM_RELEASE
);

94 (Ë
	`mm≠
(
addr
, 
size
, 
FREE_PROT
, 
FREE_FLAGS
 | 
MAP_FIXED
, -1, 0);

96 
	`vmem_‰ì
(
§c
, 
addr
, 
size
);

97 
î∫o
 = 
ﬁd_î∫o
;

98 
	}
}

101 
	$vmem_mm≠_t›_Æloc
(
vmem_t
 *
§c
, 
size_t
 
size
, 
vmÊags
)

103 *
ªt
;

104 *
buf
;

105 
ﬁd_î∫o
 = 
î∫o
;

107 
ªt
 = 
	`vmem_Æloc
(
§c
, 
size
, 
VM_NOSLEEP
);

109 i‡(
ªt
) {

110 
î∫o
 = 
ﬁd_î∫o
;

111  (
ªt
);

116 #ifde‡
_WIN32


117 
buf
 = 
	`VútuÆAŒoc
(
NULL
, 
size
, 
MEM_RESERVE
|
MEM_COMMIT
, 
PAGE_READWRITE
);

118 i‡(
buf
 =
NULL
Ëbu‡
MAP_FAILED
;

120 
buf
 = 
	`mm≠
(

121 #ifde‡
MAP_ALIGN


122 (*)
CHUNKSIZE
,

126 
size
, 
FREE_PROT
, 
FREE_FLAGS


127 #ifde‡
MAP_ALIGN


128 | 
MAP_ALIGN


133 i‡(
buf
 !
MAP_FAILED
) {

134 
ªt
 = 
	`_vmem_exãnd_Æloc
(
§c
, 
buf
, 
size
, size, 
vmÊags
);

135 i‡(
ªt
 !
NULL
)

136  (
ªt
);

138 (Ë
	`munm≠
(
buf
, 
size
);

139 
î∫o
 = 
ﬁd_î∫o
;

140  (
NULL
);

147 
	`ASSERT
((
vmÊags
 & 
VM_NOSLEEP
) == VM_NOSLEEP);

149 
î∫o
 = 
ﬁd_î∫o
;

150  (
NULL
);

152 
	}
}

154 
vmem_t
 *

155 
	$vmem_mm≠_¨ía
(
vmem_Æloc_t
 **
a_out
, 
vmem_‰ì_t
 **
f_out
)

157 #ifde‡
_WIN32


158 
SYSTEM_INFO
 
öfo
;

159 
size_t
 
∑gesize
;

161 
size_t
 
∑gesize
 = 
	`_sysc⁄f
(
_SC_PAGESIZE
);

164 #ifde‡
_WIN32


165 
	`GëSy°emInfo
(&
öfo
);

166 
∑gesize
 = 
öfo
.
dwPageSize
;

167 
CHUNKSIZE
 = 
öfo
.
dwAŒoˇti⁄Gønuœrôy
;

168 #ñi‡!
	`deföed
(
MAP_ALIGN
)

169 
CHUNKSIZE
 = 
∑gesize
;

172 i‡(
mm≠_hóp
 =
NULL
) {

173 
mm≠_hóp
 = 
	`vmem_öô
("mmap_top",

174 
CHUNKSIZE
,

175 
vmem_mm≠_t›_Æloc
, 
vmem_‰ì
,

176 "mm≠_hóp", 
NULL
, 0, 
∑gesize
,

177 
vmem_mm≠_Æloc
, 
vmem_mm≠_‰ì
);

180 i‡(
a_out
 !
NULL
)

181 *
a_out
 = 
vmem_mm≠_Æloc
;

182 i‡(
f_out
 !
NULL
)

183 *
f_out
 = 
vmem_mm≠_‰ì
;

185  (
mm≠_hóp
);

186 
	}
}

	@vmem_sbrk.c

57 
	~"c⁄fig.h
"

59 
	~<î∫o.h
>

60 
	~<limôs.h
>

61 #ifde‡
HAVE_SYS_SYSMACROS_H


62 
	~<sys/sysma¸os.h
>

64 
	~<sys/mm™.h
>

65 
	~<uni°d.h
>

67 
	~"vmem_ba£.h
"

69 
	~"misc.h
"

71 
size_t
 
	gvmem_sbrk_∑gesize
 = 0;

73 
	#MIN_ALLOC
 (64*1024)

	)

75 
size_t
 
	gªÆ_∑gesize
;

76 
vmem_t
 *
	gsbrk_hóp
;

78 
	ssbrk_Áû
 {

79 
sbrk_Áû
 *
	msf_√xt
;

80 
sbrk_Áû
 *
	msf_¥ev
;

81 *
	msf_ba£
;

82 
size_t
 
	msf_size
;

83 } 
	tsbrk_Áû_t
;

85 
sbrk_Áû_t
 
	gsbrk_Áûs
 = {

86 &
sbrk_Áûs
,

87 &
sbrk_Áûs
,

88 
NULL
,

92 
muãx_t
 
	gsbrk_Áûlock
 = 
DEFAULTMUTEX
;

104 
	$_sbrk_grow_Æig√d
(
size_t
 
mö_size
, size_à
low_Æign
, size_à
high_Æign
,

105 
size_t
 *
a˘uÆ_size
)

107 
uöçå_t
 
ﬁd_brk
;

108 
uöçå_t
 
ªt_brk
;

109 
uöçå_t
 
high_brk
;

110 
uöçå_t
 
√w_brk
;

111 
brk_ªsu…
;

113 
	#ALIGNSZ
 16

	)

114 
	#BRKALIGN
(
x
Ë(
ˇddr_t
)
	`P2ROUNDUP
((
uöçå_t
)(x), 
ALIGNSZ
)

	)

116 i‡((
low_Æign
 & (low_align - 1)) != 0 ||

117 (
high_Æign
 & (high_align - 1)) != 0) {

118 
î∫o
 = 
EINVAL
;

121 
low_Æign
 = 
	`MAX
÷ow_Æign, 
ALIGNSZ
);

122 
high_Æign
 = 
	`MAX
(high_Æign, 
ALIGNSZ
);

124 
ﬁd_brk
 = (
uöçå_t
)
	`BRKALIGN
(
	`sbrk
(0));

125 
ªt_brk
 = 
	`P2ROUNDUP
(
ﬁd_brk
, 
low_Æign
);

126 
high_brk
 = 
ªt_brk
 + 
mö_size
;

127 
√w_brk
 = 
	`P2ROUNDUP
(
high_brk
, 
high_Æign
);

132 i‡(
ªt_brk
 < 
ﬁd_brk
 || 
high_brk
 <Ñë_brk || 
√w_brk
 < high_brk) {

133 
î∫o
 = 
ENOMEM
;

137 
brk_ªsu…
 = 
	`brk
((*)
√w_brk
);

139 i‡(
brk_ªsu…
 != 0)

142 i‡(
a˘uÆ_size
 !
NULL
)

143 *
a˘uÆ_size
 = (
√w_brk
 - 
ªt_brk
);

144  ((*)
ªt_brk
);

145 
	}
}

153 
	$vmem_sbrk_exãnd_Æloc
(
vmem_t
 *
§c
, *
pos
, 
size_t
 
size
, size_à
Æloc
,

154 
vmÊags
)

156 
sbrk_Áû_t
 *
‚ext
, *
Âªv
, *
Â
;

157 *
ªt
;

159 
ªt
 = 
	`_vmem_exãnd_Æloc
(
§c
, 
pos
, 
size
, 
Æloc
, 
vmÊags
);

160 i‡(
ªt
 !
NULL
)

161  (
ªt
);

163 
Â
 = (
sbrk_Áû_t
 *)
pos
;

165 
	`ASSERT
( (
sbrk_Áû_t
Ë<
size
);

167 
Â
->
sf_ba£
 = 
pos
;

168 
Â
->
sf_size
 = 
size
;

170 (Ë
	`muãx_lock
(&
sbrk_Áûlock
);

171 
Â
->
sf_√xt
 = 
‚ext
 = &
sbrk_Áûs
;

172 
Â
->
sf_¥ev
 = 
Âªv
 = 
sbrk_Áûs
.sf_prev;

173 
‚ext
->
sf_¥ev
 = 
Â
;

174 
Âªv
->
sf_√xt
 = 
Â
;

175 (Ë
	`muãx_u∆ock
(&
sbrk_Áûlock
);

177  (
NULL
);

178 
	}
}

184 
	$vmem_sbrk_åyÁû
(
vmem_t
 *
§c
, 
size_t
 
size
, 
vmÊags
)

186 
sbrk_Áû_t
 *
Â
;

188 (Ë
	`muãx_lock
(&
sbrk_Áûlock
);

189 
Â
 = 
sbrk_Áûs
.
sf_√xt
; fp != &sbrk_fails; fp = fp->sf_next) {

190 i‡(
Â
->
sf_size
 >
size
) {

191 
Â
->
sf_√xt
->
sf_¥ev
 = fp->sf_prev;

192 
Â
->
sf_¥ev
->
sf_√xt
 = fp->sf_next;

193 
Â
->
sf_√xt
 = fp->
sf_¥ev
 = 
NULL
;

197 (Ë
	`muãx_u∆ock
(&
sbrk_Áûlock
);

199 i‡(
Â
 !&
sbrk_Áûs
) {

200 
	`ASSERT
(
Â
->
sf_ba£
 == (*)fp);

201  (
	`vmem_sbrk_exãnd_Æloc
(
§c
, 
Â
, fp->
sf_size
, 
size
,

202 
vmÊags
));

207  (
NULL
);

208 
	}
}

211 
	$vmem_sbrk_Æloc
(
vmem_t
 *
§c
, 
size_t
 
size
, 
vmÊags
)

213 *
	`_sbrk_grow_Æig√d
(
size_t
 
mö_size
, size_à
low_Æign
,

214 
size_t
 
high_Æign
, size_à*
a˘uÆ_size
);

216 *
ªt
;

217 *
buf
;

218 
size_t
 
buf_size
;

220 
ﬁd_î∫o
 = 
î∫o
;

222 
ªt
 = 
	`vmem_Æloc
(
§c
, 
size
, 
VM_NOSLEEP
);

223 i‡(
ªt
 !
NULL
) {

224 
î∫o
 = 
ﬁd_î∫o
;

225  (
ªt
);

233 i‡(
sbrk_Áûs
.
sf_√xt
 != &sbrk_fails &&

234 (
ªt
 = 
	`vmem_sbrk_åyÁû
(
§c
, 
size
, 
vmÊags
)Ë!
NULL
)

235  (
ªt
);

237 
buf_size
 = 
	`MAX
(
size
, 
MIN_ALLOC
);

242 
buf
 = 
	`_sbrk_grow_Æig√d
(
buf_size
, 
ªÆ_∑gesize
, 
vmem_sbrk_∑gesize
,

243 &
buf_size
);

245 i‡(
buf
 !
MAP_FAILED
) {

246 
ªt
 = 
	`vmem_sbrk_exãnd_Æloc
(
§c
, 
buf
, 
buf_size
, 
size
, 
vmÊags
);

247 i‡(
ªt
 !
NULL
) {

248 
î∫o
 = 
ﬁd_î∫o
;

249  (
ªt
);

256 
	`ASSERT
((
vmÊags
 & 
VM_NOSLEEP
) == VM_NOSLEEP);

258 
î∫o
 = 
ﬁd_î∫o
;

259  (
NULL
);

260 
	}
}

266 
	$vmem_sbrk_lockup
()

268 (Ë
	`muãx_lock
(&
sbrk_Áûlock
);

269 
	}
}

272 
	$vmem_sbrk_ªÀa£
()

274 (Ë
	`muãx_u∆ock
(&
sbrk_Áûlock
);

275 
	}
}

277 
vmem_t
 *

278 
	$vmem_sbrk_¨ía
(
vmem_Æloc_t
 **
a_out
, 
vmem_‰ì_t
 **
f_out
)

280 i‡(
sbrk_hóp
 =
NULL
) {

281 
size_t
 
hóp_size
;

283 
ªÆ_∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

285 
hóp_size
 = 
vmem_sbrk_∑gesize
;

287 i‡(
	`is£tugid
()) {

288 
hóp_size
 = 0;

289 } i‡(
hóp_size
 !0 && !
	`ISP2
(heap_size)) {

290 
hóp_size
 = 0;

291 
	`log_mesßge
("ign‹ög badÖagesize: 0x%p\n", 
hóp_size
);

293 i‡(
hóp_size
 <
ªÆ_∑gesize
) {

294 
hóp_size
 = 
ªÆ_∑gesize
;

296 #ifde‡
MHA_MAPSIZE_BSSBRK


297 
mem˙é_mha
 
mha
;

298 
mha
.
mha_cmd
 = 
MHA_MAPSIZE_BSSBRK
;

299 
mha
.
mha_Êags
 = 0;

300 
mha
.
mha_∑gesize
 = 
hóp_size
;

302 i‡(
	`mem˙é
(
NULL
, 0, 
MC_HAT_ADVISE
, (*)&
mha
, 0, 0)

304 
	`log_mesßge
("unableÅo set MAPSIZE_BSSBRKÅo "

305 "0x%p\n", 
hóp_size
);

306 
hóp_size
 = 
ªÆ_∑gesize
;

309 
hóp_size
 = 
ªÆ_∑gesize
;

312 
vmem_sbrk_∑gesize
 = 
hóp_size
;

314 
sbrk_hóp
 = 
	`vmem_öô
("sbrk_t›", 
ªÆ_∑gesize
,

315 
vmem_sbrk_Æloc
, 
vmem_‰ì
,

316 "sbrk_hóp", 
NULL
, 0, 
ªÆ_∑gesize
,

317 
vmem_Æloc
, 
vmem_‰ì
);

320 i‡(
a_out
 !
NULL
)

321 *
a_out
 = 
vmem_Æloc
;

322 i‡(
f_out
 !
NULL
)

323 *
f_out
 = 
vmem_‰ì
;

325  (
sbrk_hóp
);

326 
	}
}

	@vmem_stand.h

27 #i‚de‡
_VMEM_STAND_H


28 
	#_VMEM_STAND_H


	)

36 
	~<sys/ty≥s.h
>

38 #ifde‡
__˝lu•lus


42 
vmem_°™d_öô
();

43 
vmem_°™d_add
(
ˇddr_t
, 
size_t
);

45 #ifde‡
__˝lu•lus


	@
1
.
0
35
462
envvar.c
getpcstack.c
init_lib.c
malloc.c
misc.c
misc.h
sol_compat.h
sys/vmem.h
sys/vmem_impl_user.h
tools/leaky_subr.c
tools/libumem.c
tools/misc.c
tools/misc.h
tools/proc_kludges.c
tools/proc_kludges.h
tools/umem.c
tools/umem.h
tools/umem_pagesize.h
umem.c
umem.h
umem_agent_support.c
umem_base.h
umem_fail.c
umem_fork.c
umem_impl.h
umem_test.c
umem_test2.c
umem_test3.c
umem_update_thread.c
vmem.c
vmem_base.c
vmem_base.h
vmem_mmap.c
vmem_sbrk.c
vmem_stand.h
